from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import or_f, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import get_cancel_kb, get_menu_by_role

from src.database.db_init import db

activation_router = Router()

class ActivationStates(StatesGroup):
    waiting_for_code = State()

@activation_router.message(or_f(
    F.text == "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥",
    Command("activate")
))
async def start_activation(message: Message, state: FSMContext):
    print(f"[INFO] Activation requested by user {message.from_user.id}")
    
    user = await db.get_user(message.from_user.id)
    
    if not user:
        print(f"[WARN] User {message.from_user.id} not registered, prompting /start")
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    current_role = user['role']
    if current_role != 'client':
        role_names = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'staff': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
        }
        role_name = role_names.get(current_role, current_role)
        print(f"[INFO] User {message.from_user.id} already has role: {role_name}")
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–æ–ª—å: {role_name}\n"
            "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
            reply_markup=get_menu_by_role(current_role)
        )
        return
    
    print(f"[INFO] User {message.from_user.id} prompted to enter activation code")
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n"
        "–ö–æ–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(ActivationStates.waiting_for_code)

@activation_router.message(ActivationStates.waiting_for_code)
async def process_activation_code(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        print(f"[INFO] User {message.from_user.id} cancelled activation")
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_menu_by_role('client'))
        return
    
    code = message.text.strip().upper()
    print(f"[INFO] User {message.from_user.id} entered activation code: {code}")
    
    activation = await db.check_activation_code(code)
    
    if not activation:
        print(f"[WARN] Invalid or used activation code by user {message.from_user.id}: {code}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
            reply_markup=get_menu_by_role('client')
        )
        await state.clear()
        return
    
    await db.use_activation_code(code, message.from_user.id)
    new_role = activation['role']
    await db.update_user_role(message.from_user.id, new_role)
    
    role_names = {
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'staff': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
    }
    role_name = role_names.get(new_role, new_role)
    
    print(f"[INFO] User {message.from_user.id} activated new role: {new_role}")
    
    await message.answer(
        f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
        reply_markup=get_menu_by_role(new_role)
    )
    
    await db.add_request_stat(
        message.from_user.id,
        "code_activation",
        f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–æ–ª—å: {new_role}"
    )
    
    print(f"[INFO] Activation stat logged for user {message.from_user.id}")
    await state.clear()
