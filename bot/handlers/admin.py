import random
import string
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import get_cancel_kb, get_admin_menu_kb, get_main_menu_kb

from src.database.db_init import db

admin_router = Router()

class ActivationStates(StatesGroup):
    waiting_for_code = State()

@admin_router.message(F.text == "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
async def start_activation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user['role'] == 'admin':
        await message.answer(
            "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            reply_markup=get_admin_menu_kb()
        )
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(ActivationStates.waiting_for_code)

@admin_router.message(ActivationStates.waiting_for_code)
async def process_activation_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_kb())
        return
    
    code = message.text.strip().upper()
    activation = await db.check_activation_code(code)
    
    if activation:
        await db.use_activation_code(code, user_id)
        await db.update_user_role(user_id, 'admin')
        
        await message.answer(
            "‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
            reply_markup=get_cancel_kb()
        )
        return
    
    await state.clear()

@admin_router.message(F.text == "üîê –°–æ–∑–¥–∞—Ç—å –∫–æ–¥")
async def create_code(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    admin_code = f"ADMIN{code}"
    
    await db.create_admin_code(admin_code)
    
    await message.answer(
        "‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω:\n\n"
        f"üë®‚Äçüíº –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: `{admin_code}`\n\n"
        "–ö–æ–¥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=get_admin_menu_kb()
    )

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    stats = await db.get_statistics()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚îú –ö–ª–∏–µ–Ω—Ç–æ–≤ (–≤–µ—Ç.–≤—Ä–∞—á–µ–π): {stats['clients']}\n"
        f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['employees']}\n"
        f"‚îî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admins']}\n\n"
        f"üìã –û–±—Ä–∞—â–µ–Ω–∏–π: {stats['total_requests']}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {stats['questions']}\n"
        f"üìû –ó–≤–æ–Ω–∫–æ–≤: {stats['callbacks']}\n"
        f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['suggestions']}\n"
        f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {stats['complaints']}",
        reply_markup=get_admin_menu_kb()
    )