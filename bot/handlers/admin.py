import random
import string
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import (
    get_cancel_kb, get_admin_menu_kb, get_main_menu_kb, 
    get_excel_export_kb, get_broadcast_type_kb, get_system_management_kb, get_back_to_menu_kb
)
from utils.excel_exporter import ExcelExporter
from utils.csv_exporter import CSVExporter
from datetime import datetime
import asyncio

from src.database.db_init import db

admin_router = Router()

class ActivationStates(StatesGroup):
    waiting_for_code = State()

class ExportStates(StatesGroup):
    choosing_export_type = State()

class BroadcastStates(StatesGroup):
    choosing_broadcast_type = State()
    choosing_content_type = State()
    waiting_for_message = State()
    waiting_for_media = State()
    waiting_for_caption = State()

class SystemStates(StatesGroup):
    in_system_menu = State()

class ViewFeedbackStates(StatesGroup):
    viewing_feedback = State()
    viewing_detailed = State()

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def get_broadcast_content_type_kb():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = [
        [KeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")],
        [KeyboardButton(text="üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
        [KeyboardButton(text="üé¨ –í–∏–¥–µ–æ")],
        [KeyboardButton(text="üé≠ GIF")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_feedback_navigation_kb():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = [
        [KeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ"), KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ")],
        [KeyboardButton(text="üìé –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@admin_router.message(F.text == "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
async def start_activation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user['role'] == 'admin':
        await message.answer(
            "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            reply_markup=get_admin_menu_kb()
        )
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_back_to_menu_kb()
    )
    await state.set_state(ActivationStates.waiting_for_code)

@admin_router.message(ActivationStates.waiting_for_code)
async def process_activation_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_kb())
        return
    
    code = message.text.strip().upper()
    activation = await db.check_activation_code(code)
    
    if activation:
        await db.use_activation_code(code, user_id)
        await db.update_user_role(user_id, 'admin')
        
        await message.answer(
            "‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
            reply_markup=get_back_to_menu_kb()
        )
        return
    
    await state.clear()

@admin_router.message(F.text == "üîê –°–æ–∑–¥–∞—Ç—å –∫–æ–¥")
async def create_code(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    admin_code = f"ADMIN{code}"
    
    await db.create_admin_code(admin_code)
    
    await message.answer(
        "‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω:\n\n"
        f"üë®‚Äçüíº –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: `{admin_code}`\n\n"
        "–ö–æ–¥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=get_admin_menu_kb()
    )

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    stats = await db.get_statistics()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚îú –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats['clients']}\n"
        f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['employees']}\n"
        f"‚îî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admins']}\n\n"
        f"üìã –û–±—Ä–∞—â–µ–Ω–∏–π: {stats['total_requests']}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {stats['questions']}\n"
        f"üìû –ó–≤–æ–Ω–∫–æ–≤: {stats['callbacks']}\n"
        f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['suggestions']}\n"
        f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {stats['complaints']}",
        reply_markup=get_admin_menu_kb()
    )

@admin_router.message(F.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel")
async def start_excel_export(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–≥—Ä—É–∑–∫–∏:",
        reply_markup=get_excel_export_kb()
    )
    await state.set_state(ExportStates.choosing_export_type)

@admin_router.message(ExportStates.choosing_export_type)
async def process_export_choice(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    loading_msg = await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏...")
    
    try:
        exporter = ExcelExporter(db.db_path)
        csv_exporter = CSVExporter(db.db_path)
        filename = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        if message.text == "üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞":
            try:
                excel_data = await exporter.export_all_data()
                filename = f"full_{filename}"
                caption = "üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"
            except Exception as excel_error:
                print(f"[WARNING] Excel export failed, using CSV backup: {excel_error}")
                excel_data = await csv_exporter.export_all_data_csv()
                filename = f"full_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
                caption = "üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã (CSV —Ä–µ–∑–µ—Ä–≤)"
        
        elif message.text == "üë• –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            excel_data = await exporter.export_users()
            filename = f"users_{filename}"
            caption = "üë• –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        elif message.text == "‚ùì –¢–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã":
            excel_data = await exporter.export_questions()
            filename = f"questions_{filename}"
            caption = "‚ùì –í—ã–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        elif message.text == "üìû –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏":
            excel_data = await exporter.export_callbacks()
            filename = f"callbacks_{filename}"
            caption = "üìû –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–≤–æ–Ω–æ–∫"
        
        elif message.text == "üí° –¢–æ–ª—å–∫–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            excel_data = await exporter.export_feedback()
            filename = f"feedback_{filename}"
            caption = "üí° –í—ã–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
        
        else:
            await loading_msg.delete()
            await message.answer(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–≥—Ä—É–∑–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=get_excel_export_kb()
            )
            return
        
        await loading_msg.delete()
        
        await message.answer_document(
            BufferedInputFile(excel_data, filename),
            caption=f"{caption}\nüìÖ –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_admin_menu_kb()
        )
        
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Excel export failed: {e}")
        import traceback
        traceback.print_exc()
        
        await loading_msg.delete()
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        error_details = str(e)
        if "xlsxwriter" in error_details.lower():
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ xlsxwriter. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        elif "database" in error_details.lower() or "sqlite" in error_details.lower():
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "permission" in error_details.lower():
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {error_details[:100]}..."
        
        await message.answer(error_msg, reply_markup=get_admin_menu_kb())
        await state.clear()

@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_broadcast_type_kb()
    )
    await state.set_state(BroadcastStates.choosing_broadcast_type)

@admin_router.message(BroadcastStates.choosing_broadcast_type)
async def process_broadcast_type(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    broadcast_types = {
        "üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º": "all",
        "üë®‚Äç‚öïÔ∏è –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º": "clients",
        "üî¨ –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º": "employees"
    }
    
    if message.text not in broadcast_types:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_broadcast_type_kb()
        )
        return
    
    await state.update_data(broadcast_type=broadcast_types[message.text])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_broadcast_content_type_kb()
    )
    await state.set_state(BroadcastStates.choosing_content_type)

@admin_router.message(BroadcastStates.choosing_content_type)
async def process_content_type(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    if message.text == "üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await state.update_data(content_type="text")
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b>\n"
            "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
            "‚Ä¢ <code>–∫–æ–¥</code>",
            reply_markup=get_back_to_menu_kb()
        )
        await state.set_state(BroadcastStates.waiting_for_message)
    
    elif message.text in ["üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üé¨ –í–∏–¥–µ–æ", "üé≠ GIF"]:
        content_types = {
            "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": "photo",
            "üé¨ –í–∏–¥–µ–æ": "video",
            "üé≠ GIF": "animation"
        }
        await state.update_data(content_type=content_types[message.text])
        
        media_type = message.text.split()[1].lower()
        await message.answer(
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_type} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=get_back_to_menu_kb()
        )
        await state.set_state(BroadcastStates.waiting_for_media)
    
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_broadcast_content_type_kb()
        )

@admin_router.message(BroadcastStates.waiting_for_media)
async def process_media(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    data = await state.get_data()
    content_type = data.get('content_type')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞
    if content_type == "photo" and message.photo:
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
        await state.update_data(file_id=file_id)
    elif content_type == "video" and message.video:
        file_id = message.video.file_id
        await state.update_data(file_id=file_id)
    elif content_type == "animation" and message.animation:
        file_id = message.animation.file_id
        await state.update_data(file_id=file_id)
    else:
        await message.answer(
            f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è {'—Ñ–æ—Ç–æ' if content_type == 'photo' else '–≤–∏–¥–µ–æ' if content_type == 'video' else 'GIF'}. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.",
            reply_markup=get_back_to_menu_kb()
        )
        return
    
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <code>–∫–æ–¥</code>",
        reply_markup=get_back_to_menu_kb()
    )
    await state.set_state(BroadcastStates.waiting_for_caption)

@admin_router.message(BroadcastStates.waiting_for_caption)
async def process_caption(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    caption = None if message.text == "-" else message.text
    await state.update_data(caption=caption)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
    await send_broadcast(message, state)

@admin_router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    await state.update_data(text=message.text)
    await send_broadcast(message, state)

async def send_broadcast(message: Message, state: FSMContext):
    data = await state.get_data()
    broadcast_type = data['broadcast_type']
    content_type = data.get('content_type', 'text')
    
    recipients = await db.get_broadcast_recipients(broadcast_type)
    
    if not recipients:
        await message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏
    preview_text = "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n\n".format(len(recipients))
    
    if content_type == "text":
        preview_text += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{data.get('text')}\n\n"
    else:
        media_types = {"photo": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "video": "–í–∏–¥–µ–æ", "animation": "GIF"}
        preview_text += f"–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {media_types.get(content_type)}\n"
        if data.get('caption'):
            preview_text += f"–ü–æ–¥–ø–∏—Å—å: {data.get('caption')}\n\n"
    
    preview_text += "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É..."
    
    await message.answer(preview_text)
    
    from bot.handlers import bot
    success_count = 0
    failed_count = 0
    
    for recipient_id in recipients:
        try:
            if content_type == "text":
                await bot.send_message(
                    recipient_id,
                    f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n{data.get('text')}",
                    parse_mode="HTML"
                )
            elif content_type == "photo":
                caption = f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n{data.get('caption')}" if data.get('caption') else "üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                await bot.send_photo(
                    recipient_id,
                    photo=data.get('file_id'),
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_type == "video":
                caption = f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n{data.get('caption')}" if data.get('caption') else "üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                await bot.send_video(
                    recipient_id,
                    video=data.get('file_id'),
                    caption=caption,
                    parse_mode="HTML"
                )
            elif content_type == "animation":
                caption = f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n{data.get('caption')}" if data.get('caption') else "üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                await bot.send_animation(
                    recipient_id,
                    animation=data.get('file_id'),
                    caption=caption,
                    parse_mode="HTML"
                )
            
            success_count += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            failed_count += 1
            print(f"Failed to send to {recipient_id}: {e}")
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        reply_markup=get_admin_menu_kb()
    )
    await state.clear()

@admin_router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    users_info = await db.get_recent_users(limit=10)
    
    if not users_info:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_menu_kb()
        )
        return
    
    text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    for user_data in users_info:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data.get('user_type') == 'client':
            user_type = "üë®‚Äç‚öïÔ∏è –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä"
        elif user_data.get('user_type') == 'employee':
            user_type = "üî¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        else:
            user_type = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
        role = " üëë" if user_data['role'] == 'admin' else ""
        
        text += f"{user_type}{role} {user_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}\n"
        text += f"üÜî {user_data['telegram_id']}\n"
        
        if user_data.get('client_code'):
            text += f"üè• –ö–æ–¥: {user_data['client_code']}\n"
        
        if user_data.get('specialization'):
            text += f"üìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {user_data['specialization']}\n"
        elif user_data.get('department_function'):
            dept_map = {'laboratory': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', 'sales': '–ü—Ä–æ–¥–∞–∂–∏', 'support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'}
            dept = dept_map.get(user_data['department_function'], user_data['department_function'])
            text += f"üè¢ –§—É–Ω–∫—Ü–∏—è: {dept}\n"
            if user_data.get('region'):
                text += f"üìç –†–µ–≥–∏–æ–Ω: {user_data['region']}\n"
        
        text += f"üåç –°—Ç—Ä–∞–Ω–∞: {user_data.get('country', 'BY')}\n"
        text += f"üìÖ {user_data['registration_date']}\n"
        text += "‚îÄ" * 30 + "\n"
    
    await message.answer(text, reply_markup=get_admin_menu_kb())

@admin_router.message(F.text == "üìã –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def show_all_requests(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        recent_feedback = await db.get_recent_feedback(limit=10)
        
        if not recent_feedback:
            await message.answer(
                "–û–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=get_admin_menu_kb()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await state.update_data(feedback_list=recent_feedback, current_index=0)
        
        text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        
        for i, feedback in enumerate(recent_feedback[:5], 1):
            feedback_type = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" if feedback.get('feedback_type') == 'suggestion' else "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞"
            status = {
                'new': 'üÜï –ù–æ–≤–æ–µ',
                'in_progress': '‚è≥ –í —Ä–∞–±–æ—Ç–µ',
                'resolved': '‚úÖ –†–µ—à–µ–Ω–æ'
            }.get(feedback.get('status', 'new'), 'new')
            
            text += f"{i}. {feedback_type} | {status}\n"
            text += f"üë§ {feedback.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = feedback.get('message', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
            if isinstance(message_text, str):
                preview = message_text[:50] + ('...' if len(message_text) > 50 else '')
            else:
                preview = "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            
            text += f"üìù {preview}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
            if feedback.get('media_type'):
                media_icons = {
                    'photo': 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'video': 'üé¨ –í–∏–¥–µ–æ',
                    'animation': 'üé≠ GIF',
                    'document': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç',
                    'voice': 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ',
                    'audio': 'üéµ –ê—É–¥–∏–æ'
                }
                text += f"üìé {media_icons.get(feedback['media_type'], '–ú–µ–¥–∏–∞')}\n"
            
            text += f"üìÖ {feedback.get('timestamp', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += "‚îÄ" * 30 + "\n"
        
        text += "\nüìå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è (1-10)"
        
        await message.answer(text, reply_markup=get_admin_menu_kb())
        await state.set_state(ViewFeedbackStates.viewing_feedback)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π: {str(e)}",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

@admin_router.message(ViewFeedbackStates.viewing_feedback)
async def view_feedback_detail(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if message.text in ["üîô –ù–∞–∑–∞–¥", "üìã –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
            await state.clear()
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu_kb())
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è
        if message.text.isdigit():
            index = int(message.text) - 1
            data = await state.get_data()
            feedback_list = data.get('feedback_list', [])
            
            if 0 <= index < len(feedback_list):
                feedback = feedback_list[index]
                await state.update_data(current_feedback=feedback, current_index=index)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                feedback_type = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" if feedback.get('feedback_type') == 'suggestion' else "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞"
                status = {
                    'new': 'üÜï –ù–æ–≤–æ–µ',
                    'in_progress': '‚è≥ –í —Ä–∞–±–æ—Ç–µ',
                    'resolved': '‚úÖ –†–µ—à–µ–Ω–æ'
                }.get(feedback.get('status', 'new'), 'new')
                
                detail_text = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è #{index + 1}\n\n"
                detail_text += f"–¢–∏–ø: {feedback_type}\n"
                detail_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
                detail_text += f"üë§ –û—Ç: {feedback.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
                detail_text += f"üÜî ID: {feedback.get('user_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                detail_text += f"üìÖ –î–∞—Ç–∞: {feedback.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                detail_text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{feedback.get('message', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
                if feedback.get('media_type'):
                    media_icons = {
                        'photo': 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                        'video': 'üé¨ –í–∏–¥–µ–æ',
                        'animation': 'üé≠ GIF',
                        'document': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç',
                        'voice': 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                        'audio': 'üéµ –ê—É–¥–∏–æ'
                    }
                    detail_text += f"\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {media_icons.get(feedback['media_type'], '–ú–µ–¥–∏–∞')}"
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å file_id, –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞
                    if feedback.get('media_file_id'):
                        detail_text += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                
                await message.answer(detail_text, reply_markup=get_feedback_navigation_kb())
                await state.set_state(ViewFeedbackStates.viewing_detailed)
            else:
                await message.answer(
                    f"‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ {len(feedback_list)}",
                    reply_markup=get_admin_menu_kb()
                )
        else:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è (—Ü–∏—Ñ—Ä—É) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=get_admin_menu_kb()
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {str(e)}",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

@admin_router.message(ViewFeedbackStates.viewing_detailed)
async def handle_feedback_navigation(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        feedback_list = data.get('feedback_list', [])
        current_index = data.get('current_index', 0)
        current_feedback = data.get('current_feedback')
        
        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É":
            await show_all_requests(message, state)
            return
        
        elif message.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ":
            if current_index > 0:
                current_index -= 1
                await state.update_data(current_index=current_index)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                mock_message = Message(text=str(current_index + 1), from_user=message.from_user, chat=message.chat)
                await view_feedback_detail(mock_message, state)
            else:
                await message.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")
        
        elif message.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ":
            if current_index < len(feedback_list) - 1:
                current_index += 1
                await state.update_data(current_index=current_index)
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                mock_message = Message(text=str(current_index + 1), from_user=message.from_user, chat=message.chat)
                await view_feedback_detail(mock_message, state)
            else:
                await message.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")
        
        elif message.text == "üìé –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞":
            if current_feedback and current_feedback.get('media_file_id'):
                try:
                    from bot.handlers import bot
                    media_type = current_feedback.get('media_type')
                    file_id = current_feedback.get('media_file_id')
                    
                    if media_type == 'photo':
                        await bot.send_photo(message.chat.id, photo=file_id, caption="üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    elif media_type == 'video':
                        await bot.send_video(message.chat.id, video=file_id, caption="üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ")
                    elif media_type == 'animation':
                        await bot.send_animation(message.chat.id, animation=file_id, caption="üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π GIF")
                    elif media_type == 'document':
                        await bot.send_document(message.chat.id, document=file_id, caption="üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
                    elif media_type == 'voice':
                        await bot.send_voice(message.chat.id, voice=file_id, caption="üìé –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    elif media_type == 'audio':
                        await bot.send_audio(message.chat.id, audio=file_id, caption="üìé –ê—É–¥–∏–æ —Ñ–∞–π–ª")
                    else:
                        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
                except Exception as e:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞: {str(e)}")
            else:
                await message.answer("–ö —ç—Ç–æ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞.")
        
        else:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É.",
                reply_markup=get_feedback_navigation_kb()
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

@admin_router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π")
async def system_management(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π",
        reply_markup=get_system_management_kb()
    )
    await state.set_state(SystemStates.in_system_menu)

@admin_router.message(SystemStates.in_system_menu)
async def handle_system_management(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu_kb())
        return
    
    elif message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î":
        loading_msg = await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from src.data_vectorization import DataProcessor
            processor = DataProcessor()
            processor.create_vector_store(reset=True)
            
            await loading_msg.delete()
            await message.answer(
                "‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=get_system_management_kb()
            )
        except Exception as e:
            await loading_msg.delete()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}",
                reply_markup=get_system_management_kb()
            )
    
    elif message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏":
        try:
            cleared_count = await db.clear_old_logs(days=30)
            await message.answer(
                f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)",
                reply_markup=get_system_management_kb()
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {str(e)}",
                reply_markup=get_system_management_kb()
            )
    
    elif message.text == "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        try:
            import psutil
            import os
            
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            db_size = os.path.getsize(db.db_path) / 1024 / 1024
            
            vector_db_path = "data/chroma_db"
            vector_db_size = 0
            if os.path.exists(vector_db_path):
                for dirpath, dirnames, filenames in os.walk(vector_db_path):
                    for f in filenames:
                        fp = os.path.join(dirpath, f)
                        vector_db_size += os.path.getsize(fp)
                vector_db_size = vector_db_size / 1024 / 1024
            
            system_info = f"""
üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üñ•Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_percent}%
üíæ –ü–∞–º—è—Ç—å: {memory.percent}% ({memory.used // 1024 // 1024} –ú–ë / {memory.total // 1024 // 1024} –ú–ë)
üíø –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024 // 1024 // 1024} –ì–ë / {disk.total // 1024 // 1024 // 1024} –ì–ë)

üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_size:.2f} –ú–ë
üîç –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {vector_db_size:.2f} –ú–ë
üìÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {await db.get_uptime()}
            """
            
            await message.answer(
                system_info,
                reply_markup=get_system_management_kb()
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
                reply_markup=get_system_management_kb()
            )
    
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_system_management_kb()
        )
