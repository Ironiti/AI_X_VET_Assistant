import random
import string
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import (
    get_cancel_kb, get_admin_menu_kb, get_main_menu_kb, 
    get_excel_export_kb, get_broadcast_type_kb, get_system_management_kb, get_back_to_menu_kb
)
from utils.excel_exporter import ExcelExporter
from datetime import datetime
import asyncio

from src.database.db_init import db

admin_router = Router()

class ActivationStates(StatesGroup):
    waiting_for_code = State()

class ExportStates(StatesGroup):
    choosing_export_type = State()

class BroadcastStates(StatesGroup):
    choosing_broadcast_type = State()
    waiting_for_message = State()

class SystemStates(StatesGroup):
    in_system_menu = State()

@admin_router.message(F.text == "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
async def start_activation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if user['role'] == 'admin':
        await message.answer(
            "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            reply_markup=get_admin_menu_kb()
        )
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_back_to_menu_kb()
    )
    await state.set_state(ActivationStates.waiting_for_code)

@admin_router.message(ActivationStates.waiting_for_code)
async def process_activation_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_kb())
        return
    
    code = message.text.strip().upper()
    activation = await db.check_activation_code(code)
    
    if activation:
        await db.use_activation_code(code, user_id)
        await db.update_user_role(user_id, 'admin')
        
        await message.answer(
            "‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
            reply_markup=get_back_to_menu_kb()
        )
        return
    
    await state.clear()

@admin_router.message(F.text == "üîê –°–æ–∑–¥–∞—Ç—å –∫–æ–¥")
async def create_code(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    admin_code = f"ADMIN{code}"
    
    await db.create_admin_code(admin_code)
    
    await message.answer(
        "‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω:\n\n"
        f"üë®‚Äçüíº –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: `{admin_code}`\n\n"
        "–ö–æ–¥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=get_admin_menu_kb()
    )

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    stats = await db.get_statistics()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚îú –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats['clients']}\n"
        f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats['employees']}\n"
        f"‚îî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admins']}\n\n"
        f"üìã –û–±—Ä–∞—â–µ–Ω–∏–π: {stats['total_requests']}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {stats['questions']}\n"
        f"üìû –ó–≤–æ–Ω–∫–æ–≤: {stats['callbacks']}\n"
        f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['suggestions']}\n"
        f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {stats['complaints']}",
        reply_markup=get_admin_menu_kb()
    )

@admin_router.message(F.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel")
async def start_excel_export(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–≥—Ä—É–∑–∫–∏:",
        reply_markup=get_excel_export_kb()
    )
    await state.set_state(ExportStates.choosing_export_type)

@admin_router.message(ExportStates.choosing_export_type)
async def process_export_choice(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    loading_msg = await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏...")
    
    try:
        exporter = ExcelExporter(db.db_path)
        filename = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        if message.text == "üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞":
            excel_data = await exporter.export_all_data()
            filename = f"full_{filename}"
            caption = "üìä –ü–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"
        
        elif message.text == "üë• –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            excel_data = await exporter.export_users()
            filename = f"users_{filename}"
            caption = "üë• –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        elif message.text == "‚ùì –¢–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã":
            excel_data = await exporter.export_questions()
            filename = f"questions_{filename}"
            caption = "‚ùì –í—ã–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        elif message.text == "üìû –¢–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–∏":
            excel_data = await exporter.export_callbacks()
            filename = f"callbacks_{filename}"
            caption = "üìû –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–≤–æ–Ω–æ–∫"
        
        elif message.text == "üí° –¢–æ–ª—å–∫–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            excel_data = await exporter.export_feedback()
            filename = f"feedback_{filename}"
            caption = "üí° –í—ã–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
        
        else:
            await loading_msg.delete()
            await message.answer(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–≥—Ä—É–∑–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=get_excel_export_kb()
            )
            return
        
        await loading_msg.delete()
        
        await message.answer_document(
            BufferedInputFile(excel_data, filename),
            caption=f"{caption}\nüìÖ –î–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_admin_menu_kb()
        )
        
        await state.clear()
        
    except Exception as e:
        await loading_msg.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {str(e)}",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_broadcast_type_kb()
    )
    await state.set_state(BroadcastStates.choosing_broadcast_type)

@admin_router.message(BroadcastStates.choosing_broadcast_type)
async def process_broadcast_type(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    broadcast_types = {
        "üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º": "all",
        "üë®‚Äç‚öïÔ∏è –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º": "clients",
        "üî¨ –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º": "employees"
    }
    
    if message.text not in broadcast_types:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_broadcast_type_kb()
        )
        return
    
    await state.update_data(broadcast_type=broadcast_types[message.text])
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <code>–∫–æ–¥</code>",
        reply_markup=get_back_to_menu_kb()
    )
    await state.set_state(BroadcastStates.waiting_for_message)

@admin_router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    if message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu_kb())
        return
    
    data = await state.get_data()
    broadcast_type = data['broadcast_type']
    
    recipients = await db.get_broadcast_recipients(broadcast_type)
    
    if not recipients:
        await message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()
        return
    
    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message.text}\n\n"
        "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É..."
    )
    
    from bot.handlers import bot
    success_count = 0
    failed_count = 0
    
    for recipient_id in recipients:
        try:
            await bot.send_message(
                recipient_id,
                f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ VET UNION</b>\n\n{message.text}",
                parse_mode="HTML"
            )
            success_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            failed_count += 1
            print(f"Failed to send to {recipient_id}: {e}")
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        reply_markup=get_admin_menu_kb()
    )
    await state.clear()

@admin_router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    users_info = await db.get_recent_users(limit=10)
    
    if not users_info:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_menu_kb()
        )
        return
    
    text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    for user_data in users_info:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data.get('user_type') == 'client':
            user_type = "üë®‚Äç‚öïÔ∏è –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä"
        elif user_data.get('user_type') == 'employee':
            user_type = "üî¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        else:
            user_type = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
        role = " üëë" if user_data['role'] == 'admin' else ""
        
        text += f"{user_type}{role} {user_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}\n"
        text += f"üÜî {user_data['telegram_id']}\n"
        
        if user_data.get('client_code'):
            text += f"üè• –ö–æ–¥: {user_data['client_code']}\n"
        
        if user_data.get('specialization'):
            text += f"üìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {user_data['specialization']}\n"
        elif user_data.get('department_function'):
            dept_map = {'laboratory': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', 'sales': '–ü—Ä–æ–¥–∞–∂–∏', 'support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'}
            dept = dept_map.get(user_data['department_function'], user_data['department_function'])
            text += f"üè¢ –§—É–Ω–∫—Ü–∏—è: {dept}\n"
            if user_data.get('region'):
                text += f"üìç –†–µ–≥–∏–æ–Ω: {user_data['region']}\n"
        
        text += f"üåç –°—Ç—Ä–∞–Ω–∞: {user_data.get('country', 'BY')}\n"
        text += f"üìÖ {user_data['registration_date']}\n"
        text += "‚îÄ" * 30 + "\n"
    
    await message.answer(text, reply_markup=get_admin_menu_kb())

@admin_router.message(F.text == "üìã –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def show_all_requests(message: Message):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    recent_feedback = await db.get_recent_feedback(limit=5)
    
    if not recent_feedback:
        await message.answer(
            "–û–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=get_admin_menu_kb()
        )
        return
    
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—Ä–∞—â–µ–Ω–∏–π:\n\n"
    
    for feedback in recent_feedback:
        feedback_type = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" if feedback['feedback_type'] == 'suggestion' else "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞"
        status = {
            'new': 'üÜï –ù–æ–≤–æ–µ',
            'in_progress': '‚è≥ –í —Ä–∞–±–æ—Ç–µ',
            'resolved': '‚úÖ –†–µ—à–µ–Ω–æ'
        }.get(feedback['status'], feedback['status'])
        
        text += f"{feedback_type} | {status}\n"
        text += f"üë§ {feedback.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        text += f"üìù {feedback['message'][:100]}{'...' if len(feedback['message']) > 100 else ''}\n"
        text += f"üìÖ {feedback['timestamp']}\n"
        text += "‚îÄ" * 30 + "\n"
    
    await message.answer(text, reply_markup=get_admin_menu_kb())

@admin_router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π")
async def system_management(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π",
        reply_markup=get_system_management_kb()
    )
    await state.set_state(SystemStates.in_system_menu)

@admin_router.message(SystemStates.in_system_menu)
async def handle_system_management(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_menu_kb())
        return
    
    elif message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î":
        loading_msg = await message.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from src.data_vectorization import DataProcessor
            processor = DataProcessor()
            processor.create_vector_store(reset=True)
            
            await loading_msg.delete()
            await message.answer(
                "‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=get_system_management_kb()
            )
        except Exception as e:
            await loading_msg.delete()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}",
                reply_markup=get_system_management_kb()
            )
    
    elif message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏":
        try:
            cleared_count = await db.clear_old_logs(days=30)
            await message.answer(
                f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)",
                reply_markup=get_system_management_kb()
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {str(e)}",
                reply_markup=get_system_management_kb()
            )
    
    elif message.text == "üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        try:
            import psutil
            import os
            
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            db_size = os.path.getsize(db.db_path) / 1024 / 1024
            
            vector_db_path = "data/chroma_db"
            vector_db_size = 0
            if os.path.exists(vector_db_path):
                for dirpath, dirnames, filenames in os.walk(vector_db_path):
                    for f in filenames:
                        fp = os.path.join(dirpath, f)
                        vector_db_size += os.path.getsize(fp)
                vector_db_size = vector_db_size / 1024 / 1024
            
            system_info = f"""
üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üñ•Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_percent}%
üíæ –ü–∞–º—è—Ç—å: {memory.percent}% ({memory.used // 1024 // 1024} –ú–ë / {memory.total // 1024 // 1024} –ú–ë)
üíø –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024 // 1024 // 1024} –ì–ë / {disk.total // 1024 // 1024 // 1024} –ì–ë)

üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_size:.2f} –ú–ë
üîç –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î: {vector_db_size:.2f} –ú–ë
üìÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {await db.get_uptime()}
            """
            
            await message.answer(
                system_info,
                reply_markup=get_system_management_kb()
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
                reply_markup=get_system_management_kb()
            )
    
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_system_management_kb()
        )