from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import html

from src.database.db_init import db
from bot.keyboards import get_dialog_kb

content_router = Router()

# ============================================================
# –ì–ê–õ–ï–†–ï–Ø –ü–†–û–ë–ò–†–û–ö
# ============================================================

def create_gallery_keyboard(items):
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏"""
    keyboard = []
    
    for item in items:
        keyboard.append([
            InlineKeyboardButton(
                text=item['title'],
                callback_data=f"gallery_item_{item['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_gallery")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@content_router.callback_query(F.data.startswith("gallery_item_"))
async def show_gallery_item(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏"""
    await callback.answer()
    
    try:
        item_id = int(callback.data.split("_")[-1])
        item = await db.get_gallery_item(item_id)
        
        if not item:
            await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        caption = f"üìå <b>{html.escape(item['title'])}</b>"
        if item.get('description'):
            caption += f"\n\nüìù {html.escape(item['description'])}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–∞–ª–µ—Ä–µ–µ", callback_data="back_to_gallery")],
                [InlineKeyboardButton(text="üîô –ó–∞–∫—Ä—ã—Ç—å –≤—Å—ë", callback_data="close_gallery_and_photo")]
            ]
        )
        
        # –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–∞–ª–µ—Ä–µ–∏
        try:
            await callback.message.delete()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer_photo(
            photo=item['file_id'],
            caption=caption,
            parse_mode="HTML",
            reply_markup=back_keyboard
        )
        
    except Exception as e:
        print(f"[ERROR] Failed to show gallery item: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞", show_alert=True)

@content_router.callback_query(F.data == "back_to_gallery")
async def back_to_gallery(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥–∞–ª–µ—Ä–µ–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ"""
    await callback.answer()
    
    items = await db.get_all_gallery_items()
    
    if items:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            # Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ —Ç–µ–∫—Å—Ç, –ø–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–∞–ª–µ—Ä–µ–∏
            await callback.message.answer(
                "üñºÔ∏è <b>–ì–∞–ª–µ—Ä–µ—è –ø—Ä–æ–±–∏—Ä–æ–∫ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —ç–ª–µ–º–µ–Ω—Ç:",
                parse_mode="HTML",
                reply_markup=create_gallery_keyboard(items)
            )
        except Exception as e:
            print(f"[ERROR] Failed to go back to gallery: {e}")

@content_router.callback_query(F.data == "close_gallery")
async def close_gallery(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é"""
    await callback.answer("–ì–∞–ª–µ—Ä–µ—è –∑–∞–∫—Ä—ã—Ç–∞")
    try:
        await callback.message.delete()
    except:
        pass

@content_router.callback_query(F.data == "close_gallery_and_photo")
async def close_gallery_and_photo(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    await callback.answer("–ó–∞–∫—Ä—ã—Ç–æ")
    try:
        await callback.message.delete()
    except:
        pass

# ============================================================
# –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï - –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã
# ============================================================

async def show_gallery_with_preview(message: Message, items: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é —Å –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not items:
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    text = "üñºÔ∏è <b>–ì–∞–ª–µ—Ä–µ—è –ø—Ä–æ–±–∏—Ä–æ–∫ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</b>\n\n"
    
    keyboard = []
    for i, item in enumerate(items, 1):
        text += f"{i}. {html.escape(item['title'])}\n"
        if item.get('description'):
            text += f"   <i>{html.escape(item['description'][:50])}...</i>\n"
        text += "\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard.append([
            InlineKeyboardButton(
                text=f"üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å: {item['title'][:30]}...",
                callback_data=f"view_gallery_{item['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_gallery")
    ])
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@content_router.callback_query(F.data.startswith("view_gallery_"))
async def view_gallery_item_inline(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer()
    
    try:
        item_id = int(callback.data.split("_")[-1])
        item = await db.get_gallery_item(item_id)
        
        if not item:
            await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        close_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ", callback_data=f"close_photo_{item_id}")
            ]]
        )
        
        caption = f"üìå <b>{html.escape(item['title'])}</b>"
        if item.get('description'):
            caption += f"\n\nüìù {html.escape(item['description'])}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=item['file_id'],
            caption=caption,
            parse_mode="HTML",
            reply_markup=close_keyboard
        )
        
    except Exception as e:
        print(f"[ERROR] Failed to view gallery item: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)

@content_router.callback_query(F.data.startswith("close_photo_"))
async def close_photo_only(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –æ—Å—Ç–∞–≤–ª—è—è —Å–ø–∏—Å–æ–∫ –≥–∞–ª–µ—Ä–µ–∏"""
    await callback.answer("–§–æ—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ")
    try:
        await callback.message.delete()
    except:
        pass

# ============================================================
# –°–°–´–õ–ö–ò –ù–ê –ë–õ–ê–ù–ö–ò
# ============================================================

def create_blanks_keyboard(items):
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–ª–∞–Ω–∫–æ–≤"""
    keyboard = []
    
    for item in items:
        # –ö–Ω–æ–ø–∫–∏ —Å URL –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é
        keyboard.append([
            InlineKeyboardButton(
                text=item['title'],
                url=item['url']
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_blanks")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@content_router.callback_query(F.data == "close_blanks")
async def close_blanks(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∞–Ω–∫–æ–≤"""
    await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç")
    try:
        await callback.message.delete()
    except:
        pass
