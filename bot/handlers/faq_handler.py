import pandas as pd
import json
import os
import re
from typing import Dict, List, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from src.database.db_init import db
from bot.keyboards import get_back_to_menu_kb, get_menu_by_role, get_faq_search_kb, get_faq_back_kb

ITEMS_PER_PAGE = 10
EXCEL_FILE_PATH = "data/processed/1_FAQ BOT VET UNION_–¥—Ä–∞—Ñ—Ç.xlsx"
JSON_DATA_FILE = "data/faq_data.json"

faq_router = Router()

class FAQHandler:
    def __init__(self, excel_path: str, json_path: str):
        self.excel_path = excel_path
        self.json_path = json_path
        self.faq_data = []
        self.is_loaded = False
        self.user_sessions = {}
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ FAQ"""
        try:
            self.faq_data = self.load_or_convert_data()
            self.is_loaded = True
            print(f"‚úÖ FAQ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.faq_data)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ: {e}")
            self.faq_data = []
            self.is_loaded = False
    
    def load_or_convert_data(self) -> List[Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑ Excel"""
        if os.path.exists(self.json_path):
            try:
                with open(self.json_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                faq_list = data.get("faq", [])
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(faq_list)} –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ –∏–∑ JSON")
                return faq_list
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON FAQ: {e}")
        
        return self.convert_excel_to_json()
    
    def convert_excel_to_json(self) -> List[Dict[str, str]]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        try:
            if not os.path.exists(self.excel_path):
                print(f"‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.excel_path}")
                return []
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(self.excel_path, sheet_name='FAQ')
            
            faq_list = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for index, row in df.iterrows():
                try:
                    question = str(row['Q']).strip()
                    answer = str(row['A']).strip()
                    
                    if (question and answer and 
                        question not in ['Q', 'Question', '–í–æ–ø—Ä–æ—Å'] and 
                        answer not in ['A', 'Answer', '–û—Ç–≤–µ—Ç']):
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        category_match = re.search(r'–û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: (.+?)(?:\n|$)', answer)
                        category = category_match.group(1) if category_match else "–û–±—â–µ–µ"
                        
                        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
                        clean_answer = re.sub(r'–û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: .+?$', '', answer).strip()
                        
                        faq_list.append({
                            "id": index + 1,
                            "question": question,
                            "answer": clean_answer,
                            "category": category
                        })
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            data_to_save = {"faq": faq_list}
            os.makedirs(os.path.dirname(self.json_path), exist_ok=True)
            with open(self.json_path, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(faq_list)} –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ –∏–∑ Excel")
            return faq_list
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel: {e}")
            return []

    def create_faq_list_keyboard(self, page: int, total_pages: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É FAQ"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, len(self.faq_data))
        
        for i in range(start_idx, end_idx):
            item = self.faq_data[i]
            short_question = item['question'][:50] + "..." if len(item['question']) > 50 else item['question']
            keyboard.append([InlineKeyboardButton(
                text=f"‚ùì {i+1}. {short_question}",
                callback_data=f"faq_item_{i}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"faq_list_{page-1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {page + 1}/{total_pages}", 
            callback_data="faq_info"
        ))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"faq_list_{page+1}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º faq_main_menu
        keyboard.append([InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
            callback_data="faq_search_start"
        )])
        keyboard.append([InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="faq_main_menu"
        )])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    def create_faq_item_keyboard(self, current_index: int, total_items: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        nav_buttons = []
        if current_index > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", 
                callback_data=f"faq_item_{current_index - 1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìñ {current_index + 1}/{total_items}", 
            callback_data="faq_info"
        ))
        
        if current_index < total_items - 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", 
                callback_data=f"faq_item_{current_index + 1}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é - –ò–°–ü–†–ê–í–õ–ï–ù–û
        keyboard.append([InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", 
            callback_data="faq_back_to_list"
        )])
        keyboard.append([InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
            callback_data="faq_search_start"
        )])
        keyboard.append([InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="faq_main_menu"
        )])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    async def show_faq_page(self, message: Message, page: int, edit_message: Message = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º FAQ"""
        if not self.faq_data:
            await message.answer("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return
        
        total_pages = max(1, (len(self.faq_data) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 0 or page >= total_pages:
            page = 0
        
        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, len(self.faq_data))
        
        message_text = "üìö *–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ*\n\n"
        message_text += f"*–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:* {len(self.faq_data)}\n"
        message_text += f"*–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}*\n\n"
        message_text += "*–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–∞:*"
        
        keyboard = self.create_faq_list_keyboard(page, total_pages)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {}
        self.user_sessions[user_id]["page"] = page
        self.user_sessions[user_id]["mode"] = "list"
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if edit_message:
            try:
                await edit_message.edit_text(message_text, parse_mode='Markdown', reply_markup=keyboard)
                return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await message.answer(message_text, parse_mode='Markdown', reply_markup=keyboard)
        self.user_sessions[user_id]["last_message_id"] = sent_message.message_id

    async def show_faq_item(self, callback: CallbackQuery, item_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
        if not self.faq_data or item_index >= len(self.faq_data):
            await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item = self.faq_data[item_index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        user_id = callback.from_user.id
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(db, 'add_faq_history'):
                await db.add_faq_history(
                    user_id=user_id,
                    faq_id=item['id'],
                    question=item['question']
                )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        
        message = f"üìö *–í–æ–ø—Ä–æ—Å #{item_index + 1}*\n\n"
        message += f"‚ùì *–í–æ–ø—Ä–æ—Å:* {item['question']}\n\n"
        message += f"‚úÖ *–û—Ç–≤–µ—Ç:* {item['answer']}\n\n"
        
        if item.get('category'):
            message += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {item['category']}\n\n"
        
        message += f"üî¢ *ID:* {item['id']}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = self.create_faq_item_keyboard(item_index, len(self.faq_data))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        user_id = callback.from_user.id
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {}
        self.user_sessions[user_id]["last_item_message_id"] = callback.message.message_id
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(message, parse_mode='Markdown', reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await callback.message.answer(message, parse_mode='Markdown', reply_markup=keyboard)
            self.user_sessions[user_id]["last_item_message_id"] = sent_message.message_id
        
        await callback.answer()    
    
    async def show_faq_item(self, callback: CallbackQuery, item_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
        if not self.faq_data or item_index >= len(self.faq_data):
            await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item = self.faq_data[item_index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        user_id = callback.from_user.id
        await db.add_faq_history(
            user_id=user_id,
            faq_id=item['id'],
            question=item['question']
        )
        
        message = f"üìö *–í–æ–ø—Ä–æ—Å #{item_index + 1}*\n\n"
        message += f"‚ùì *–í–æ–ø—Ä–æ—Å:* {item['question']}\n\n"
        message += f"‚úÖ *–û—Ç–≤–µ—Ç:* {item['answer']}\n\n"
        
        if item.get('category'):
            message += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {item['category']}\n\n"
        
        message += f"üî¢ *ID:* {item['id']}"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = self.create_faq_item_keyboard(item_index, len(self.faq_data))
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(message, parse_mode='Markdown', reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(message, parse_mode='Markdown', reply_markup=keyboard)
        
        await callback.answer()
    
    async def search_faq(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ FAQ"""
        if not self.faq_data:
            return []
        
        query_lower = query.lower()
        results = []
        
        for item in self.faq_data:
            if (query_lower in item["question"].lower() or 
                query_lower in item["answer"].lower() or 
                query_lower in item.get("category", "").lower()):
                results.append(item)
        
        return results

    def create_search_results_keyboard(self, results: List[Dict], start_index: int = 0) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        keyboard = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        end_index = min(start_index + 5, len(results))
        
        for i in range(start_index, end_index):
            item = results[i]
            short_question = item['question'][:35] + "..." if len(item['question']) > 35 else item['question']
            keyboard.append([InlineKeyboardButton(
                text=f"üîç {i+1}. {short_question}",
                callback_data=f"faq_search_{i}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if start_index > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"faq_search_nav_{max(0, start_index - 5)}"
            ))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_pages = max(1, (len(results) + 4) // 5)
        current_page = (start_index // 5) + 1
        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {current_page}/{total_pages}", 
            callback_data="faq_info"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if end_index < len(results):
            nav_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"faq_search_nav_{end_index}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û
        keyboard.append([InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
            callback_data="faq_search_start"
        )])
        keyboard.append([InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="faq_main_menu"
        )])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def show_search_results(self, message: Message, results: List[Dict], start_index: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        if not results:
            await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        response = f"üîç *–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}*\n\n"
        
        end_index = min(start_index + 5, len(results))
        for i in range(start_index, end_index):
            item = results[i]
            short_question = item['question'][:50] + "..." if len(item['question']) > 50 else item['question']
            response += f"{i+1}. {short_question}\n"
        
        if len(results) > 5:
            total_pages = (len(results) + 4) // 5
            current_page = (start_index // 5) + 1
            response += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"
        
        keyboard = self.create_search_results_keyboard(results, start_index)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–µ—Å—Å–∏–∏
        user_id = message.from_user.id
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {}
        self.user_sessions[user_id]["search_results"] = results
        self.user_sessions[user_id]["search_start_index"] = start_index
        
        await message.answer(response, parse_mode='Markdown', reply_markup=keyboard)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
faq_handler = FAQHandler(EXCEL_FILE_PATH, JSON_DATA_FILE)

@faq_router.message(F.text == "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")
async def handle_new_search_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    faq_handler.user_sessions[user_id] = {"mode": "search"}
    
    await message.answer(
        "üí° –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:",
        reply_markup=get_faq_back_kb()
    )

@faq_router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_menu_legacy(message: Message, state: FSMContext):
    await state.clear()
    user = await db.get_user(message.from_user.id)
    role = user["role"] if "role" in user.keys() else "staff"
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_menu_by_role(role))
    return

@faq_router.message(F.text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ")
async def handle_faq_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if not faq_handler.is_loaded:
        await faq_handler.initialize()
    
    user_id = message.from_user.id
    
    if not faq_handler.faq_data:
        await message.answer("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    faq_handler.user_sessions[user_id] = {"page": 0, "mode": "menu"}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é FAQ
    await message.answer(
        "üìö *–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=get_faq_search_kb()
    )

@faq_router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
async def handle_faq_search_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –≤ FAQ"""
    user_id = message.from_user.id
    faq_handler.user_sessions[user_id] = {"mode": "search"}
    
    await message.answer(
        "üí° –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:",
        reply_markup=get_faq_back_kb()
    )

@faq_router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
async def handle_faq_show_all(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ"""
    user_id = message.from_user.id
    
    if not faq_handler.is_loaded:
        await faq_handler.initialize()
    
    if not faq_handler.faq_data:
        await message.answer("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    faq_handler.user_sessions[user_id] = {"page": 0, "mode": "list"}
    await faq_handler.show_faq_page(message, 0)

@faq_router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ FAQ")
async def handle_faq_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é FAQ"""
    user_id = message.from_user.id
    faq_handler.user_sessions[user_id] = {"mode": "menu"}
    
    await message.answer(
        "üìö *–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=get_faq_search_kb()
    )

@faq_router.callback_query(F.data.startswith("faq_"))
async def handle_faq_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ FAQ"""
    data = callback.data
    user_id = callback.from_user.id
    
    if user_id not in faq_handler.user_sessions:
        faq_handler.user_sessions[user_id] = {"page": 0, "mode": "list"}
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        parts = data.split('_')
        
        # 1. –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É FAQ
        if len(parts) >= 3 and parts[1] == "list" and parts[2].isdigit():
            page = int(parts[2])
            faq_handler.user_sessions[user_id]["page"] = page
            faq_handler.user_sessions[user_id]["mode"] = "list"
            await faq_handler.show_faq_page(callback.message, page, callback.message)
        
        # 2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        elif len(parts) >= 3 and parts[1] == "item" and parts[2].isdigit():
            item_index = int(parts[2])
            faq_handler.user_sessions[user_id]["mode"] = "item"
            await faq_handler.show_faq_item(callback, item_index)
        
        # 3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
        elif len(parts) >= 3 and parts[1] == "search" and parts[2].isdigit():
            item_index = int(parts[2])
            faq_handler.user_sessions[user_id]["mode"] = "item"
            
            if "search_results" in faq_handler.user_sessions[user_id]:
                results = faq_handler.user_sessions[user_id]["search_results"]
                if item_index < len(results):
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
                    search_item = results[item_index]
                    main_index = next((i for i, item in enumerate(faq_handler.faq_data) 
                                    if item['id'] == search_item['id']), -1)
                    if main_index != -1:
                        await faq_handler.show_faq_item(callback, main_index)
        
        # 4. –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∏—Å–∫–∞
        elif len(parts) >= 4 and parts[1] == "search" and parts[2] == "nav" and parts[3].isdigit():
            start_index = int(parts[3])
            if "search_results" in faq_handler.user_sessions[user_id]:
                results = faq_handler.user_sessions[user_id]["search_results"]
                
                response = f"üîç *–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}*\n\n"
                end_index = min(start_index + 5, len(results))
                
                for i in range(start_index, end_index):
                    item = results[i]
                    short_question = item['question'][:50] + "..." if len(item['question']) > 50 else item['question']
                    response += f"{i+1}. {short_question}\n"
                
                if len(results) > 5:
                    total_pages = (len(results) + 4) // 5
                    current_page = (start_index // 5) + 1
                    response += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"
                
                keyboard = faq_handler.create_search_results_keyboard(results, start_index)
                
                try:
                    await callback.message.edit_text(response, parse_mode='Markdown', reply_markup=keyboard)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # 5. –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
        elif data == "faq_search_start":
            faq_handler.user_sessions[user_id]["mode"] = "search"
            try:
                await callback.message.edit_text(
                    "üí° –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:",
                    reply_markup=get_faq_back_kb()
                )
            except:
                await callback.message.answer(
                    "üí° –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:",
                    reply_markup=get_faq_back_kb()
                )
        
        # 6. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
        elif data == "faq_back_to_list":
            current_page = faq_handler.user_sessions[user_id].get("page", 0)
            faq_handler.user_sessions[user_id]["mode"] = "list"
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
            try:
                if "last_item_message_id" in faq_handler.user_sessions[user_id]:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=faq_handler.user_sessions[user_id]["last_item_message_id"]
                    )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            await faq_handler.show_faq_page(callback.message, current_page, callback.message)
        
        # 7. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ò–°–ü–†–ê–í–õ–ï–ù–û
        elif data == "faq_main_menu":
            user = await db.get_user(user_id)
            role = user["role"] if user and "role" in user else "user"
            await callback.message.answer(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_menu_by_role(role)
            )
        
        # 8. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞)
        elif data == "faq_info":
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")   

@faq_router.message(F.text)
async def handle_faq_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ FAQ"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.text.startswith('/') or 
        message.text in ["üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ", "üî¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É",
                        "üîç –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã",
                        "üîô –ù–∞–∑–∞–¥ –∫ FAQ", "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"] or
        message.text.startswith("‚ùå")):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ FAQ
    user_id = message.from_user.id
    if (user_id not in faq_handler.user_sessions or 
        faq_handler.user_sessions[user_id].get("mode") != "search"):
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if not faq_handler.is_loaded:
        await faq_handler.initialize()
    
    if not faq_handler.faq_data:
        await message.answer("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π FAQ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return
    
    results = await faq_handler.search_faq(query)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏—é
    faq_handler.user_sessions[user_id]["search_results"] = results
    
    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        return
    
    await faq_handler.show_search_results(message, results)