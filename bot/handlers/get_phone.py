from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database
from keyboards.reply import get_cancel_kb, get_main_menu_kb, get_phone_kb
from utils.email_sender import send_callback_email
from config import DATABASE_PATH
import re

get_phone_router = Router()
db = Database(DATABASE_PATH)

class CallbackStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_message = State()

@get_phone_router.message(F.text == "üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫")
async def request_callback(message: Message, state: FSMContext):
    user_exists = await db.user_exists(message.from_user.id)
    
    if not user_exists:
        await message.answer(
            "–î–ª—è –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=get_main_menu_kb()
        )
        return
    
    await message.answer(
        "üìû –ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.\n"
        "–§–æ—Ä–º–∞—Ç: +7 (XXX) XXX-XX-XX",
        reply_markup=get_phone_kb()
    )
    await state.set_state(CallbackStates.waiting_for_phone)

@get_phone_router.message(CallbackStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = ""
    
    # if shared contact
    if message.contact:
        phone = message.contact.phone_number
        if not phone.startswith('+'):
            phone = '+' + phone
    # if message
    else:
        phone = message.text
        phone_digits = re.sub(r'[^\d+]', '', phone)
        
        if not re.match(r'^\+?[78]?\d{10}$', phone_digits):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "+7 (XXX) XXX-XX-XX –∏–ª–∏ 8XXXXXXXXXX",
                reply_markup=get_phone_kb()
            )
            return
        
        if phone_digits.startswith('8'):
            phone_digits = '+7' + phone_digits[1:]
        elif phone_digits.startswith('7'):
            phone_digits = '+' + phone_digits
        elif not phone_digits.startswith('+'):
            phone_digits = '+7' + phone_digits
            
        phone = phone_digits
    
    await state.update_data(phone=phone)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(CallbackStates.waiting_for_message)

@get_phone_router.message(CallbackStates.waiting_for_message)
async def process_message(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get('phone')
    
    user = await db.get_user(message.from_user.id)
    user_data = {
        'telegram_id': user['telegram_id'],
        'username': user['username'],
        'client_code': user['client_code'],
        'pet_name': user['pet_name'],
        'pet_type': user['pet_type']
    }
    
    email_sent = await send_callback_email(user_data, phone, message.text)
    
    if email_sent:
        response = (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
            "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    else:
        response = (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
            "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
            "–Ω–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
        )
    
    await db.add_request_stat(
        message.from_user.id,
        "callback_request",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:100]}..."
    )
    
    await message.answer(response, reply_markup=get_main_menu_kb())
    await state.clear()
