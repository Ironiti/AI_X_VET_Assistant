"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import html
from datetime import datetime, timedelta

from src.database.db_init import db
from bot.keyboards import get_admin_menu_kb

metrics_router = Router()


class MetricsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    viewing_metrics = State()
    selecting_period = State()


def get_metrics_main_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ç—Ä–∏–∫"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = [
        [KeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏")],
        [KeyboardButton(text="‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏")],
        [KeyboardButton(text="üéØ –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")],
        [KeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_period_selection_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = [
        [KeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="üìÖ –ó–∞ 7 –¥–Ω–µ–π"), KeyboardButton(text="üìÖ –ó–∞ 30 –¥–Ω–µ–π")],
        [KeyboardButton(text="üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@metrics_router.message(F.text == "üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
async def metrics_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ—Ç—Ä–∏–∫"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user or user['role'] != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer(
        "üìä <b>–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_metrics_main_kb()
    )
    await state.set_state(MetricsStates.viewing_metrics)


@metrics_router.message(MetricsStates.viewing_metrics, F.text == "üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
async def show_client_metrics(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
    loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        await db.update_daily_metrics()
        
        # –ü–æ–ª—É—á–∞–µ–º DAU –∑–∞ 30 –¥–Ω–µ–π
        dau_data = await db.get_dau_metrics(days=30)
        
        # –ü–æ–ª—É—á–∞–µ–º retention
        retention = await db.get_retention_metrics()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
        sessions = await db.get_session_metrics(days=7)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üë• <b>–ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò</b>\n\n"
        
        # DAU
        response += "üìà <b>Daily Active Users (DAU)</b>\n"
        if dau_data and len(dau_data) > 0:
            today_dau = dau_data[0].get('dau', 0) if dau_data else 0
            
            week_data = dau_data[:7]
            week_dau = sum(day.get('dau', 0) for day in week_data) / len(week_data) if week_data else 0
            
            month_dau = sum(day.get('dau', 0) for day in dau_data) / len(dau_data) if dau_data else 0
            
            response += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: <b>{today_dau}</b> —á–µ–ª.\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: <b>{week_dau:.1f}</b> —á–µ–ª.\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π: <b>{month_dau:.1f}</b> —á–µ–ª.\n\n"
        else:
            response += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)\n\n"
        
        # –í–æ–∑–≤—Ä–∞—Ç–Ω–æ—Å—Ç—å
        response += "üîÑ <b>–í–æ–∑–≤—Ä–∞—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
        if retention and retention.get('today_users', 0) > 0:
            response += f"‚Ä¢ –ó–∞ 1 –¥–µ–Ω—å: <b>{retention.get('retention_1d', 0):.1f}%</b> ({retention.get('returned_1d', 0)} —á–µ–ª.)\n"
            response += f"‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: <b>{retention.get('retention_7d', 0):.1f}%</b> ({retention.get('returned_7d', 0)} —á–µ–ª.)\n"
            response += f"‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: <b>{retention.get('retention_30d', 0):.1f}%</b> ({retention.get('returned_30d', 0)} —á–µ–ª.)\n\n"
        else:
            response += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n\n"
        
        # –°–µ—Å—Å–∏–∏
        response += "‚è± <b>–ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π (–∑–∞ 7 –¥–Ω–µ–π)</b>\n"
        if sessions and sessions.get('total_sessions', 0) > 0:
            avg_dur = sessions.get('avg_duration_minutes')
            avg_req = sessions.get('avg_requests_per_session')
            
            response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: <b>{sessions.get('total_sessions', 0)}</b>\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{avg_dur if avg_dur else 0:.1f}</b> –º–∏–Ω.\n"
            response += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Å—Å–∏—é: <b>{avg_req if avg_req else 0:.1f}</b>\n"
            response += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{sessions.get('unique_users', 0)}</b>\n"
        else:
            response += "‚Ä¢ –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (—Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n"
        
        await loading_msg.delete()
        await message.answer(response, parse_mode="HTML", reply_markup=get_metrics_main_kb())
        
    except Exception as e:
        await loading_msg.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫: {str(e)}",
            reply_markup=get_metrics_main_kb()
        )


@metrics_router.message(MetricsStates.viewing_metrics, F.text == "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
async def show_technical_metrics(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
    loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        await db.update_system_metrics()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_metrics = await db.get_metrics_summary(days=7)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = await db._get_latest_system_metrics()
        
        response = "‚öôÔ∏è <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò</b>\n\n"
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if perf_metrics and perf_metrics.get('overall'):
            overall = perf_metrics['overall']
            response += "üöÄ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∑–∞ 7 –¥–Ω–µ–π)</b>\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{overall.get('total_requests', 0)}</b>\n"
            response += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: <b>{overall.get('successful_requests', 0)}</b>\n"
            response += f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: <b>{overall.get('failed_requests', 0)}</b>\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>{overall.get('avg_response_time', 0):.2f}</b> —Å–µ–∫.\n"
            response += f"‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>{overall.get('max_response_time', 0):.2f}</b> —Å–µ–∫.\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π DAU: <b>{overall.get('avg_daily_users', 0):.1f}</b> —á–µ–ª.\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        response += "üíª <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (—Å–µ–≥–æ–¥–Ω—è)</b>\n"
        if system_metrics:
            latest = system_metrics[0]
            response += f"‚Ä¢ CPU: <b>{latest.get('cpu_usage', 0):.1f}%</b>\n"
            response += f"‚Ä¢ –ü–∞–º—è—Ç—å: <b>{latest.get('memory_usage', 0):.1f}%</b>\n"
            response += f"‚Ä¢ –î–∏—Å–∫: <b>{latest.get('disk_usage', 0):.1f}%</b>\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: <b>{latest.get('active_sessions', 0)}</b>\n"
            response += f"‚Ä¢ –û—à–∏–±–æ–∫ –∑–∞ –¥–µ–Ω—å: <b>{latest.get('error_count', 0)}</b>\n\n"
        else:
            response += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        # –ù–∞–≥—Ä—É–∑–∫–∞ vs DAU
        if perf_metrics and perf_metrics.get('overall'):
            overall = perf_metrics['overall']
            dau = overall.get('avg_daily_users', 1)
            avg_time = overall.get('avg_response_time', 0)
            
            response += "üìä <b>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏</b>\n"
            response += f"‚Ä¢ –í—Ä–µ–º—è/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{avg_time / max(dau, 1):.3f}</b> —Å–µ–∫.\n"
            
            # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if avg_time < 2.0:
                status = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
            elif avg_time < 5.0:
                status = "‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–æ"
            else:
                status = "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            
            response += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
        
        await loading_msg.delete()
        await message.answer(response, parse_mode="HTML", reply_markup=get_metrics_main_kb())
        
    except Exception as e:
        await loading_msg.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫: {str(e)}",
            reply_markup=get_metrics_main_kb()
        )


@metrics_router.message(MetricsStates.viewing_metrics, F.text == "üéØ –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
async def show_quality_metrics(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        await db.update_quality_metrics()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality = await db.get_quality_metrics_summary(days=7)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        detailed = await db.get_metrics_summary(days=7)
        
        response = "üéØ <b>–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê (–∑–∞ 7 –¥–Ω–µ–π)</b>\n\n"
        
        if quality:
            total = quality.get('total', 0)
            correct = quality.get('correct', 0)
            
            response += "üìä <b>–û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{total}</b>\n"
            response += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: <b>{correct}</b> ({quality.get('correct_percentage', 0):.1f}%)\n"
            response += f"‚Ä¢ –û—à–∏–±–∫–∏: <b>{quality.get('incorrect', 0)}</b> ({quality.get('incorrect_percentage', 0):.1f}%)\n"
            response += f"‚Ä¢ –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞: <b>{quality.get('no_answer', 0)}</b> ({quality.get('no_answer_percentage', 0):.1f}%)\n\n"
            
            # –¶–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
            target = 70.0
            actual = quality.get('correct_percentage', 0)
            
            if actual >= target:
                status = f"‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ({actual:.1f}% ‚â• {target}%)"
            else:
                diff = target - actual
                status = f"‚ö†Ô∏è –î–æ —Ü–µ–ª–∏: {diff:.1f}% (—Ç–µ–∫—É—â–∏–π: {actual:.1f}%)"
            
            response += f"üéØ <b>–¶–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:</b> {status}\n\n"
            
            # –¢–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            response += "üìã <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n"
            response += f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É: <b>{quality.get('code_searches', 0)}</b>\n"
            response += f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: <b>{quality.get('name_searches', 0)}</b>\n"
            response += f"‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: <b>{quality.get('general_questions', 0)}</b>\n\n"
        else:
            response += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if detailed and detailed.get('top_users'):
            response += "üëë <b>–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
            for i, user in enumerate(detailed['top_users'][:5], 1):
                name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                count = user.get('request_count', 0)
                success_rate = (user.get('successful', 0) / count * 100) if count > 0 else 0
                
                response += f"{i}. {html.escape(name)}: <b>{count}</b> –∑–∞–ø—Ä–æ—Å–æ–≤ ({success_rate:.0f}% —É—Å–ø–µ—Ö)\n"
        
        await loading_msg.delete()
        await message.answer(response, parse_mode="HTML", reply_markup=get_metrics_main_kb())
        
    except Exception as e:
        await loading_msg.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫: {str(e)}",
            reply_markup=get_metrics_main_kb()
        )


@metrics_router.message(MetricsStates.viewing_metrics, F.text == "üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
async def show_comprehensive_metrics(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    loading_msg = await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    try:
        days = 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        await db.update_daily_metrics()
        await db.update_quality_metrics()
        await db.update_system_metrics()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = await db.get_comprehensive_metrics(days=days)
        
        if not metrics:
            await loading_msg.delete()
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                reply_markup=get_metrics_main_kb()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = await db.get_average_user_rating(days=days)
        
        # ==================== –°–í–û–î–ö–ê –ú–ï–¢–†–ò–ö ====================
        response = f"üìä <b>–°–í–û–î–ö–ê –ú–ï–¢–†–ò–ö –ó–ê {days} –î–ù–ï–ô</b>\n"
        response += f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # ==================== –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò ====================
        response += "üë• <b>–ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò</b>\n\n"
        
        client = metrics.get('client_metrics', {})
        dau_list = client.get('dau', [])
        retention = client.get('retention', {})
        sessions = client.get('sessions', {})
        
        # –°—Ä–µ–¥–Ω–∏–π DAU
        if dau_list and len(dau_list) > 0:
            avg_dau = sum(d.get('dau', 0) for d in dau_list) / len(dau_list)
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π DAU: <b>{avg_dau:.1f}</b>\n"
        else:
            response += "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π DAU: <b>–Ω/–¥</b>\n"
        
        # Retention
        if retention and retention.get('today_users', 0) > 0:
            response += f"‚Ä¢ Retention 1 –¥–µ–Ω—å: <b>{retention.get('retention_1d', 0):.1f}%</b>\n"
            response += f"‚Ä¢ Retention 7 –¥–Ω–µ–π: <b>{retention.get('retention_7d', 0):.1f}%</b>\n"
            response += f"‚Ä¢ Retention 30 –¥–Ω–µ–π: <b>{retention.get('retention_30d', 0):.1f}%</b>\n"
        else:
            response += "‚Ä¢ Retention 1 –¥–µ–Ω—å: <b>–Ω/–¥</b>\n"
            response += "‚Ä¢ Retention 7 –¥–Ω–µ–π: <b>–Ω/–¥</b>\n"
            response += "‚Ä¢ Retention 30 –¥–Ω–µ–π: <b>–Ω/–¥</b>\n"
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        if sessions and sessions.get('total_sessions', 0) > 0:
            avg_dur = sessions.get('avg_duration_minutes', 0)
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: <b>{avg_dur:.2f}</b> –º–∏–Ω\n\n"
        else:
            response += "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: <b>–Ω/–¥</b>\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º
        tech = metrics.get('technical_metrics', {})
        perf = tech.get('response_time', {})
        overall = perf.get('overall', {}) if perf else {}
        
        total_requests = overall.get('total_requests', 0)
        successful_requests = overall.get('successful_requests', 0)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ —Å—Ä–µ–¥–Ω–µ–µ
        response += "<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n"
        
        # –ó–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–ø–æ–ª—É—á–∞–µ–º –∏–∑ –º–µ—Ç—Ä–∏–∫)
        if dau_list:
            # 1 –¥–µ–Ω—å
            today_req = dau_list[0].get('total_requests', 0) if dau_list else 0
            response += f"  ‚Ä¢ 1 –¥–µ–Ω—å: <b>{today_req}</b>\n"
            
            # 7 –¥–Ω–µ–π
            week_req = sum(d.get('total_requests', 0) for d in dau_list[:7])
            response += f"  ‚Ä¢ 7 –¥–Ω–µ–π: <b>{week_req}</b>\n"
            
            # 30 –¥–Ω–µ–π
            month_req = sum(d.get('total_requests', 0) for d in dau_list)
            response += f"  ‚Ä¢ {days} –¥–Ω–µ–π: <b>{month_req}</b>\n\n"
        else:
            response += f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{total_requests}</b>\n\n"
        
        response += "<b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n"
        if dau_list:
            today_dau = dau_list[0].get('dau', 1) if dau_list else 1
            week_dau = sum(d.get('dau', 0) for d in dau_list[:7]) / min(7, len(dau_list[:7]))
            month_dau = avg_dau if dau_list else 1
            
            response += f"  ‚Ä¢ 1 –¥–µ–Ω—å: <b>{today_req / max(today_dau, 1):.1f}</b>\n"
            response += f"  ‚Ä¢ 7 –¥–Ω–µ–π: <b>{week_req / max(week_dau, 1) / 7:.1f}</b>\n"
            response += f"  ‚Ä¢ {days} –¥–Ω–µ–π: <b>{month_req / max(month_dau, 1) / days:.1f}</b>\n\n"
        else:
            response += "  ‚Ä¢ –Ω/–¥\n\n"
        
        # –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É—Å–ø–µ—à–Ω—ã—Ö
        response += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{total_requests}</b>\n"
        response += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{successful_requests}</b>\n"
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
        accuracy = (successful_requests / total_requests * 100) if total_requests > 0 else 0
        response += f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏: <b>{accuracy:.1f}%</b>\n"
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_rating:.2f}/5</b> ‚≠ê\n\n"
        
        # ==================== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò ====================
        response += "‚öôÔ∏è <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò</b>\n\n"
        
        if overall:
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>{overall.get('avg_response_time', 0):.2f}</b> —Å–µ–∫\n"
            response += f"‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>{overall.get('max_response_time', 0):.2f}</b> —Å–µ–∫\n\n"
        else:
            response += "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>–Ω/–¥</b>\n"
            response += "‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <b>–Ω/–¥</b>\n\n"
        
        # ==================== –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê ====================
        response += "üéØ <b>–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê</b>\n\n"
        
        quality = metrics.get('quality_metrics', {})
        if quality:
            total = quality.get('total', 0)
            correct = quality.get('correct', 0)
            incorrect = quality.get('incorrect', 0)
            no_answer = quality.get('no_answer', 0)
            
            response += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{total}</b>\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{correct}</b>\n"
            response += f"‚Ä¢ –û—à–∏–±–æ–∫: <b>{incorrect}</b>\n"
            response += f"‚Ä¢ –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞: <b>{no_answer}</b>\n\n"
            
            response += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{total}</b>\n"
            response += f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{quality.get('correct_percentage', 0):.1f}%</b>\n"
            response += f"‚Ä¢ –û—à–∏–±–æ–∫: <b>{quality.get('incorrect_percentage', 0):.1f}%</b>\n"
            response += f"‚Ä¢ –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞: <b>{quality.get('no_answer_percentage', 0):.1f}%</b>\n"
        else:
            response += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        await loading_msg.delete()
        await message.answer(response, parse_mode="HTML", reply_markup=get_metrics_main_kb())
        
    except Exception as e:
        await loading_msg.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫: {str(e)}",
            reply_markup=get_metrics_main_kb()
        )


@metrics_router.message(MetricsStates.viewing_metrics, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_metrics(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_menu_kb()
    )