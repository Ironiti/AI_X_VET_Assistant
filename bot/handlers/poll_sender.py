from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, 
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from src.database.db_init import db

poll_callback_router = Router()

class PollAnsweringStates(StatesGroup):
    answering_text = State()
    answering_multiple = State()

def create_poll_keyboard(poll_id, question_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞"""
    keyboard = [
        [InlineKeyboardButton(
            text="üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å",
            callback_data=f"start_poll:{poll_id}:{question_index}"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_question_keyboard(poll_id, question_id, question_type, options, question_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard = []
    
    if question_type == 'single' and options:
        # –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
        for option in options:
            keyboard.append([InlineKeyboardButton(
                text=f"‚óØ {option}",
                callback_data=f"answer_single:{poll_id}:{question_id}:{question_index}:{option[:20]}"
            )])
    
    elif question_type == 'multiple' and options:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞
        for option in options:
            keyboard.append([InlineKeyboardButton(
                text=f"‚òê {option}",
                callback_data=f"toggle_multi:{poll_id}:{question_id}:{option[:20]}"
            )])
        keyboard.append([InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data=f"confirm_multi:{poll_id}:{question_id}:{question_index}"
        )])
    
    elif question_type == 'rating':
        # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10 –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        row1 = []
        row2 = []
        for i in range(1, 6):
            row1.append(InlineKeyboardButton(
                text=str(i),
                callback_data=f"answer_rating:{poll_id}:{question_id}:{question_index}:{i}"
            ))
        for i in range(6, 11):
            row2.append(InlineKeyboardButton(
                text=str(i),
                callback_data=f"answer_rating:{poll_id}:{question_id}:{question_index}:{i}"
            ))
        keyboard.append(row1)
        keyboard.append(row2)
    
    elif question_type == 'text':
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        keyboard.append([InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç",
            callback_data=f"answer_text:{poll_id}:{question_id}:{question_index}"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def send_poll_to_user(bot, user_id, poll_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å
    already_answered = await db.check_user_poll_participation(user_id, poll_id)
    if already_answered:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
    poll_info = await db.get_poll_info(poll_id)
    if not poll_info:
        return False
    
    questions = await db.get_poll_questions(poll_id)
    
    text = (
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "     üìä <b>–ù–û–í–´–ô –û–ü–†–û–°</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>{poll_info['title']}</b>\n"
    )
    
    if poll_info.get('description'):
        text += f"\nüìù <i>{poll_info['description']}</i>\n"
    
    text += f"\nüìã –í–æ–ø—Ä–æ—Å–æ–≤: <b>{len(questions)}</b>\n"
    text += f"‚è± –í—Ä–µ–º—è: <b>~{len(questions) * 30} —Å–µ–∫.</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ üëá"
    
    await bot.send_message(
        user_id,
        text,
        parse_mode="HTML",
        reply_markup=create_poll_keyboard(poll_id, 0)
    )
    return True

@poll_callback_router.callback_query(F.data.startswith("start_poll:"))
async def start_poll_handler(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    poll_id = int(data_parts[1])
    question_index = int(data_parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
    questions = await db.get_poll_questions(poll_id)
    
    if not questions:
        await callback.message.edit_text("‚ùå –í –æ–ø—Ä–æ—Å–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        poll_id=poll_id,
        questions=questions,
        current_index=0,
        answers=[],
        selected_options=[]
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_poll_question(callback.message, state, callback.from_user.id)
    await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!")

async def show_poll_question(message, state: FSMContext, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    questions = data['questions']
    current_index = data.get('current_index', 0)
    
    if current_index >= len(questions):
        # –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω
        await finish_poll(message, state, user_id)
        return
    
    question = questions[current_index]
    poll_id = data['poll_id']
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress = "‚ñà" * (current_index + 1) + "‚ñë" * (len(questions) - current_index - 1)
    
    text = (
        f"<b>–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(questions)}</b>\n"
        f"[{progress}]\n\n"
        f"‚ùì <b>{question['text']}</b>\n"
    )
    
    if question['type'] == 'text':
        text += "\nüí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</i>"
    elif question['type'] == 'multiple':
        text += "\n‚òëÔ∏è <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>"
    elif question['type'] == 'rating':
        text += "\nüìä <i>–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 (–º–∏–Ω–∏–º—É–º) –¥–æ 10 (–º–∞–∫—Å–∏–º—É–º)</i>"
    elif question['type'] == 'single':
        text += "\nüìå <i>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞</i>"
    
    keyboard = create_question_keyboard(
        poll_id,
        question['id'],
        question['type'],
        question.get('options'),
        current_index
    )
    
    await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

@poll_callback_router.callback_query(F.data.startswith("answer_single:"))
async def handle_single_answer(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    poll_id = int(data_parts[1])
    question_id = int(data_parts[2])
    question_index = int(data_parts[3])
    answer = data_parts[4] if len(data_parts) > 4 else ""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    questions = data['questions']
    current_question = questions[question_index]
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    full_answer = None
    for option in current_question.get('options', []):
        if option.startswith(answer):
            full_answer = option
            break
    
    if not full_answer:
        full_answer = answer
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await db.save_poll_response(poll_id, question_id, callback.from_user.id, full_answer)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    answers = data.get('answers', [])
    answers.append(full_answer)
    await state.update_data(
        current_index=question_index + 1,
        answers=answers
    )
    
    await show_poll_question(callback.message, state, callback.from_user.id)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {full_answer}")

@poll_callback_router.callback_query(F.data.startswith("answer_rating:"))
async def handle_rating_answer(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    poll_id = int(data_parts[1])
    question_id = int(data_parts[2])
    question_index = int(data_parts[3])
    rating = data_parts[4]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await db.save_poll_response(poll_id, question_id, callback.from_user.id, rating)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    data = await state.get_data()
    answers = data.get('answers', [])
    answers.append(f"–û—Ü–µ–Ω–∫–∞: {rating}/10")
    await state.update_data(
        current_index=question_index + 1,
        answers=answers
    )
    
    await show_poll_question(callback.message, state, callback.from_user.id)
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if int(rating) <= 3:
        emoji = "üòî"
    elif int(rating) <= 6:
        emoji = "üòê"
    elif int(rating) <= 8:
        emoji = "üòä"
    else:
        emoji = "ü§©"
    
    await callback.answer(f"{emoji} –û—Ü–µ–Ω–∫–∞ {rating}/10 –∑–∞–ø–∏—Å–∞–Ω–∞!")

@poll_callback_router.callback_query(F.data.startswith("answer_text:"))
async def handle_text_answer_start(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    poll_id = int(data_parts[1])
    question_id = int(data_parts[2])
    question_index = int(data_parts[3])
    
    await state.update_data(
        text_question_id=question_id,
        text_question_index=question_index
    )
    
    await callback.message.edit_text(
        "üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ üëá",
        parse_mode="HTML"
    )
    await state.set_state(PollAnsweringStates.answering_text)
    await callback.answer()

@poll_callback_router.message(PollAnsweringStates.answering_text)
async def handle_text_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    poll_id = data['poll_id']
    question_id = data['text_question_id']
    question_index = data['text_question_index']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await db.save_poll_response(poll_id, question_id, message.from_user.id, message.text)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    try:
        await message.delete()
    except:
        pass
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    answers = data.get('answers', [])
    answers.append(message.text)
    await state.update_data(
        current_index=question_index + 1,
        answers=answers
    )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    poll_info = await db.get_poll_info(poll_id)
    new_message = await message.answer(
        f"‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å..."
    )
    
    await show_poll_question(new_message, state, message.from_user.id)
    await state.set_state(None)

@poll_callback_router.callback_query(F.data.startswith("toggle_multi:"))
async def handle_multi_toggle(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split(":")
    poll_id = int(data_parts[1])
    question_id = int(data_parts[2])
    option = data_parts[3] if len(data_parts) > 3 else ""
    
    data = await state.get_data()
    selected = data.get('selected_options', [])
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏
    questions = data['questions']
    current_index = data['current_index']
    current_question = questions[current_index]
    
    full_option = None
    for opt in current_question.get('options', []):
        if opt.startswith(option):
            full_option = opt
            break
    
    if not full_option:
        full_option = option
    
    if full_option in selected:
        selected.remove(full_option)
        await callback.answer(f"‚ùå –°–Ω—è—Ç –≤—ã–±–æ—Ä: {full_option}")
    else:
        selected.append(full_option)
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {full_option}")
    
    await state.update_data(selected_options=selected)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    keyboard = []
    for opt in current_question.get('options', []):
        icon = "‚òë" if opt in selected else "‚òê"
        keyboard.append([InlineKeyboardButton(
            text=f"{icon} {opt}",
            callback_data=f"toggle_multi:{poll_id}:{question_id}:{opt[:20]}"
        )])
    
    keyboard.append([InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä" if selected else "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç",
        callback_data=f"confirm_multi:{poll_id}:{question_id}:{current_index}"
    )])
    
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@poll_callback_router.callback_query(F.data.startswith("confirm_multi:"))
async def handle_multi_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('selected_options', [])
    
    if not selected:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç!", show_alert=True)
        return
    
    data_parts = callback.data.split(":")
    poll_id = int(data_parts[1])
    question_id = int(data_parts[2])
    question_index = int(data_parts[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer = ", ".join(selected)
    await db.save_poll_response(poll_id, question_id, callback.from_user.id, answer)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    answers = data.get('answers', [])
    answers.append(answer)
    await state.update_data(
        current_index=question_index + 1,
        answers=answers,
        selected_options=[]
    )
    
    await show_poll_question(callback.message, state, callback.from_user.id)
    await callback.answer(f"‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")

async def finish_poll(message, state: FSMContext, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    poll_id = data['poll_id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
    poll_info = await db.get_poll_info(poll_id)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    finish_text = (
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "    üéâ <b>–û–ü–†–û–° –ó–ê–í–ï–†–®–ï–ù!</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, –∞ –º—ã –ø–æ–±–µ–∂–∞–ª–∏ –¥–µ–ª–∞—Ç—å –±–æ—Ç –µ—â–µ –ª—É—á—à–µ üí´\n\n"     
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
    thank_you_media = poll_info.get('thank_you_media') or poll_info.get('thank_you_video')
    media_type = poll_info.get('thank_you_media_type', 'video')
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    try:
        await message.delete()
    except:
        pass
    
    from bot.handlers import bot
    
    if thank_you_media:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        try:
            if media_type == 'video':
                await bot.send_video(
                    user_id, 
                    video=thank_you_media,
                    caption=finish_text,
                    parse_mode="HTML"
                )
            elif media_type == 'animation':
                await bot.send_animation(
                    user_id,
                    animation=thank_you_media,
                    caption=finish_text,
                    parse_mode="HTML"
                )
            elif media_type == 'document_gif':
                await bot.send_document(
                    user_id,
                    document=thank_you_media,
                    caption=finish_text,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"Failed to send thank you media: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(user_id, finish_text, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(user_id, finish_text, parse_mode="HTML")
    
    await state.clear()
