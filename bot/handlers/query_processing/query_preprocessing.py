import re
from typing import Dict, List
from pathlib import Path
import logging
import pandas as pd
import pymorphy3

from bot.handlers.query_processing.table_processors.vet_abbreviations import VetAbbreviationsProcessor
from bot.handlers.query_processing.table_processors.diseases import DiseasesProcessor 
from bot.handlers.query_processing.table_processors.pcr_abbreviations import PCRProcessor

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class UnifiedAbbreviationExpander:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    
    def __init__(self, excel_file: str = 'data/processed/data_with_abbreviations_new.xlsx'):
        self.morph = pymorphy3.MorphAnalyzer()
        self.excel_file = excel_file
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        self.vet_processor = VetAbbreviationsProcessor(self.morph)
        self.diseases_processor = DiseasesProcessor(self.morph)
        self.pcr_processor = PCRProcessor(self.morph)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.vet_dicts = {}
        self.disease_dicts = {}
        self.pcr_dicts = {}
        
        self._load_all_dictionaries()
        
        # –ö—ç—à
        self.processed_queries = {}
        self.MAX_CACHE_SIZE = 5000
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _load_all_dictionaries(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            file_path = Path(self.excel_file)
            if not file_path.exists():
                logger.warning(f"Excel file not found: {self.excel_file}")
                return

            with pd.ExcelFile(self.excel_file, engine='openpyxl') as xls:
                # üîÑ –ö–ê–ñ–î–ê–Ø –¢–ê–ë–õ–ò–¶–ê –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø –°–í–û–ò–ú –ü–†–û–¶–ï–°–°–û–†–û–ú
                
                if '–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏–∏' in xls.sheet_names:
                    logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä")
                    df_vet = pd.read_excel(xls, sheet_name='–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏–∏')
                    self.vet_dicts = self.vet_processor.process_table(df_vet)
                
                if '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –±–æ–ª–µ–∑–Ω–µ–π' in xls.sheet_names:
                    logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É –±–æ–ª–µ–∑–Ω–µ–π")
                    df_dis = pd.read_excel(xls, sheet_name='–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –±–æ–ª–µ–∑–Ω–µ–π')
                    self.disease_dicts = self.diseases_processor.process_table(df_dis)
                
                if '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –ü–¶–†' in xls.sheet_names:
                    logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É –ü–¶–†-—Å–æ–∫—Ä–∞—â–µ–Ω–∏–π")
                    df_pcr = pd.read_excel(xls, sheet_name='–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –ü–¶–†')
                    self.pcr_dicts = self.pcr_processor.process_table(df_pcr)
                    
            total_entries = (
                len(self.vet_dicts.get('vet_abbr', {})) + len(self.vet_dicts.get('vet_full', {})) +
                len(self.disease_dicts.get('disease_abbr', {})) + len(self.disease_dicts.get('disease_full', {})) +
                len(self.pcr_dicts.get('pcr_abbr', {})) + len(self.pcr_dicts.get('pcr_full', {}))
            )
            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π: {e}")
    
    def _normalize_text(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç"""
        return ' '.join(text.split())
    
    def expand_query(self, query: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ - –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        if not query:
            return query
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if query in self.processed_queries:
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return self.processed_queries[query]
        
        logger.info(f"üì• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{query}'")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        query = self._normalize_text(query)
        result = query
        
        # üîÑ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ò–ô –û–¢ –ö–ê–ñ–î–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê
        
        # 1. –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
        if self.vet_dicts:
            result = self.vet_processor.expand_query(result, self.vet_dicts)
        
        # 2. –ë–æ–ª–µ–∑–Ω–∏
        if self.disease_dicts:
            result = self.diseases_processor.expand_query(result, self.disease_dicts)
        
        # 3. –ü–¶–†-—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        if self.pcr_dicts:
            result = self.pcr_processor.expand_query(result, self.pcr_dicts)
        
        if result != query:
            logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: '{result}'")
        else:
            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: '{result}'")
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        if len(self.processed_queries) > self.MAX_CACHE_SIZE:
            self.processed_queries.clear()
        self.processed_queries[query] = result
        
        return result


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
abbreviation_expander = UnifiedAbbreviationExpander()

def expand_query_with_abbreviations(query: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return abbreviation_expander.expand_query(query)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    test_queries = [
        "–∞–Ω–∞–ª–∏–∑ –Ω–∞ alt –∏ –∞—Å—Ç —É —Å–æ–±–∞–∫–∏",
        "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ fiv –∏ felv", 
        "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–∞–ª –∂–∏–¥–∫–æ—Å—Ç–∏",
        "—Å–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç —É –∫–æ—à–µ–∫",
        "–ø—Ü—Ä –Ω–∞ –∫–æ–∫—Ü–∏–¥–∏–æ–∑",
        "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —Å —Ä–µ—Ç–∏–∫—É–ª–æ—Ü–∏—Ç–∞–º–∏"
    ]
    
    for query in test_queries:
        print(f"–í—Ö–æ–¥: {query}")
        result = expand_query_with_abbreviations(query)
        print(f"–í—ã—Ö–æ–¥: {result}")
        print("-" * 50)