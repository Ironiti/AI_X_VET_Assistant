from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import get_menu_by_role, get_dialog_kb, get_back_to_menu_kb, get_search_type_kb
from langchain.schema import SystemMessage, HumanMessage, Document
import pytz
import asyncio
import html
import re
from typing import Optional, Dict

from datetime import datetime
from src.database.db_init import db
from src.data_vectorization import DataProcessor
from models.models_init import qwen3_32b_instruct as llm

# LOADING_GIF_ID = "CgACAgIAAxkBAAMIaGr_qy1Wxaw2VrBrm3dwOAkYji4AAu54AAKmqHlJAtZWBziZvaA2BA"
LOADING_GIF_ID = "CgACAgIAAxkBAAIBFGiBcXtGY7OZvr3-L1dZIBRNqSztAALueAACpqh5Scn4VmIRb4UjNgQ"
questions_router = Router()

class QuestionStates(StatesGroup):
    waiting_for_search_type = State()
    waiting_for_code = State()
    waiting_for_name = State()
    in_dialog = State()

# –°–ª–æ–≤–∞—Ä—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
TEST_ABBREVIATIONS = {
    "–û–ê–ö": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –≥–µ–º–∫–∞ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è",
    "–ë–•": "–±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏–æ—Ö–∏–º–∏—è –∫—Ä–æ–≤–∏",
    "–û–ê–ú": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏",
    "–°–û–≠": "—Å–∫–æ—Ä–æ—Å—Ç—å –æ—Å–µ–¥–∞–Ω–∏—è —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–æ–≤",
    "–ê–õ–¢": "–∞–ª–∞–Ω–∏–Ω–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞",
    "–ê–°–¢": "–∞—Å–ø–∞—Ä—Ç–∞—Ç–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞",
    "–¢–¢–ì": "—Ç–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π –≥–æ—Ä–º–æ–Ω",
    "–¢4": "—Ç–∏—Ä–æ–∫—Å–∏–Ω",
    "–ü–¶–†": "–ø–æ–ª–∏–º–µ—Ä–∞–∑–Ω–∞—è —Ü–µ–ø–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è",
    "–ò–§–ê": "–∏–º–º—É–Ω–æ—Ñ–µ—Ä–º–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
    "–ì–ï–ú–ö–ê": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –æ–∞–∫ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è",
    "–ì–ï–ú–ê–¢–û–õ–û–ì–ò–Ø": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –æ–∞–∫ –≥–µ–º–∫–∞",
    "–ì–ï–ú–ê–¢–ö–ê": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –æ–∞–∫ –≥–µ–º–∫–∞ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è",
}

def normalize_test_code(text: str) -> str:
    """Normalize test code by converting similar cyrillic chars to latin and uppercase."""
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ—Ö–æ–∂–∏—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –±—É–∫–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    cyrillic_to_latin = {
        '–ê': 'A', '–∞': 'A',
        '–í': 'B', '–≤': 'B', 
        '–°': 'C', '—Å': 'C',
        '–ï': 'E', '–µ': 'E',
        '–ù': 'N', '–Ω': 'N',  
        '–ö': 'K', '–∫': 'K',
        '–ú': 'M', '–º': 'M',
        '–û': 'O', '–æ': 'O',
        '–†': 'P', '—Ä': 'P',
        '–¢': 'T', '—Ç': 'T',
        '–•': 'X', '—Ö': 'X',
        '–£': 'Y', '—É': 'Y'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    result = ''
    for char in text:
        if char in cyrillic_to_latin:
            result += cyrillic_to_latin[char]
        else:
            result += char.upper()
    
    # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[DEBUG] normalize_test_code: '{text}' -> '{result}'")
    
    return result

def expand_query_with_abbreviations(query: str) -> str:
    """Expand query with known test abbreviations."""
    query_upper = query.upper()
    for abbr, expansion in TEST_ABBREVIATIONS.items():
        if abbr in query_upper:
            return f"{query} {expansion}"
    return query

def safe_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    return html.escape(text)

def get_time_based_farewell(user_name: str = None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    tz = pytz.timezone('Europe/Minsk')
    current_hour = datetime.now(tz).hour
    
    name_part = f", {user_name}" if user_name and user_name != '–¥—Ä—É–≥' else ""
    
    if 4 <= current_hour < 12:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ —É—Ç—Ä–∞ ‚òÄÔ∏è"
    elif 12 <= current_hour < 17:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ü§ù"
    elif 17 <= current_hour < 22:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞ üåÜ"
    else:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –î–æ–±—Ä–æ–π –Ω–æ—á–∏ üåô"
    
def get_user_first_name(user):
    if not user:
        return '–¥—Ä—É–≥'
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å dict –∏ aiosqlite.Row
    name = user['name'] if 'name' in user.keys() else None
    if not name:
        return '–¥—Ä—É–≥'
    full_name = name.strip()
    name_parts = full_name.split()
    if len(name_parts) >= 2 and ('user_type' in user.keys() and user['user_type'] == 'employee'):
        return name_parts[1]  # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –§–∞–º–∏–ª–∏—è –ò–º—è
    return name_parts[0]  # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã—Ö –∏–º–µ–Ω

def format_test_data(metadata: Dict) -> Dict:
    """Extract and format test metadata into standardized dictionary."""
    return {
        'test_code': metadata['test_code'],
        'test_name': metadata['test_name'],
        'container_type': metadata['container_type'],
        'preanalytics': metadata['preanalytics'],
        'storage_temp': metadata['storage_temp'],
        'department': metadata['department']
    }

def format_test_info(test_data: Dict) -> str:
    """Format test information from metadata using HTML tags."""
    return (
        f"<b>–¢–µ—Å—Ç: {test_data['test_code']} - {test_data['test_name']}</b>\n\n"
        f"<b>–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:</b> {test_data['container_type']}\n"
        f"<b>–ü—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b> {test_data['preanalytics']}\n"
        f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {test_data['storage_temp']}\n"
        f"<b>–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b> {test_data['department']}\n\n"
    )

async def animate_loading(loading_msg: Message):  # –ò–∑–º–µ–Ω–∏—Ç—å message –Ω–∞ loading_msg
    """Animate loading message (edit text, not caption)."""
    animations = [
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ VetUnion...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
    ]
    i = 0
    try:
        while True:
            await asyncio.sleep(2)
            i = (i + 1) % len(animations)
            await loading_msg.edit_text(animations[i])  # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    except (asyncio.CancelledError, Exception):
        pass

async def select_best_match(query: str, docs: list[tuple[Document, float]]) -> list[Document]:
    """Select best matching tests using LLM from multiple options."""
    if len(docs) == 1:
        return [docs[0][0]]
    
    options = "\n".join([
        f"{i}. {doc.metadata['test_name']} ({doc.metadata['test_code']}) - score: {score:.2f}"
        for i, (doc, score) in enumerate(docs, 1)
    ])
    
    prompt = f"""
    Select relevant tests for: "{query}"
    Return ONLY numbers of matching options (1-{len(docs)}) separated by commas.
    
    Options:
    {options}
    """
    
    try:
        response = await llm.agenerate([[SystemMessage(content=prompt)]])
        selected = response.generations[0][0].text.strip()
        
        if not selected:
            return [docs[0][0]]  # Fallback to top result
            
        selected_indices = []
        for num in selected.split(','):
            num = num.strip()
            if num.isdigit() and 1 <= int(num) <= len(docs):
                selected_indices.append(int(num) - 1)
                
        if not selected_indices:
            return [docs[0][0]]
            
        return [docs[i][0] for i in selected_indices]
    except Exception:
        return [docs[0][0]]  # Fallback on error

@questions_router.message(F.text == "üî¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
async def start_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    user_name = get_user_first_name(user)  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    role = user['role'] if 'role' in user else 'staff'
    
    prompt = f"""–ü—Ä–∏–≤–µ—Ç, {user_name} üëã
    
üî¨ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ:
    - –≤—Å–µ–º—É –ø–µ—Ä–µ—á–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
    - –ø—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    - —Ç–∏–ø–∞–º –ø—Ä–æ–±–∏—Ä–æ–∫/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    - —É—Å–ª–æ–≤–∏—è–º —Ö—Ä–∞–Ω–µ–Ω–∏—è/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–±"""

    await db.clear_buffer(user_id)
    await message.answer(prompt, reply_markup=get_search_type_kb())
    await state.set_state(QuestionStates.waiting_for_search_type)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@questions_router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    user = await db.get_user(message.from_user.id)
    role = user['role'] if 'role' in user.keys() else 'staff'
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_menu_by_role(role))
    return

@questions_router.message(QuestionStates.waiting_for_search_type)
async def handle_search_type(message: Message, state: FSMContext):
    """Handle search type selection."""
    text = message.text.strip()
    user_id = message.from_user.id
    
    if text == "üî¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Ç–µ—Å—Ç–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AN5):", reply_markup=get_back_to_menu_kb())
        await state.set_state(QuestionStates.waiting_for_code)
    elif text == "üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:", reply_markup=get_back_to_menu_kb())
        await state.set_state(QuestionStates.waiting_for_name)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

@questions_router.message(QuestionStates.waiting_for_code)
async def handle_code_search(message: Message, state: FSMContext):
    """Handle test code search."""
    user_id = message.from_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ upper()
    text = normalize_test_code(message.text.strip())

    try:
        if LOADING_GIF_ID:
            gif_msg = await message.answer_animation(LOADING_GIF_ID, caption="")
            loading_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
            animation_task = asyncio.create_task(animate_loading(loading_msg))
        else:
            gif_msg = None
            loading_msg = await message.answer("üîç –ò—â–µ–º —Ç–µ—Å—Ç...")
            animation_task = None
        
        processor = DataProcessor()
        processor.load_vector_store()
        results = processor.search_test(filter_dict={"test_code": text})
            
            # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        if not results:
            raise ValueError("Test not found")
            
        doc = results[0][0]
        test_data = {
            'test_code': doc.metadata['test_code'],
            'test_name': doc.metadata['test_name'],
            'container_type': doc.metadata['container_type'],
            'preanalytics': doc.metadata['preanalytics'],
            'storage_temp': doc.metadata['storage_temp'],
            'department': doc.metadata['department']
        }
        
        if animation_task:
            animation_task.cancel()
        await loading_msg.delete()
        if gif_msg:
            await gif_msg.delete()
        
        await message.answer(format_test_info(test_data), reply_markup=get_dialog_kb(), parse_mode="HTML")
        await state.set_state(QuestionStates.in_dialog)
        await state.update_data(current_test=test_data)
        
    except ValueError:
        if 'animation_task' in locals() and animation_task:
            animation_task.cancel()
        if 'loading_msg' in locals():
            await loading_msg.delete()
        if 'gif_msg' in locals() and gif_msg:
            await gif_msg.delete()
        await message.answer("‚ùå –¢–µ—Å—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_search_type_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)
    except Exception as e:
        print(f"[ERROR] Code search failed: {e}")
        if 'animation_task' in locals() and animation_task:
            animation_task.cancel()
        if 'loading_msg' in locals():
            await loading_msg.delete()
        if 'gif_msg' in locals() and gif_msg:
            await gif_msg.delete()
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=get_search_type_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)

@questions_router.message(QuestionStates.waiting_for_name)
async def handle_name_search(message: Message, state: FSMContext):
    """Handle test name search using RAG."""
    user_id = message.from_user.id
    text = message.text.strip()

    try:
        if LOADING_GIF_ID:
            gif_msg = await message.answer_animation(LOADING_GIF_ID, caption="")
            loading_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
            animation_task = asyncio.create_task(animate_loading(loading_msg))
        else:
            gif_msg = None
            loading_msg = await message.answer("üîç –ò—â–µ–º —Ç–µ—Å—Ç...")
            animation_task = None
        
        expanded_query = expand_query_with_abbreviations(text)
        processor = DataProcessor()
        processor.load_vector_store()
        
        try:
            rag_hits = processor.search_test(expanded_query, top_k=5)
            
            if not rag_hits:
                raise ValueError("No tests found")
                
            selected_docs = await select_best_match(text, rag_hits)
            
            if animation_task:
                animation_task.cancel()
            await loading_msg.delete()
            if gif_msg:
                await gif_msg.delete()
            
            if len(selected_docs) > 1:
                # Show multiple results
                response = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:\n\n"
                for doc in selected_docs:
                    test_data = format_test_data(doc.metadata)
                    response += format_test_info(test_data) + "\n"
                
                await message.answer(response, parse_mode="HTML")
            else:
                # Single result
                test_data = format_test_data(selected_docs[0].metadata)
                await message.answer(
                    format_test_info(test_data),
                    reply_markup=get_dialog_kb(),
                    parse_mode="HTML"
                )
            
            await state.set_state(QuestionStates.in_dialog)
            await state.update_data(current_test=test_data)
            
        except Exception as e:
            print(f"[ERROR] Vector search failed: {e}")
            raise ValueError("Search service unavailable")
            
    except ValueError as e:
        if 'animation_task' in locals() and animation_task:
            animation_task.cancel()
        if 'loading_msg' in locals():
            await loading_msg.delete()
        if 'gif_msg' in locals() and gif_msg:
            await gif_msg.delete()
        await message.answer(f"‚ùå {str(e)}", reply_markup=get_search_type_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)
    except Exception:
        if 'animation_task' in locals() and animation_task:
            animation_task.cancel()
        if 'loading_msg' in locals():
            await loading_msg.delete()
        if 'gif_msg' in locals() and gif_msg:
            await gif_msg.delete()
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=get_search_type_kb()
        )
        await state.set_state(QuestionStates.waiting_for_search_type)

@questions_router.message(QuestionStates.in_dialog)
async def handle_dialog(message: Message, state: FSMContext):
    """Handle follow-up questions using LLM."""
    text = message.text.strip()
    user_id = message.from_user.id
    if text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        user = await db.get_user(user_id)
        role = user['role'] if 'role' in user.keys() else 'staff'
        user_name = get_user_first_name(user)
        farewell = get_time_based_farewell(user_name)
        await message.answer(farewell, reply_markup=get_menu_by_role(role))
        return
    if text == "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_type_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)
        return
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    data = await state.get_data()
    test_data = data['current_test'] if 'current_test' in data else None
    if not test_data:
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω. –ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", reply_markup=get_search_type_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)
        return
    gif_msg = await message.answer_animation(LOADING_GIF_ID, caption="")
    loading_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    animation_task = asyncio.create_task(animate_loading(loading_msg))
    try:
        system_msg = SystemMessage(content=f"""
            You're assisting with questions about lab test:
            Code: {test_data['test_code']}
            Name: {test_data['test_name']}
            Container: {test_data['container_type']}
            Preanalytics: {test_data['preanalytics']}
            
            Answer concisely in Russian using only this information.
        """)
        response = await llm.agenerate([[system_msg, HumanMessage(content=text)]])
        answer = response.generations[0][0].text.strip()
        await loading_msg.edit_text(answer, reply_markup=get_dialog_kb())
    except Exception:
        await loading_msg.edit_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=get_dialog_kb())
    finally:
        animation_task.cancel()
        await gif_msg.delete()
