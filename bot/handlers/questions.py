from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import get_menu_by_role, get_dialog_kb, get_back_to_menu_kb
from datetime import datetime
from src.database.db_init import db
from src.data_vectorization import DataProcessor
from models.models_init import qwen3_32b_instruct as llm
from langchain.schema import SystemMessage, HumanMessage
import pytz
import asyncio
import json
import re
import base64
import html

# GIF file_id –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
LOADING_GIF_ID = "CgACAgIAAxkBAAMIaGr_qy1Wxaw2VrBrm3dwOAkYji4AAu54AAKmqHlJAtZWBziZvaA2BA"

questions_router = Router()

class QuestionStates(StatesGroup):
    waiting_for_question = State()
    in_dialog = State()
    
def get_time_based_farewell():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    tz = pytz.timezone('Europe/Minsk')
    current_hour = datetime.now(tz).hour
    
    if 4 <= current_hour < 12:
        return "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å –∏ —Ö–æ—Ä–æ—à–µ–≥–æ —É—Ç—Ä–∞ ‚òÄÔ∏è"
    elif 12 <= current_hour < 17:
        return "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ü§ù"
    elif 17 <= current_hour < 22:
        return "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞ üåÜ"
    else:
        return "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å –∏ –¥–æ–±—Ä–æ–π –Ω–æ—á–∏ üåô"
    
def get_user_first_name(user):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    if not user or not user['name']:
        return '–¥—Ä—É–≥'
    
    full_name = user['name'].strip()
    name_parts = full_name.split()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é
    try:
        user_type = user['user_type']
    except (KeyError, TypeError):
        user_type = ''
    
    if user_type == 'employee' and len(name_parts) >= 2:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –§–∞–º–∏–ª–∏—è –ò–º—è -> –±–µ—Ä–µ–º –∏–º—è
        return name_parts[1]
    elif user_type == 'client' or len(name_parts) == 1:
        # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
        return name_parts[0]
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        return name_parts[0]

@questions_router.message(F.text == "üî¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
async def start_question(message: Message, state: FSMContext):
    """Begin question flow and reset ephemeral memory buffer."""
    user_id = message.from_user.id
    print(f"[INFO] User {user_id} initiated question flow")

    user = await db.get_user(user_id)
    if not user:
        print(f"[WARN] User {user_id} not registered")
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return

    role = user['role'] if user else 'staff'
    user_name = get_user_first_name(user)
    
    print(f"[INFO] Resolved role for user {user_id}: {role}, name: {user_name}")

    await db.clear_buffer(user_id)

    prompt = f"""–ü—Ä–∏–≤–µ—Ç, {user_name} üëã
    
    üî¨ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ:
    - –≤—Å–µ–º—É –ø–µ—Ä–µ—á–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ—Ñ–∏–ª–µ–π (–∫–æ–º–ø–ª–µ–∫—Å–æ–≤)
    - –ø—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ω–∞—à–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    - —Ç–∏–ø–∞–º –ø—Ä–æ–±–∏—Ä–æ–∫/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ 
    - —É—Å–ª–æ–≤–∏—è–º —Ö—Ä–∞–Ω–µ–Ω–∏—è/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–±"""

    await message.answer(prompt, reply_markup=get_back_to_menu_kb())
    await state.set_state(QuestionStates.waiting_for_question)
    print(f"[INFO] State set to waiting_for_question for user {user_id}")

@questions_router.message(QuestionStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    """Handle user question: update memory, fetch RAG context, ask LLM, update memory."""
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        user = await db.get_user(user_id)
        role = user['role'] if 'role' in user else 'staff'
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_menu_by_role(role))
        print(f"[INFO] User {user_id} cancelled question")
        return

    user = await db.get_user(user_id)
    role = user['role'] if 'role' in user else 'staff'
    print(f"[INFO] User {user_id} submitted question: {text} (role={role})")

    # Store the original question in the state for follow-ups
    await state.update_data(original_question=text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer_animation(
        animation=LOADING_GIF_ID,
        caption="ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    animation_task = asyncio.create_task(animate_loading(loading_msg))
    
    try:
        # Process the question with RAG
        answer = await process_user_question(user_id, text, role, is_new_question=True)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        animation_task.cancel()
        try:
            await loading_msg.delete()
        except:
            pass
        
        await message.answer(answer, reply_markup=get_dialog_kb())
        await state.set_state(QuestionStates.in_dialog)
        print(f"[INFO] State set to in_dialog for user {user_id}")
        
    except Exception as e:
        print(f"[ERROR] Error processing question for user {user_id}: {e}")
        animation_task.cancel()
        try:
            await loading_msg.delete()
        except:
            pass
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_menu_by_role(role)
        )
        await state.clear()

# @questions_router.message(
#     QuestionStates.in_dialog, 
#     F.text.regexp(r'(?i)(—Ñ–æ—Ç–æ|–ø–æ–∫–∞–∂–∏|–¥–∞–π).*(–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä|–ø—Ä–æ–±–∏—Ä–∫|—Ç–µ—Å—Ç|–∞–Ω–∞–ª–∏–∑)'),
#     flags={"priority": 10}
# )
# async def send_container_image(message: Message, state: FSMContext):
#     """Send container image when specifically requested."""
#     user_id = message.from_user.id
#     processor = DataProcessor()
#     processor.load_vector_store()
    
#     # Get last question from state
#     data = await state.get_data()
#     question = data.get('original_question', '')
    
#     # Search for relevant test
#     hits = processor.search_test(question, top_k=1)
#     if not hits:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.")
#         return
    
#     doc = hits[0][0]  # Get the document from search results
    
#     if 'container_image_base64' not in doc.metadata:
#         await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞.")
#         return
    
#     try:
#         image_data = doc.metadata['container_image_base64']
#         if ';base64,' in image_data:
#             image_data = image_data.split(';base64,')[-1]
        
#         image_bytes = base64.b64decode(image_data)
#         await message.answer_photo(
#             BufferedInputFile(image_bytes, "container.jpg"),
#             caption=f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞: {doc.page_content}"
#         )
#     except Exception as e:
#         await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

@questions_router.message(QuestionStates.in_dialog)
async def handle_dialog(message: Message, state: FSMContext):
    """Handle follow-up questions in dialog mode."""
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        user = await db.get_user(user_id)
        role = user['role'] if 'role' in user else 'staff'
        farewell_text = get_time_based_farewell()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—â–∞–Ω–∏—è
        await message.answer(farewell_text, reply_markup=get_menu_by_role(role))
        print(f"[INFO] User {user_id} ended dialog")
        return
    
    if text == "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        await db.clear_buffer(user_id)
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:", reply_markup=get_back_to_menu_kb())
        await state.set_state(QuestionStates.waiting_for_question)
        print(f"[INFO] User {user_id} started new question")
        return

    # Get the original question from the state
    data = await state.get_data()
    original_question = data.get('original_question', '')

    user = await db.get_user(user_id)
    role = user['role'] if 'role' in user else 'staff'
    print(f"[INFO] User {user_id} asked follow-up: {text} (role={role})")

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è follow-up –≤–æ–ø—Ä–æ—Å–æ–≤
    loading_msg = await message.answer_animation(
        animation=LOADING_GIF_ID,
        caption="ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."
    )
    
    animation_task = asyncio.create_task(animate_loading(loading_msg))
    
    try:
        # Process follow-up without RAG (reuse original question context)
        answer = await process_user_question(user_id, text, role, is_new_question=False)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        animation_task.cancel()
        try:
            await loading_msg.delete()
        except:
            pass
        
        await message.answer(answer, reply_markup=get_dialog_kb())
        print(f"[INFO] Follow-up answer sent to user {user_id}")
        
    except Exception as e:
        print(f"[ERROR] Error processing follow-up for user {user_id}: {e}")
        animation_task.cancel()
        try:
            await loading_msg.delete()
        except:
            pass
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_dialog_kb()
        )
    
async def animate_loading(message: Message):
    """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ GIF"""
    animations = [
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...",
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
    ]
    
    i = 0
    try:
        while True:
            await asyncio.sleep(2)
            i = (i + 1) % len(animations)
            await message.edit_caption(caption=animations[i])  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å edit_text –Ω–∞ edit_caption
    except asyncio.CancelledError:
        pass
    except Exception:
        pass

async def process_user_question(user_id: int, text: str, role: str, is_new_question: bool) -> str:
    """Process user question and return AI response."""
    await db.add_request_stat(user_id, "question", text[:200])
    await db.add_memory(user_id, 'buffer', f"User: {text}")

    summary = await db.get_latest_summary(user_id) or ""
    buffer = await db.get_buffer(user_id)

    rag_context = ""
    rag_hits = []  # Initialize empty list for follow-ups
    
    if is_new_question:
        processor = DataProcessor()
        processor.load_vector_store()
        rag_hits = processor.search_test(text, top_k=10)

        rag_blocks = []
        for doc, score in rag_hits:
            clean_meta = {k: v for k, v in doc.metadata.items() if k != 'container_image_base64'}
            meta_json = json.dumps(clean_meta, ensure_ascii=False, sort_keys=True)
            rag_blocks.append(f"–¢–µ—Å—Ç: {doc.page_content}\n–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {meta_json}")
        rag_context = "\n\n---\n\n".join(rag_blocks)

    memory_section = ""
    if summary:
        memory_section += f"–°–≤–æ–¥–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {summary}\n\n"
    if buffer:
        memory_section += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(buffer) + "\n\n"

    system_msg = SystemMessage(
        content="""–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ VetUnion, –ø–æ–º–æ–≥–∞—é—â–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:

1. –¢–û–ß–ù–û–°–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–ò:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∫–æ–¥—ã —Ç–µ—Å—Ç–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ—Ç - —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ

2. –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í:
- –ù–ï –≤—ã–≤–æ–¥–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–¥—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
- –£–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –æ–±—ä–µ–º, —É—Å–ª–æ–≤–∏—è –≤–∑—è—Ç–∏—è
- –ü—Ä–∏ –Ω–µ—Ç–æ—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å, –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã

3. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï:
- –†–∞–∑–ª–∏—á–∞–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –≤–æ–ø—Ä–æ—Å—ã –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
- –ù–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥–∞–ª—å–Ω–µ–π—à—É—é –ø–æ–º–æ—â—å
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞

4. –ü–†–ò –û–¢–°–£–¢–°–¢–í–ò–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò:
–ò—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω:
"–ù–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–æ—á–Ω–∏—Ç–µ:
- –í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
- –°–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ —Ü–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–∏–æ—Ö–∏–º–∏—è, –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –∏ —Ç.–¥.)"

5. –ó–ê–ü–†–ï–©–ï–ù–û:
- –í—ã–¥—É–º—ã–≤–∞—Ç—å –∫–æ–¥—ã —Ç–µ—Å—Ç–æ–≤
- –°—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML/Markdown —Ä–∞–∑–º–µ—Ç–∫—É - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç."""
    )

    user_msg = HumanMessage(
        content=(
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–æ–≤:\n{rag_context}\n\n"
            f"–ó–∞–ø—Ä–æ—Å: {text}\n\n"
            "–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n"
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–∫–∞–Ω–∏—á–Ω—ã–º –∏ —á–µ–ª–æ–≤–µ—á–Ω—ã–º\n"
            "–ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –∫–æ–¥—ã —Ç–µ—Å—Ç–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
            "–ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–¥—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.\n\n"
            "–†–ê–°–ü–û–ó–ù–ê–í–ê–ô –°–û–ö–†–ê–©–ï–ù–ò–Ø:\n"
            "- –û–ê–ö = –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è\n"
            "- –û–ê–ú = –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏, –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏\n"
            "- –ë–• = –±–∏–æ—Ö–∏–º–∏—è, –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
            "- –ü–¶–† = –ø–æ–ª–∏–º–µ—Ä–∞–∑–Ω–∞—è —Ü–µ–ø–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è\n"
            "- –ò–§–ê = –∏–º–º—É–Ω–æ—Ñ–µ—Ä–º–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "- –£–ó–ò = —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
            "–ò—â–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–∫ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é, —Ç–∞–∫ –∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é.\n\n"
            "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å—É - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
            "- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n"
            "- –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –æ–±—ä–µ–º\n"
            "- –£—Å–ª–æ–≤–∏—è –≤–∑—è—Ç–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n"
            "- –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ù–ï–¢:\n"
            "1. –ß–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è\n"
            "2. –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã —Ç–µ—Å—Ç–æ–≤\n"
            "3. –ü–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å:\n"
            "   - –í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ\n"
            "   - –°–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ —Ü–µ–ª—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n"
            "   - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–∏–æ—Ö–∏–º–∏—è, –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–µ–∫—Ü–∏–∏)\n\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –¥–∞–ª—å–Ω–µ–π—à—É—é –ø–æ–º–æ—â—å."
        )
    )

    print(f"[INFO] Sending prompt to LLM for user {user_id}")
    response = await llm.agenerate([[system_msg, user_msg]])

    def format_telegram_response(text: str) -> str:
        """Clean response text without any formatting."""
        # Remove all formatting artifacts
        text = re.sub(r'[`*_]', '', text)  # Remove markdown
        text = re.sub(r'<[^>]+>', '', text)  # Remove HTML tags
        text = re.sub(r'·é•|·é•·¥Ñ', '', text)  # Remove temp markers
        return text.strip()

    answer = response.generations[0][0].text.strip()
    print(f"[INFO] Received LLM answer for user {user_id}")
    answer = format_telegram_response(answer)  # Convert Markdown to HTML
    print(f"[INFO] Converted Markdown to HTML for user {user_id}")
    await db.add_memory(user_id, 'buffer', f"Bot: {answer}")
    print(f"[INFO] Bot response buffered for user {user_id}")

    return answer
