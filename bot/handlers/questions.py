from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import get_menu_by_role, get_dialog_kb, get_back_to_menu_kb, get_search_type_kb
from langchain.schema import SystemMessage, HumanMessage, Document
import pytz
import asyncio
import html
import re
from typing import Optional, Dict, List, Tuple
from fuzzywuzzy import fuzz, process
from datetime import datetime
from src.database.db_init import db
from src.data_vectorization import DataProcessor
from models.models_init import qwen3_32b_instruct as llm

# LOADING_GIF_ID = "CgACAgIAAxkBAAMIaGr_qy1Wxaw2VrBrm3dwOAkYji4AAu54AAKmqHlJAtZWBziZvaA2BA"
LOADING_GIF_ID = "CgACAgIAAxkBAAIBFGiBcXtGY7OZvr3-L1dZIBRNqSztAALueAACpqh5Scn4VmIRb4UjNgQ"
questions_router = Router()

class TestCallback:
    @staticmethod
    def pack(action: str, test_code: str) -> str:
        return f"{action}:{test_code}"
    
    @staticmethod
    def unpack(callback_data: str) -> Tuple[str, str]:
        parts = callback_data.split(":", 1)
        return parts[0] if len(parts) > 0 else "", parts[1] if len(parts) > 1 else ""

class QuestionStates(StatesGroup):
    waiting_for_search_type = State()
    waiting_for_code = State()
    waiting_for_name = State()
    in_dialog = State()
    processing = State()
    clarifying_search = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
class SearchContext:
    def __init__(self):
        self.original_query = ""
        self.search_attempts = []
        self.candidate_tests = []
        self.clarification_step = 0
        self.filters = {}

# –°–ª–æ–≤–∞—Ä—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
TEST_ABBREVIATIONS = {
    "–û–ê–ö": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –≥–µ–º–∫–∞ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è",
    "–ë–•": "–±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏–æ—Ö–∏–º–∏—è –∫—Ä–æ–≤–∏",
    "–û–ê–ú": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏",
    "–°–û–≠": "—Å–∫–æ—Ä–æ—Å—Ç—å –æ—Å–µ–¥–∞–Ω–∏—è —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–æ–≤",
    "–ê–õ–¢": "–∞–ª–∞–Ω–∏–Ω–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞",
    "–ê–°–¢": "–∞—Å–ø–∞—Ä—Ç–∞—Ç–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞",
    "–¢–¢–ì": "—Ç–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π –≥–æ—Ä–º–æ–Ω",
    "–¢4": "—Ç–∏—Ä–æ–∫—Å–∏–Ω",
    "–ü–¶–†": "–ø–æ–ª–∏–º–µ—Ä–∞–∑–Ω–∞—è —Ü–µ–ø–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è",
    "–ò–§–ê": "–∏–º–º—É–Ω–æ—Ñ–µ—Ä–º–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
    "–ì–ï–ú–ö–ê": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –æ–∞–∫ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è",
    "–ì–ï–ú–ê–¢–û–õ–û–ì–ò–Ø": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –æ–∞–∫ –≥–µ–º–∫–∞",
    "–ì–ï–ú–ê–¢–ö–ê": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –æ–∞–∫ –≥–µ–º–∫–∞ –≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è",
}

def is_test_code_pattern(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞."""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.strip().upper().replace(' ', '')
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    patterns = [
        r'^[A–ê][N–ù]\d+',  # AN –∏–ª–∏ –ê–ù + —Ü–∏—Ñ—Ä—ã
        r'^[A–ê][N–ù]\d+[A-Z–ê-–Ø\-]+',  # AN + —Ü–∏—Ñ—Ä—ã + —Å—É—Ñ—Ñ–∏–∫—Å
        r'^\d{1,4}$',  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–¥–æ 4 –∑–Ω–∞–∫–æ–≤)
        r'^\d+[A-Z–ê-–Ø\-]+$',  # –¶–∏—Ñ—Ä—ã + –±—É–∫–≤–µ–Ω–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
    ]
    
    for pattern in patterns:
        if re.match(pattern, text):
            return True
            
    return False

def normalize_test_code(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–∞."""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    text = text.strip().upper().replace(' ', '')
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã - –¥–æ–±–∞–≤–ª—è–µ–º AN
    if text.isdigit():
        text = f"AN{text}"
    
    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä - –¥–æ–±–∞–≤–ª—è–µ–º AN –≤ –Ω–∞—á–∞–ª–æ
    elif re.match(r'^\d', text):
        text = f"AN{text}"
    
    return text

def calculate_fuzzy_score(query: str, test_code: str, test_name: str = "") -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç fuzzy score –¥–ª—è —Ç–µ—Å—Ç–∞."""
    query = query.upper()
    test_code = test_code.upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if query == test_code:
        return 100.0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
    query_digits = ''.join(c for c in query if c.isdigit())
    code_digits = ''.join(c for c in test_code if c.isdigit())
    
    # –ë–∞–∑–æ–≤—ã–π fuzzy score –¥–ª—è –∫–æ–¥–∞
    code_score = fuzz.ratio(query, test_code)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
    digit_bonus = 0
    if query_digits and code_digits and query_digits == code_digits:
        digit_bonus = 20
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    prefix_bonus = 0
    if len(query) >= 3 and len(test_code) >= 3:
        if test_code.startswith(query[:3]):
            prefix_bonus = 15
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –µ–≥–æ
    name_score = 0
    if test_name:
        name_score = fuzz.partial_ratio(query.lower(), test_name.lower()) * 0.3
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score
    total_score = min(100, code_score + digit_bonus + prefix_bonus + name_score)
    
    return total_score

async def fuzzy_test_search(processor: DataProcessor, query: str, threshold: float = 50) -> List[Tuple[Document, float]]:
    """Fuzzy –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ—Å—Ç–æ–≤."""
    query = query.upper()
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    all_tests = processor.search_test(query="", top_k=2000)
    
    fuzzy_results = []
    seen_codes = set()
    
    for doc, _ in all_tests:
        test_code = doc.metadata.get('test_code', '')
        test_name = doc.metadata.get('test_name', '')
        
        if test_code in seen_codes:
            continue
            
        # –í—ã—á–∏—Å–ª—è–µ–º fuzzy score
        score = calculate_fuzzy_score(query, test_code, test_name)
        
        if score >= threshold:
            fuzzy_results.append((doc, score))
            seen_codes.add(test_code)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
    fuzzy_results.sort(key=lambda x: x[1], reverse=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    return fuzzy_results[:30]

def create_similar_tests_keyboard(similar_tests: List[Tuple[Document, float]], current_test_code: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏."""
    keyboard = []
    row = []
    
    count = 0
    for doc, score in similar_tests:
        test_code = doc.metadata.get('test_code', '')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç
        if current_test_code and test_code == current_test_code:
            continue
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Å –∫–æ–¥–æ–º
        button = InlineKeyboardButton(
            text=test_code,
            callback_data=TestCallback.pack("show_test", test_code)
        )
        
        row.append(button)
        count += 1
        
        # –ü–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        if len(row) >= 4:
            keyboard.append(row)
            row = []
        
        # –ú–∞–∫—Å–∏–º—É–º 20 –∫–Ω–æ–ø–æ–∫ (5 —Ä—è–¥–æ–≤ –ø–æ 4)
        if count >= 20:
            break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_keyboard")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@questions_router.callback_query(F.data == "close_keyboard")
async def handle_close_keyboard(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)

def format_similar_tests_text(similar_tests: List[Tuple[Document, float]], max_display: int = 5) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ—Å—Ç–∞—Ö."""
    if not similar_tests:
        return ""
    
    text = "\n<b>üìã –ü–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã:</b>\n"
    for doc, score in similar_tests[:max_display]:
        test_code = doc.metadata.get('test_code', '')
        test_name = doc.metadata.get('test_name', '')
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(test_name) > 50:
            test_name = test_name[:47] + "..."
        text += f"‚Ä¢ <code>{test_code}</code> - {test_name}\n"
    
    if len(similar_tests) > max_display:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã {max_display} –∏–∑ {len(similar_tests)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö</i>"
    
    return text

def generate_test_code_variants(text: str) -> list[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞."""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
    text = normalize_test_code(text)
    variants = [text]  # –û—Ä–∏–≥–∏–Ω–∞–ª

    cyrillic_to_latin = {
        '–ê': 'A', '–ë': 'B', '–í': ['V', 'W', 'B'], '–ì': 'G', '–î': 'D',
        '–ï': ['E', 'I'], '–Å': ['E', 'I'], '–ñ': ['J', 'ZH'], '–ó': ['Z', 'S', 'C'],  
        '–ò': ['I', 'E', 'Y'], '–ô': ['Y', 'I'], '–ö': ['K', 'C', 'Q'], '–õ': 'L',
        '–ú': 'M', '–ù': ['N', 'H'], '–û': 'O', '–ü': 'P', '–†': ['R', 'P'],
        '–°': ['S', 'C'], '–¢': 'T', '–£': ['U', 'Y', 'W'], '–§': 'F',
        '–•': ['H', 'X'], '–¶': ['C', 'TS'], '–ß': 'CH', '–®': 'SH', '–©': 'SCH',
        '–´': ['Y', 'I'], '–≠': ['E', 'A'], '–Æ': ['U', 'YU'], '–Ø': ['YA', 'A']
    }
    
    # –õ–∞—Ç–∏–Ω–∏—Ü–∞ -> –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è)
    latin_to_cyrillic = {
        'A': ['–ê', '–Ø'], 'B': ['–ë', '–í'], 'C': ['–°', '–ö', '–¶'], 'D': '–î',
        'E': ['–ï', '–ò', '–≠'], 'F': '–§', 'G': '–ì', 'H': ['–•', '–ù'],
        'I': ['–ò', '–ô'], 'J': '–ñ', 'K': '–ö', 'L': '–õ', 'M': '–ú', 'N': '–ù',
        'O': '–û', 'P': ['–ü', '–†'], 'Q': '–ö', 'R': '–†', 'S': ['–°', '–ó'],
        'T': '–¢', 'U': ['–£', '–Æ'], 'V': '–í', 'W': ['–í', '–£'], 'X': '–•',
        'Y': ['–£', '–ô', '–´'], 'Z': '–ó'
    }
    
    def convert_string(s, mapping, max_variants=5):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–ø–ø–∏–Ω–≥, –≥–µ–Ω–µ—Ä–∏—Ä—É—è –≤–∞—Ä–∏–∞–Ω—Ç—ã"""
        if not s:
            return ['']
        
        result_variants = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
        char = s[0]
        rest = s[1:]
        
        if char.isdigit() or char in ['-', '_']:
            # –¶–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            rest_variants = convert_string(rest, mapping, max_variants)
            for rv in rest_variants:
                result_variants.append(char + rv)
        elif char in mapping:
            replacements = mapping[char]
            if not isinstance(replacements, list):
                replacements = [replacements]
            
            rest_variants = convert_string(rest, mapping, max_variants)
            for replacement in replacements:
                for rv in rest_variants[:max_variants]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–Ω—ã–π –≤–∑—Ä—ã–≤
                    variant = replacement + rv
                    if variant not in result_variants:
                        result_variants.append(variant)
                        if len(result_variants) >= max_variants:
                            return result_variants
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            rest_variants = convert_string(rest, mapping, max_variants)
            for rv in rest_variants:
                result_variants.append(char + rv)
        
        return result_variants[:max_variants]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    # 1. –ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if any(char in cyrillic_to_latin for char in text):
        latin_variants = convert_string(text, cyrillic_to_latin, max_variants=3)
        for lv in latin_variants:
            if lv not in variants:
                variants.append(lv)
    
    # 2. –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ - —á–∞—Å—Ç–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    match = re.match(r'^([A-Z–ê-–Ø]+)(\d+)([A-Z–ê-–Ø\-]+)?$', text)
    if match:
        prefix, numbers, suffix = match.groups()
        suffix = suffix or ''
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
        if any(char in cyrillic_to_latin for char in prefix):
            prefix_variants = convert_string(prefix, cyrillic_to_latin, max_variants=2)
        else:
            prefix_variants = [prefix]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        if suffix:
            # –î–ª—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –ø—Ä–æ–±—É–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            suffix_variants = []
            
            # –ï—Å–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
            if any(char in cyrillic_to_latin for char in suffix):
                suffix_variants.extend(convert_string(suffix, cyrillic_to_latin, max_variants=3))
            
            # –ï—Å–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å –ª–∞—Ç–∏–Ω—Å–∫–∏–π - –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
            if any(char in latin_to_cyrillic for char in suffix):
                suffix_variants.extend(convert_string(suffix, latin_to_cyrillic, max_variants=2))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
            if suffix not in suffix_variants:
                suffix_variants.append(suffix)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for pv in prefix_variants[:2]:
                for sv in suffix_variants[:3]:
                    variant = pv + numbers + sv
                    if variant not in variants and len(variants) < 20:
                        variants.append(variant)
        else:
            # –¢–æ–ª—å–∫–æ –ø—Ä–µ—Ñ–∏–∫—Å –∏ —á–∏—Å–ª–∞
            for pv in prefix_variants[:3]:
                variant = pv + numbers
                if variant not in variants:
                    variants.append(variant)
    
    # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    special_suffixes = ['–û–ë–°', '–ì–ò–≠', '–ì–ò–ò', '–ë–¢–ö', '–ë–ê–õ', '–ö–õ–©', '–í–ü–¢', '–ì–õ–ó', '–ì–°–ö', '–ö–ú', '–ö–†', '–õ–ò–ö', '–ù–û–°', '–ü–†–ö', '–†–û–¢', '–°–ò–ù', '–§–ö', '–ê–°–ü']
    
    for suffix in special_suffixes:
        if text.endswith(suffix):
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            prefix_part = text[:-len(suffix)]
            if any(char in cyrillic_to_latin for char in prefix_part):
                prefix_converted = convert_string(prefix_part, cyrillic_to_latin, max_variants=1)[0]
                variant = prefix_converted + suffix
                if variant not in variants:
                    variants.append(variant)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    unique_variants = []
    for v in variants:
        if v not in seen:
            seen.add(v)
            unique_variants.append(v)
    
    print(f"[DEBUG] Variants for '{text}': {unique_variants[:10]}")
    return unique_variants[:20]

def calculate_phonetic_score(query: str, test_code: str) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏."""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
    query_digits = ''.join(c for c in query if c.isdigit())
    code_digits = ''.join(c for c in test_code if c.isdigit())
    
    # –ï—Å–ª–∏ —Ü–∏—Ñ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Å–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É
    digit_penalty = 0
    if query_digits != code_digits:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ü–∏—Ñ—Ä
        diff_count = sum(1 for i in range(min(len(query_digits), len(code_digits))) 
                        if query_digits[i] != code_digits[i])
        diff_count += abs(len(query_digits) - len(code_digits))
        digit_penalty = diff_count * 20  # -20 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—É—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É
    
    # –§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥
    phonetic_map = {
        # –õ–∞—Ç–∏–Ω–∏—Ü–∞
        'A': 'A', 'B': 'B', 'C': 'K', 'D': 'D', 'E': 'I', 'F': 'F',
        'G': 'G', 'H': 'H', 'I': 'I', 'J': 'J', 'K': 'K', 'L': 'L',
        'M': 'M', 'N': 'N', 'O': 'O', 'P': 'P', 'Q': 'K', 'R': 'R',
        'S': 'S', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'V', 'X': 'H',
        'Y': 'U', 'Z': 'Z',
        # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'I',
        '–Å': 'I', '–ñ': 'J', '–ó': 'Z', '–ò': 'I', '–ô': 'I', '–ö': 'K',
        '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R',
        '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'S',
        '–ß': 'CH', '–®': 'SH', '–©': 'SCH', '–´': 'I', '–≠': 'I', '–Æ': 'U',
        '–Ø': 'A'
    }
    
    def to_phonetic(s):
        result = ''
        s = s.upper()
        i = 0
        while i < len(s):
            if i < len(s) - 1:
                two_char = s[i:i+2]
                if two_char in ['PH', 'TH', 'CH', 'SH']:
                    if two_char == 'PH':
                        result += 'F'
                    elif two_char == 'TH':
                        result += 'T'
                    else:
                        result += two_char
                    i += 2
                    continue
            
            char = s[i]
            if char in phonetic_map:
                result += phonetic_map[char]
            elif char.isdigit():
                result += char
            i += 1
        
        return result
    
    query_phonetic = to_phonetic(query)
    code_phonetic = to_phonetic(test_code)
    
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if query_phonetic == code_phonetic:
        return max(0, 100.0 - digit_penalty)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    min_len = min(len(query_phonetic), len(code_phonetic))
    if min_len >= 4:
        if query_phonetic[:4] == code_phonetic[:4]:
            return max(0, 85.0 - digit_penalty)
    
    # –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    matches = 0
    for i in range(min(len(query_phonetic), len(code_phonetic))):
        if query_phonetic[i] == code_phonetic[i]:
            matches += 1
    
    max_len = max(len(query_phonetic), len(code_phonetic))
    if max_len == 0:
        return 0.0
    
    base_score = (matches / max_len) * 100
    return max(0, base_score - digit_penalty)

async def smart_test_search(processor, original_query: str) -> Optional[tuple]:
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è."""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    variants = generate_test_code_variants(original_query)
    
    # 1. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    for variant in variants:
        results = processor.search_test(filter_dict={"test_code": variant})
        if results:
            print(f"[DEBUG] Found exact match with variant: {variant}")
            return results[0], variant, "exact"
    
    # 2. –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    text_results = processor.search_test(query=original_query.upper(), top_k=50)
    
    best_match = None
    best_score = 0
    best_variant = None
    
    for doc, base_score in text_results:
        test_code = doc.metadata.get('test_code', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for variant in variants:
            if test_code == variant:
                return (doc, base_score), variant, "text_exact"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
            if test_code.startswith(variant[:3]):
                phonetic_score = calculate_phonetic_score(variant, test_code)
                combined_score = base_score * 0.3 + phonetic_score * 0.7
                
                if combined_score > best_score:
                    best_score = combined_score
                    best_match = (doc, base_score)
                    best_variant = test_code
    
    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–µ
    if best_match and best_score > 50:
        print(f"[DEBUG] Found phonetic match: {best_variant} (score: {best_score:.1f})")
        return best_match, best_variant, "phonetic"
    
    return None, None, None

async def safe_delete_message(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message:
            await message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
def split_long_message(text: str, max_length: int = 4000) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.split('\n')
    
    for line in lines:
        if len(current_part) + len(line) + 1 > max_length:
            if current_part:
                parts.append(current_part.strip())
                current_part = line
            else:
                # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–µ–∂–µ–º –µ—ë
                while len(line) > max_length:
                    parts.append(line[:max_length])
                    line = line[max_length:]
                current_part = line
        else:
            current_part += '\n' + line if current_part else line
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts

def expand_query_with_abbreviations(query: str) -> str:
    """Expand query with known test abbreviations."""
    query_upper = query.upper()
    for abbr, expansion in TEST_ABBREVIATIONS.items():
        if abbr in query_upper:
            return f"{query} {expansion}"
    return query

def safe_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    return html.escape(text)

def get_time_based_farewell(user_name: str = None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    tz = pytz.timezone('Europe/Minsk')
    current_hour = datetime.now(tz).hour
    
    name_part = f", {user_name}" if user_name and user_name != '–¥—Ä—É–≥' else ""
    
    if 4 <= current_hour < 12:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ —É—Ç—Ä–∞ ‚òÄÔ∏è"
    elif 12 <= current_hour < 17:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ü§ù"
    elif 17 <= current_hour < 22:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞ üåÜ"
    else:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –î–æ–±—Ä–æ–π –Ω–æ—á–∏ üåô"
    
def get_user_first_name(user):
    if not user:
        return '–¥—Ä—É–≥'
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å dict –∏ aiosqlite.Row
    name = user['name'] if 'name' in user.keys() else None
    if not name:
        return '–¥—Ä—É–≥'
    full_name = name.strip()
    name_parts = full_name.split()
    if len(name_parts) >= 2 and ('user_type' in user.keys() and user['user_type'] == 'employee'):
        return name_parts[1]  # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –§–∞–º–∏–ª–∏—è –ò–º—è
    return name_parts[0]  # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã—Ö –∏–º–µ–Ω

def format_test_data(metadata: Dict) -> Dict:
    """Extract and format test metadata into standardized dictionary."""
    return {
        'type': metadata['type'],
        'test_code': metadata['test_code'],
        'test_name': metadata['test_name'],
        'container_type': metadata['container_type'],
        'container_number': metadata['container_number'],
        'preanalytics': metadata['preanalytics'],
        'storage_temp': metadata['storage_temp'],
        'department': metadata['department']
    }

def format_test_info(test_data: Dict) -> str:
    """Format test information from metadata using HTML tags."""
    t_type = '–¢–µ—Å—Ç' if test_data['type'] == '–¢–µ—Å—Ç—ã' else '–ü—Ä–æ—Ñ–∏–ª—å'
    return (
        f"<b>{t_type}: {test_data['test_code']} - {test_data['test_name']}</b>\n\n"
        f"üìã <b>–ü—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b> {test_data['preanalytics']}\n"
        f"üß™ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:</b> {test_data['container_type']}\n"
        f"üî¢ <b>–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:</b> {test_data['container_number']}\n"
        f"‚ùÑÔ∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {test_data['storage_temp']}\n"
        f"üß¨ <b>–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b> {test_data['department']}\n\n"
    )
    
async def handle_general_question(message: Message, state: FSMContext, question_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ LLM."""
    user_id = message.from_user.id
    
    loading_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    try:
        system_prompt = """–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ VetUnion. 
        –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö, –ø—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫–µ, —É—Å–ª–æ–≤–∏—è—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤.
        –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é.
        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        
        response = await llm.agenerate([[
            SystemMessage(content=system_prompt),
            HumanMessage(content=question_text)
        ]])
        
        answer = response.generations[0][0].text.strip()
        
        await db.add_request_stat(
            user_id=user_id,
            request_type='general_question',
            request_text=question_text
        )
        
        await loading_msg.delete()
        await message.answer(answer, parse_mode="HTML")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî¢ –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –∫–æ–¥—É", callback_data="search_by_code"),
                InlineKeyboardButton(text="üìù –ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_name")
            ],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_search")]
        ])
        
        await message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
        
    except Exception as e:
        print(f"[ERROR] General question handling failed: {e}")
        await loading_msg.delete()
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")

async def check_if_needs_new_search(query: str, current_test_data: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞ –æ —Ç–µ–∫—É—â–µ–º —Ç–µ—Å—Ç–µ."""
    
    if not current_test_data:
        return True
    
    query_lower = query.lower()
    current_test_name = current_test_data['test_name'].lower() if current_test_data else ""
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ —Ç–µ—Å—Ç–∞
    other_test_indicators = [
        '–¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç', '–¥—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑', '–µ—â–µ –æ–¥–∏–Ω', '–∞ —á—Ç–æ –Ω–∞—Å—á–µ—Ç',
        '–∞ –µ—Å–ª–∏', '–ø–æ–∫–∞–∂–∏', '–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    for indicator in other_test_indicators:
        if indicator in query_lower:
            return True
    
    # –°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤
    test_types = {
        '–∫—Ä–æ–≤—å': ['–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', '–æ–∞–∫', '–≥–µ–º–∞—Ç–æ–ª–æ–≥–∏—è', '–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏'],
        '–º–æ—á–∞': ['–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏', '–æ–∞–º', '–∞–Ω–∞–ª–∏–∑ –º–æ—á–∏', '–º–æ—á–∞'],
        '–±–∏–æ—Ö–∏–º–∏—è': ['–±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π', '–±–∏–æ—Ö–∏–º–∏—è', '–±—Ö'],
        '–≥–æ—Ä–º–æ–Ω—ã': ['–≥–æ—Ä–º–æ–Ω', '—Ç—Ç–≥', '—Ç3', '—Ç4', '—Ç–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π'],
        '–∏–Ω—Ñ–µ–∫—Ü–∏–∏': ['–ø—Ü—Ä', '–∏—Ñ–∞', '–∞–Ω—Ç–∏—Ç–µ–ª–∞', '–≤–∏—Ä—É—Å'],
        '–∫–∞–ª': ['–∫–∞–ª', '–∫–æ–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ñ–µ–∫–∞–ª–∏–∏'],
        '—Ü–∏—Ç–æ–ª–æ–≥–∏—è': ['—Ü–∏—Ç–æ–ª–æ–≥–∏—è', '–º–∞–∑–æ–∫', '—Å–æ—Å–∫–æ–±']
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
    current_type = None
    mentioned_type = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    for test_type, keywords in test_types.items():
        for keyword in keywords:
            if keyword in current_test_name:
                current_type = test_type
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ
    for test_type, keywords in test_types.items():
        for keyword in keywords:
            if keyword in query_lower:
                mentioned_type = test_type
                break
    
    # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ç–µ—Å—Ç–∞ - –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    if mentioned_type and mentioned_type != current_type:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    # –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    potential_codes = re.findall(r'\b[A–ê][N–ù]?\d+\b', query.upper())
    if potential_codes:
        for code in potential_codes:
            if normalize_test_code(code) != current_test_data['test_code']:
                return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –ø—Ä–æ –∫—Ä–æ–≤—å, –∞ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –º–æ—á—É
    if current_type == '–∫—Ä–æ–≤—å' and any(word in query_lower for word in ['–º–æ—á', '—É—Ä–∏–Ω']):
        return True
    if current_type == '–º–æ—á–∞' and any(word in query_lower for word in ['–∫—Ä–æ–≤', '–≥–µ–º–∞—Ç', '—ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç']):
        return True
    
    return False

# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:
@questions_router.callback_query(F.data == "search_by_code")
async def handle_search_by_code_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AN5):", reply_markup=get_back_to_menu_kb())
    await state.set_state(QuestionStates.waiting_for_code)

@questions_router.callback_query(F.data == "search_by_name")
async def handle_search_by_name_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:", reply_markup=get_back_to_menu_kb())
    await state.set_state(QuestionStates.waiting_for_name)

async def animate_loading(loading_msg: Message):
    """Animate loading message (edit text, not caption)."""
    animations = [
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ VetUnion...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
    ]
    i = 0
    try:
        while True:
            await asyncio.sleep(2)
            i = (i + 1) % len(animations)
            await loading_msg.edit_text(animations[i])
    except (asyncio.CancelledError, Exception):
        pass

async def select_best_match(query: str, docs: list[tuple[Document, float]]) -> list[Document]:
    """Select best matching tests using LLM from multiple options."""
    if len(docs) == 1:
        return [docs[0][0]]
    
    options = "\n".join([
        f"{i}. {doc.metadata['test_name']} ({doc.metadata['test_code']}) - score: {score:.2f}"
        for i, (doc, score) in enumerate(docs, 1)
    ])
    
    prompt = f"""
    Select relevant tests for: "{query}"
    Return ONLY numbers of matching options (1-{len(docs)}) separated by commas.
    
    Options:
    {options}
    """
    
    try:
        response = await llm.agenerate([[SystemMessage(content=prompt)]])
        selected = response.generations[0][0].text.strip()
        
        if not selected:
            return [docs[0][0]]  # Fallback to top result
            
        selected_indices = []
        for num in selected.split(','):
            num = num.strip()
            if num.isdigit() and 1 <= int(num) <= len(docs):
                selected_indices.append(int(num) - 1)
                
        if not selected_indices:
            return [docs[0][0]]
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ LLM
        selected_docs_with_order = [(docs[i][0], idx) for idx, i in enumerate(selected_indices)]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ "–¢–µ—Å—Ç—ã", –ø–æ—Ç–æ–º "–ü—Ä–æ—Ñ–∏–ª–∏", –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ LLM
        sorted_docs = sorted(selected_docs_with_order, key=lambda x: (
            0 if x[0].metadata.get('type') == '–¢–µ—Å—Ç—ã' else 1,  # –¢–µ—Å—Ç—ã –ø–µ—Ä–≤—ã–º–∏
            x[1]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ LLM –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        ))
        
        return [doc for doc, _ in sorted_docs]
        
    except Exception:
        return [docs[0][0]]  # Fallback on error

async def show_personalized_suggestions(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    suggestions = await db.get_search_suggestions(user_id)
    
    if suggestions:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        frequent = [s for s in suggestions if s['type'] == 'frequent']
        recent = [s for s in suggestions if s['type'] == 'recent']
        
        if frequent:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚≠ê –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ:", callback_data="ignore")
            ])
            
            for sug in frequent[:3]:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"{sug['code']} - {sug['name'][:40]}... ({sug['frequency']}x)",
                        callback_data=f"quick_test:{sug['code']}"
                    )
                ])
        
        if recent:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="üïê –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∏—Å–∫–∏:", callback_data="ignore")
            ])
            
            for sug in recent[:2]:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"{sug['code']} - {sug['name'][:40]}...",
                        callback_data=f"quick_test:{sug['code']}"
                    )
                ])
        
        await message.answer(
            "üí° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º —Ç–µ—Å—Ç–∞–º:",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@questions_router.callback_query(F.data.startswith("show_test:"))
async def handle_show_test_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ –∏–∑ inline –∫–Ω–æ–ø–∫–∏."""
    action, test_code = TestCallback.unpack(callback.data)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    try:
        processor = DataProcessor()
        processor.load_vector_store()
        
        # –ò—â–µ–º —Ç–µ—Å—Ç –ø–æ –∫–æ–¥—É
        results = processor.search_test(filter_dict={"test_code": test_code})
        
        if not results:
            await callback.message.answer(f"‚ùå –¢–µ—Å—Ç {test_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        doc = results[0][0]
        test_data = format_test_data(doc.metadata)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ:</b>\n\n"
        response += format_test_info(test_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_id = callback.from_user.id
        await db.add_search_history(
            user_id=user_id,
            search_query=f"–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞: {test_code}",
            found_test_code=test_code,
            search_type='code',
            success=True
        )
        await db.update_user_frequent_test(
            user_id=user_id,
            test_code=test_code,
            test_name=test_data['test_name']
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        data = await state.get_data()
        if 'last_viewed_test' in data and data['last_viewed_test'] != test_code:
            await db.update_related_tests(
                user_id=user_id,
                test_code_1=data['last_viewed_test'],
                test_code_2=test_code
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        related_tests = await db.get_user_related_tests(user_id, test_code)
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        similar_tests = await fuzzy_test_search(processor, test_code, threshold=40)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∞–º —Ç–µ—Å—Ç
        similar_tests = [(d, s) for d, s in similar_tests if d.metadata.get('test_code') != test_code]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ
        reply_markup = None
        if related_tests or similar_tests:
            response += "\n<b>üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–∞–∫–∂–µ:</b>"
            keyboard = []
            row = []
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            for related in related_tests[:4]:
                row.append(InlineKeyboardButton(
                    text=f"‚≠ê {related['test_code']}",
                    callback_data=TestCallback.pack("show_test", related['test_code'])
                ))
                if len(row) >= 2:
                    keyboard.append(row)
                    row = []
            
            # –ó–∞—Ç–µ–º –ø–æ—Ö–æ–∂–∏–µ
            for doc, _ in similar_tests[:4]:
                if len(keyboard) * 2 + len(row) >= 8:  # –ú–∞–∫—Å–∏–º—É–º 8 –∫–Ω–æ–ø–æ–∫
                    break
                code = doc.metadata.get('test_code')
                if not any(r['test_code'] == code for r in related_tests):
                    row.append(InlineKeyboardButton(
                        text=code,
                        callback_data=TestCallback.pack("show_test", code)
                    ))
                    if len(row) >= 2:
                        keyboard.append(row)
                        row = []
            
            if row:
                keyboard.append(row)
            
            keyboard.append([
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_keyboard")
            ])
            
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            response, 
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ—Å—Ç–æ–º
        await state.set_state(QuestionStates.in_dialog)
        await state.update_data(current_test=test_data, last_viewed_test=test_code)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        await callback.message.answer(
            "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_dialog_kb()
        )
        
    except Exception as e:
        print(f"[ERROR] Callback handling failed: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ")

@questions_router.callback_query(F.data.startswith("quick_test:"))
async def handle_quick_test_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    test_code = callback.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_info = await db.get_test_by_code(test_code)
    
    if test_info:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–µ
        response_text = (
            f"üî¨ <b>{test_info['test_name']}</b>\n"
            f"üìã –ö–æ–¥: {test_info['test_code']}\n"
            f"üè¢ –û—Ç–¥–µ–ª: {test_info['department']}\n"
            f"üß™ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {test_info['container_type']}\n"
            f"‚ùÑÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ: {test_info['storage_temp']}\n\n"
            f"üìù –ü—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n{test_info['preanalytics']}"
        )
        
        await callback.message.answer(response_text, parse_mode="HTML")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.update_user_frequent_test(
            callback.from_user.id, 
            test_info['test_code'],
            test_info['test_name']
        )
    else:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    
@questions_router.callback_query(F.data == "ignore")
async def handle_ignore_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

@questions_router.message(F.text == "üî¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
async def start_question(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    user_name = get_user_first_name(user)
    
    prompt = f"""–ü—Ä–∏–≤–µ—Ç, {user_name} üëã
    
üî¨ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ:
‚Ä¢ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º —Ç–µ—Å—Ç–∞–º (–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: AN5)
‚Ä¢ –ü—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
‚Ä¢ –¢–∏–ø–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —É—Å–ª–æ–≤–∏—è–º —Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–¥ —Ç–µ—Å—Ç–∞:"""

    await db.clear_buffer(user_id)
    await message.answer(prompt, reply_markup=get_back_to_menu_kb())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    await show_personalized_suggestions(message, state)
    
    await state.set_state(QuestionStates.waiting_for_search_type)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@questions_router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    user = await db.get_user(message.from_user.id)
    role = user['role'] if 'role' in user.keys() else 'staff'
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_menu_by_role(role))
    return

@questions_router.message(QuestionStates.waiting_for_search_type)
async def handle_universal_search(message: Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–∏—Å–∫–∞."""
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–Ω–æ–ø–∫–∞ –ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥—ã, –Ω–æ –∏ —è–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    search_indicators = [
        '–ø–æ–∫–∞–∂–∏', '–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 
        '—á—Ç–æ —Ç–∞–∫–æ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '–∞–Ω–∞–ª–∏–∑ –Ω–∞'
    ]
    
    text_lower = text.lower()
    is_search_query = any(indicator in text_lower for indicator in search_indicators)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if is_test_code_pattern(text):
        # –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥ —Ç–µ—Å—Ç–∞
        await state.set_state(QuestionStates.waiting_for_code)
        await handle_code_search(message, state)
    elif is_search_query or len(text.split()) <= 3:
        # –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —è–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        await state.set_state(QuestionStates.waiting_for_name)
        await handle_name_search(message, state)
    else:
        # –î–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç
        processor = DataProcessor()
        processor.load_vector_store()
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
        results = processor.search_test(text, top_k=3)
        
        if results and results[0][1] > 0.7:  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            await state.set_state(QuestionStates.waiting_for_name)
            await handle_name_search(message, state)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
            await handle_general_question(message, state, text)

@questions_router.message(QuestionStates.waiting_for_code)
async def handle_code_search(message: Message, state: FSMContext):
    """Handle test code search with smart matching and fuzzy suggestions."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    data = await state.get_data()
    if data.get('is_processing', False):
        await message.answer(
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...",
            reply_markup=get_back_to_menu_kb()
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(is_processing=True)
    
    user_id = message.from_user.id
    original_input = message.text.strip()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    gif_msg = None
    loading_msg = None
    animation_task = None

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        current_task = asyncio.current_task()
        await state.update_data(current_task=current_task)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ GIF
        try:
            if LOADING_GIF_ID:
                gif_msg = await message.answer_animation(LOADING_GIF_ID, caption="")
        except Exception:
            gif_msg = None
        
        loading_msg = await message.answer("üîç –ò—â—É —Ç–µ—Å—Ç –ø–æ –∫–æ–¥—É...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
        if loading_msg:
            animation_task = asyncio.create_task(animate_loading(loading_msg))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
        if current_task and current_task.cancelled():
            raise asyncio.CancelledError()
        
        processor = DataProcessor()
        processor.load_vector_store()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –∫–æ–¥
        normalized_input = normalize_test_code(original_input)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        user_suggestions = await db.get_search_suggestions(user_id, normalized_input)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_suggestions:
            for sug in user_suggestions:
                if sug['code'].upper() == normalized_input.upper():
                    # –ù–∞—à–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    results = processor.search_test(filter_dict={"test_code": sug['code']})
                    if results:
                        result = results[0]
                        found_variant = sug['code']
                        match_type = "personalized"
                        break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
        if 'result' not in locals():
            result, found_variant, match_type = await smart_test_search(processor, normalized_input)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
        if current_task and current_task.cancelled():
            raise asyncio.CancelledError()
        
        if not result:
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            similar_tests = await fuzzy_test_search(processor, normalized_input, threshold=30)
            
            if animation_task:
                animation_task.cancel()
            await safe_delete_message(loading_msg)
            await safe_delete_message(gif_msg)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–æ–∏—Å–∫
            await db.add_search_history(
                user_id=user_id,
                search_query=original_input,
                search_type='code',
                success=False
            )
            
            if similar_tests:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–¥–æ 20)
                response = f"‚ùå –¢–µ—Å—Ç —Å –∫–æ–¥–æ–º '<code>{original_input.upper()}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                response += format_similar_tests_text(similar_tests, max_display=20)
                
                keyboard = create_similar_tests_keyboard(similar_tests[:20])
                
                await message.answer(
                    response + "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:</i>", 
                    parse_mode="HTML", 
                    reply_markup=keyboard
                )
            else:
                error_msg = f"‚ùå –¢–µ—Å—Ç —Å –∫–æ–¥–æ–º '{original_input.upper()}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                error_msg += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ."
                await message.answer(error_msg, reply_markup=get_back_to_menu_kb())
            
            await state.set_state(QuestionStates.waiting_for_search_type)
            return
            
        # –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        doc = result[0]
        test_data = format_test_data(doc.metadata)
        
        response = ""
        if match_type == "personalized":
            response = f"<i>‚≠ê –ò–∑ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:</i>\n\n"
        elif match_type == "phonetic" and found_variant != original_input.upper():
            response = f"<i>–ü–æ –∑–∞–ø—Ä–æ—Å—É '{original_input.upper()}' –Ω–∞–π–¥–µ–Ω —Ç–µ—Å—Ç:</i>\n\n"
        
        response += format_test_info(test_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
        await db.add_search_history(
            user_id=user_id,
            search_query=original_input,
            found_test_code=test_data['test_code'],
            search_type='code',
            success=True
        )
        
        await db.update_user_frequent_test(
            user_id=user_id,
            test_code=test_data['test_code'],
            test_name=test_data['test_name']
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        data = await state.get_data()
        if 'last_viewed_test' in data and data['last_viewed_test'] != test_data['test_code']:
            await db.update_related_tests(
                user_id=user_id,
                test_code_1=data['last_viewed_test'],
                test_code_2=test_data['test_code']
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        related_tests = await db.get_user_related_tests(user_id, test_data['test_code'])
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã
        similar_tests = await fuzzy_test_search(processor, test_data['test_code'], threshold=50)
        similar_tests = [(d, s) for d, s in similar_tests if d.metadata.get('test_code') != test_data['test_code']]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ—Å—Ç–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if related_tests or similar_tests:
            response += "\n<b>üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–∞–∫–∂–µ:</b>\n"
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            for related in related_tests[:3]:
                response += f"‚Ä¢ ‚≠ê <code>{related['test_code']}</code> - {related['test_name'][:50]}...\n"
            
            # –ó–∞—Ç–µ–º –ø–æ—Ö–æ–∂–∏–µ
            shown_codes = {r['test_code'] for r in related_tests}
            for doc, _ in similar_tests[:5]:
                if doc.metadata['test_code'] not in shown_codes:
                    response += f"‚Ä¢ <code>{doc.metadata['test_code']}</code> - {doc.metadata['test_name'][:50]}...\n"
        
        if animation_task:
            animation_task.cancel()
        await safe_delete_message(loading_msg)
        await safe_delete_message(gif_msg)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(response, parse_mode="HTML")
        
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        for related in related_tests[:6]:
            row.append(InlineKeyboardButton(
                text=f"‚≠ê {related['test_code']}",
                callback_data=TestCallback.pack("show_test", related['test_code'])
            ))
            if len(row) >= 3:
                keyboard.inline_keyboard.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã
        shown_codes = {r['test_code'] for r in related_tests}
        for doc, _ in similar_tests[:10]:
            if len(keyboard.inline_keyboard) * 3 + len(row) >= 15:  # –ú–∞–∫—Å–∏–º—É–º 15 –∫–Ω–æ–ø–æ–∫
                break
            if doc.metadata['test_code'] not in shown_codes:
                row.append(InlineKeyboardButton(
                    text=doc.metadata['test_code'],
                    callback_data=TestCallback.pack("show_test", doc.metadata['test_code'])
                ))
                if len(row) >= 3:
                    keyboard.inline_keyboard.append(row)
                    row = []
        
        if row:
            keyboard.inline_keyboard.append(row)
        
        if keyboard.inline_keyboard:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_keyboard")
            ])
            
            await message.answer(
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–π —Ç–µ—Å—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
                reply_markup=keyboard
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–∞–ª–æ–≥–∞
        await message.answer(
            "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:", 
            reply_markup=get_dialog_kb()
        )
        
        await state.set_state(QuestionStates.in_dialog)
        await state.update_data(current_test=test_data, last_viewed_test=test_data['test_code'])
        
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        if animation_task:
            animation_task.cancel()
        await safe_delete_message(loading_msg)
        await safe_delete_message(gif_msg)
        await message.answer("‚èπ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_back_to_menu_kb())
        
    except Exception as e:
        print(f"[ERROR] Code search failed: {e}")
        if animation_task:
            animation_task.cancel()
        await safe_delete_message(loading_msg)
        await safe_delete_message(gif_msg)
        
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=get_back_to_menu_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)
    
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.update_data(is_processing=False, current_task=None)

@questions_router.message(QuestionStates.in_dialog, F.text == "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
async def handle_new_question_in_dialog(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤
    data = await state.get_data()
    last_viewed = data.get('last_viewed_test')
    
    await message.answer(
        "üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AN5) –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ:",
        reply_markup=get_back_to_menu_kb()
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    await show_personalized_suggestions(message, state)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É
    await state.set_state(QuestionStates.waiting_for_search_type)
    if last_viewed:
        await state.update_data(last_viewed_test=last_viewed)

@questions_router.callback_query(F.data == "new_search")
async def handle_new_search(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    last_viewed = data.get('last_viewed_test')
    
    await callback.message.answer(
        "üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AN5) –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ:",
        reply_markup=get_back_to_menu_kb()
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    message = callback.message
    message.from_user = callback.from_user
    await show_personalized_suggestions(message, state)
    
    await state.set_state(QuestionStates.waiting_for_search_type)
    if last_viewed:
        await state.update_data(last_viewed_test=last_viewed)

@questions_router.message(QuestionStates.waiting_for_name)
async def handle_name_search(message: Message, state: FSMContext):
    """Handle test name search using RAG."""
    user_id = message.from_user.id
    text = message.text.strip()
    
    gif_msg = None
    loading_msg = None
    animation_task = None

    try:
        if LOADING_GIF_ID:
            gif_msg = await message.answer_animation(LOADING_GIF_ID, caption="")
            loading_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
            animation_task = asyncio.create_task(animate_loading(loading_msg))
        else:
            loading_msg = await message.answer("üîç –ò—â–µ–º —Ç–µ—Å—Ç...")
        
        expanded_query = expand_query_with_abbreviations(text)
        processor = DataProcessor()
        processor.load_vector_store()
        
        rag_hits = processor.search_test(expanded_query, top_k=20)
        
        if not rag_hits:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–æ–∏—Å–∫
            await db.add_search_history(
                user_id=user_id,
                search_query=text,
                search_type='text',
                success=False
            )
            raise ValueError("–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        selected_docs = await select_best_match(text, rag_hits)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
        for doc in selected_docs[:1]:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
            await db.add_search_history(
                user_id=user_id,
                search_query=text,
                found_test_code=doc.metadata['test_code'],
                search_type='text',
                success=True
            )
            
            await db.update_user_frequent_test(
                user_id=user_id,
                test_code=doc.metadata['test_code'],
                test_name=doc.metadata['test_name']
            )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if animation_task:
            animation_task.cancel()
        await safe_delete_message(loading_msg)
        await safe_delete_message(gif_msg)
        
        if len(selected_docs) > 1:
            # Show multiple results with full info, splitting into multiple messages if needed
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
            full_test_responses = []
            for i, doc in enumerate(selected_docs):
                test_data = format_test_data(doc.metadata)
                full_response = f"<b>{i+1}.</b> {format_test_info(test_data)}\n\n"
                full_test_responses.append(full_response)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            messages_to_send = []
            current_message = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:\n\n"
            
            for test_response in full_test_responses:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(current_message + test_response) <= 4000:
                    current_message += test_response
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                    if current_message.strip() != "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ—Å—Ç–æ–≤:":
                        messages_to_send.append(current_message)
                    
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ—Å—Ç–æ–º
                    current_message = test_response
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
            if current_message.strip():
                messages_to_send.append(current_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for message_text in messages_to_send:
                await message.answer(message_text, parse_mode="HTML")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            row = []
            
            for i, doc in enumerate(selected_docs[:15]):  # –î–æ 15 –∫–Ω–æ–ø–æ–∫
                row.append(InlineKeyboardButton(
                    text=doc.metadata['test_code'],
                    callback_data=TestCallback.pack("show_test", doc.metadata['test_code'])
                ))
                if len(row) >= 3:
                    keyboard.inline_keyboard.append(row)
                    row = []
            
            if row:
                keyboard.inline_keyboard.append(row)
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")
            ])
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ—Å—Ç:",
                reply_markup=keyboard
            )

        else:
            # Single result
            test_data = format_test_data(selected_docs[0].metadata)
            response = format_test_info(test_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if len(response) > 4000:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫—É
                test_data['preanalytics'] = test_data['preanalytics'][:500] + "..."
                response = format_test_info(test_data)
            
            await message.answer(response, parse_mode="HTML")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–∞–ª–æ–≥–∞
            await message.answer(
                "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_dialog_kb()
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        await state.set_state(QuestionStates.in_dialog)
        if selected_docs:
            last_test_data = format_test_data(selected_docs[0].metadata)
            await state.update_data(current_test=last_test_data, last_viewed_test=last_test_data['test_code'])
            
    except Exception as e:
        print(f"[ERROR] Name search failed: {e}")
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if animation_task:
            animation_task.cancel()
        await safe_delete_message(loading_msg)
        await safe_delete_message(gif_msg)
        
        error_msg = "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" if str(e) == "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_msg, reply_markup=get_back_to_menu_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)

@questions_router.message(QuestionStates.in_dialog)
async def handle_dialog(message: Message, state: FSMContext):
    """Handle follow-up questions using LLM with smart context switching."""
    text = message.text.strip()
    user_id = message.from_user.id
    
    if text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await state.clear()
        user = await db.get_user(user_id)
        role = user['role'] if 'role' in user.keys() else 'staff'
        user_name = get_user_first_name(user)
        farewell = get_time_based_farewell(user_name)
        await message.answer(farewell, reply_markup=get_menu_by_role(role))
        return
        
    if text == "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        await handle_new_question_in_dialog(message, state)
        return
    
    data = await state.get_data()
    test_data = data['current_test'] if 'current_test' in data else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
    if is_test_code_pattern(text):
        await state.set_state(QuestionStates.waiting_for_code)
        await handle_code_search(message, state)
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ
    needs_new_search = await check_if_needs_new_search(text, test_data)
    
    if needs_new_search:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ - –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
        await state.set_state(QuestionStates.waiting_for_name)
        await handle_name_search(message, state)
        return
    
    if not test_data:
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω. –ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", reply_markup=get_back_to_menu_kb())
        await state.set_state(QuestionStates.waiting_for_search_type)
        return
        
    gif_msg = await message.answer_animation(LOADING_GIF_ID, caption="")
    loading_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    animation_task = asyncio.create_task(animate_loading(loading_msg))
    
    try:
        # –ë–æ–ª–µ–µ —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
        system_msg = SystemMessage(content=f"""
            –¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ VetUnion. 
            
            –í–ê–ñ–ù–û: –¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –ø—Ä–æ —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç:
            –ö–æ–¥: {test_data['test_code']}
            –ù–∞–∑–≤–∞–Ω–∏–µ: {test_data['test_name']}
            –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {test_data['container_type']}
            –ü—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {test_data['preanalytics']}
            –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {test_data['storage_temp']}
            –û—Ç–¥–µ–ª: {test_data['department']}
            
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –î–†–£–ì–û–ô —Ç–µ—Å—Ç, —Å–∫–∞–∂–∏:
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            
            –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–µ—Å—Ç–µ.
        """)
        
        response = await llm.agenerate([[system_msg, HumanMessage(content=text)]])
        answer = response.generations[0][0].text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ª–∏ LLM –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç
        if "–≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ" in answer.lower():
            await loading_msg.edit_text(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –æ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ. "
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞:"
            )
            await state.set_state(QuestionStates.waiting_for_search_type)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            await show_personalized_suggestions(message, state)
        else:
            await loading_msg.edit_text(answer)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_dialog_kb())
        
        await db.add_request_stat(
            user_id=user_id,
            request_type='question',
            request_text=text
        )
        
    except Exception:
        await loading_msg.edit_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", reply_markup=get_dialog_kb())
    finally:
        animation_task.cancel()
        await gif_msg.delete()

async def handle_context_switch(message: Message, state: FSMContext, new_query: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç."""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    data = await state.get_data()
    if 'current_test' in data:
        last_test = data['current_test']['test_code']
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        await state.update_data(previous_tests=data.get('previous_tests', []) + [last_test])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if is_test_code_pattern(new_query):
        await state.set_state(QuestionStates.waiting_for_code)
        message.text = new_query  # –ü–æ–¥–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        await handle_code_search(message, state)
    else:
        await state.set_state(QuestionStates.waiting_for_name)
        message.text = new_query
        await handle_name_search(message, state)
       