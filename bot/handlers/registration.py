import re
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import get_cancel_kb, get_country_kb, get_pet_type_kb, get_main_menu_kb

from src.database.db_init import db

registration_router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_country = State()
    waiting_for_name = State()
    waiting_for_client_code = State()
    waiting_for_pet_name = State()
    waiting_for_pet_type = State()

@registration_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"[INFO] User {user_id} initiated registration")

    await state.clear()
    user_exists = await db.user_exists(user_id)

    if user_exists:
        print(f"[INFO] User {user_id} already registered")
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_main_menu_kb()
        )
    else:
        print(f"[INFO] User {user_id} starting new registration")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏! üè•\n"
            "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:",
            reply_markup=get_country_kb()
        )
        await state.set_state(RegistrationStates.waiting_for_country)
        print(f"[INFO] State set to waiting_for_country for user {user_id}")

@registration_router.message(StateFilter(RegistrationStates), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    print(f"[INFO] User {user_id} cancelled registration")

@registration_router.message(RegistrationStates.waiting_for_country)
async def process_country(message: Message, state: FSMContext):
    user_id = message.from_user.id
    country_map = {
        "üá∑üá∫ –†–æ—Å—Å–∏—è": "RU",
        "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å": "BY",
        "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "KZ"
    }

    if message.text not in country_map:
        print(f"[WARN] User {user_id} selected invalid country: {message.text}")
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_country_kb()
        )
        return

    await state.update_data(country=country_map[message.text], country_name=message.text)
    print(f"[INFO] User {user_id} selected country: {country_map[message.text]}")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (2-50 —Å–∏–º–≤–æ–ª–æ–≤)",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_name)
    print(f"[INFO] State set to waiting_for_name for user {user_id}")

@registration_router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()

    if len(name) < 2 or len(name) > 50 or not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]+$', name):
        print(f"[WARN] User {user_id} entered invalid name: {name}")
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (2-50 —Å–∏–º–≤–æ–ª–æ–≤).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(username=name)
    print(f"[INFO] User {user_id} saved name: {name}")
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:\n"
        "‚ö†Ô∏è –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í+' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í+–ú–ê–ö–°–ò–ú–ê)\n"
        "(–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ)"
    )
    await state.set_state(RegistrationStates.waiting_for_client_code)
    print(f"[INFO] State set to waiting_for_client_code for user {user_id}")

@registration_router.message(RegistrationStates.waiting_for_client_code)
async def process_client_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip().upper()

    if len(code) < 3 or len(code) > 11 or not re.match(r'^[–íC]\+[–ê-–ØA-Z0-9\-]+$', code):
        print(f"[WARN] User {user_id} entered invalid client code: {code}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞.\n–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í+' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –í+–ú–ê–ö–°–ò–ú–ê\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    existing = await db.check_client_code_exists(code)
    if existing:
        print(f"[WARN] User {user_id} tried to use existing client code: {code}")
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(client_code=code)
    print(f"[INFO] User {user_id} saved client code: {code}")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—á–∫—É –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:\n‚ö†Ô∏è –û—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤"
    )
    await state.set_state(RegistrationStates.waiting_for_pet_name)
    print(f"[INFO] State set to waiting_for_pet_name for user {user_id}")

@registration_router.message(RegistrationStates.waiting_for_pet_name)
async def process_pet_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    pet_name = message.text.strip()

    if len(pet_name) < 2 or len(pet_name) > 30 or not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s\-]+$', pet_name):
        print(f"[WARN] User {user_id} entered invalid pet name: {pet_name}")
        await message.answer(
            "‚ùå –ö–ª–∏—á–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å (2-30 —Å–∏–º–≤–æ–ª–æ–≤).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(pet_name=pet_name)
    print(f"[INFO] User {user_id} saved pet name: {pet_name}")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_pet_type_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_pet_type)
    print(f"[INFO] State set to waiting_for_pet_type for user {user_id}")

@registration_router.message(RegistrationStates.waiting_for_pet_type)
async def process_pet_type(message: Message, state: FSMContext):
    user_id = message.from_user.id
    pet_types = ["üêï –°–æ–±–∞–∫–∞", "üêà –ö–æ—à–∫–∞", "üê∞ –ö—Ä–æ–ª–∏–∫", "ü¶ú –ü—Ç–∏—Ü–∞", "üêπ –ì—Ä—ã–∑—É–Ω", "ü¶é –†–µ–ø—Ç–∏–ª–∏—è", "–î—Ä—É–≥–æ–µ"]

    if message.text not in pet_types:
        print(f"[WARN] User {user_id} selected invalid pet type: {message.text}")
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_pet_type_kb()
        )
        return

    data = await state.get_data()
    user = message.from_user

    success = await db.add_user(
        telegram_id=user.id,
        username=data['username'],
        first_name=user.first_name or "",
        last_name=user.last_name or "",
        language_code=user.language_code or "",
        is_bot=user.is_bot,
        chat_type=message.chat.type,
        client_code=data['client_code'],
        pet_name=data['pet_name'],
        pet_type=message.text
    )

    if success:
        print(f"[INFO] User {user_id} registered successfully")
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –ò–º—è: {data['username']}\n"
            f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {data['client_code']}\n"
            f"üêæ –ü–∏—Ç–æ–º–µ—Ü: {data['pet_name']}\n"
            f"üìù –¢–∏–ø: {message.text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
        await db.add_request_stat(
            user_id,
            "registration",
            f"User registered with code {data['client_code']}"
        )
    else:
        print(f"[ERROR] Registration failed for user {user_id}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()
    print(f"[INFO] State cleared for user {user_id}")
