import re
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import (
    get_user_type_kb, get_department_function_kb, 
    get_main_menu_kb, get_admin_menu_kb, get_specialization_kb,
    get_region_kb, get_country_kb
)
from bot.handlers.questions import (
    smart_test_search, 
    format_test_data, format_test_info,
    fuzzy_test_search, 
    QuestionStates, get_dialog_kb, send_test_info_with_photo,
    # format_similar_tests_with_links,
)
from bot.handlers.utils import decode_test_code_from_url 
from src.data_vectorization import DataProcessor
from src.database.db_init import db

registration_router = Router()

# async def get_tech_support_message():
#     return (
#         "üõ† –¢–µ—Ö–Ω–∏—á–∫–∞ VET UNION Assistant\n\n"
#         "–û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
#         "üìã –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ.\n\n"
#         "üéØ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø–æ–º–æ–≥–∞—é—Ç:\n\n"
#         "‚Ä¢ –ë—ã—Å—Ç—Ä–æ —É—Å—Ç—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
#         "‚Ä¢ –£–ª—É—á—à–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞\n"
#         "‚Ä¢ –î–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å —É–¥–æ–±–Ω–µ–µ –¥–ª—è –≤—Å–µ—Ö\n\n"
#         "üí¨ –ö–∞–∫ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ:\n\n"
#         "–£–∫–∞–∂–∏—Ç–µ:\n"
#         "‚Ä¢ –í–∞—à –∑–∞–ø—Ä–æ—Å - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏\n"
#         "‚Ä¢ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ - —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç\n"
#         "‚Ä¢ –ö–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å - –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–ª—Å—è\n\n"
#         "üë• [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–µ ‚Üí https://t.me/+FUmjohiS_VQwNDIy]\n\n"
#         "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º VET UNION Assistant –ª—É—á—à–µ! ‚ö°Ô∏è"
#     )

class RegistrationStates(StatesGroup):
    waiting_for_user_type = State()
    waiting_for_country = State()
    # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    waiting_for_client_code = State()
    waiting_for_client_name = State()
    waiting_for_specialization = State()
    waiting_for_custom_specialization = State()
    # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    waiting_for_region = State()
    waiting_for_custom_region = State()
    waiting_for_employee_last_name = State()  
    waiting_for_employee_first_name = State()  
    waiting_for_department = State()

@registration_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"[INFO] User {user_id} initiated registration")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (deep link)
    args = message.text.strip().split(maxsplit=1)
    
    if len(args) > 1:
        param = args[1]
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã deep link
        test_code = None
        
        if param.startswith("test_"):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å base64
            encoded_code = param[5:]
            test_code = decode_test_code_from_url(encoded_code)
            print(f"[DEBUG] Deep link: encoded='{encoded_code}' -> decoded='{test_code}'")
            
        elif param.startswith("t_"):
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
            short_code = param[2:]
            test_code = await db.get_test_by_short_code(short_code)  # –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ë–î
            
        else:
            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä—è–º–æ–π –∫–æ–¥ —Ç–µ—Å—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            test_code = param
            print(f"[DEBUG] Direct test code in deep link: {test_code}")
        
        if test_code:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_exists = await db.user_exists(user_id)
            
            if not user_exists:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                await state.update_data(pending_test_code=test_code)
                await message.answer(
                    "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                    f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ <b>{test_code}</b>.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
                    reply_markup=get_user_type_kb(),
                    parse_mode="HTML"
                )
                await state.set_state(RegistrationStates.waiting_for_user_type)
                return
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç
            await process_test_request(message, state, test_code, user_id)
            return
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ /start –±–µ–∑ deep link
    await state.clear()
    user_exists = await db.user_exists(user_id)

    if user_exists:
        print(f"[INFO] User {user_id} already registered")
        user = await db.get_user(user_id)
        menu_kb = get_admin_menu_kb() if user['role'] == 'admin' else get_main_menu_kb()
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.",
            reply_markup=menu_kb
        )
    else:
        print(f"[INFO] User {user_id} starting new registration")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ VET UNION! üß™\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
            reply_markup=get_user_type_kb()
        )
        await state.set_state(RegistrationStates.waiting_for_user_type)
        
async def process_test_request(message: Message, state: FSMContext, test_code: str, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ deep link."""
    
    loading_msg = await message.answer(f"üîç –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ <b>{test_code}</b>...", parse_mode="HTML")
    
    try:
        processor = DataProcessor()
        processor.load_vector_store()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º smart_test_search –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        result, found_variant, match_type = await smart_test_search(processor, test_code)
        
        if result:
            doc = result[0]
            test_data = format_test_data(doc.metadata)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            try:
                await loading_msg.delete()
            except:
                pass
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = format_test_info(test_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            await send_test_info_with_photo(message, test_data, response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await db.add_search_history(
                user_id=user_id,
                search_query=f"Deep link: {test_code}",
                found_test_code=test_data['test_code'],
                search_type='code',
                success=True
            )
            await db.update_user_frequent_test(
                user_id=user_id,
                test_code=test_data['test_code'],
                test_name=test_data['test_name']
            )
            
            # ============================================
            # FIX: –ò—Å–ø–æ–ª—å–∑—É–µ–º get_dialog_kb() –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞
            # ============================================
            await state.set_state(QuestionStates.waiting_for_search_type)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            await message.answer(
                "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ—Ç–µ:",
                reply_markup=get_dialog_kb()  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û —Å get_main_menu_kb()
            )
            
            print(f"[INFO] Successfully processed deep link for test {test_code}")
            
        else:
            # –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            try:
                await loading_msg.delete()
            except:
                pass
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            await db.add_search_history(
                user_id=user_id,
                search_query=f"Deep link: {test_code}",
                search_type='code',
                success=False
            )
            
            await message.answer(
                f"‚ùå –¢–µ—Å—Ç <b>{test_code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —Ç–µ—Å—Ç–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º.",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user = await db.get_user(user_id)
            menu_kb = get_admin_menu_kb() if user['role'] == 'admin' else get_main_menu_kb()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)
            
            print(f"[WARNING] Test {test_code} not found via deep link")
            
    except Exception as e:
        print(f"[ERROR] Deep link processing failed for {test_code}: {e}")
        import traceback
        traceback.print_exc()
        
        try:
            await loading_msg.delete()
        except:
            pass
        
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º.",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = await db.get_user(user_id)
        menu_kb = get_admin_menu_kb() if user['role'] == 'admin' else get_main_menu_kb()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

@registration_router.message(RegistrationStates.waiting_for_user_type)
async def process_user_type(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "üë®‚Äç‚öïÔ∏è –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á –∫–ª–∏–Ω–∏–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä–∞":
        await state.update_data(user_type='client')
    elif message.text == "üî¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ X-LAB VET":
        await state.update_data(user_type='employee')
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_user_type_kb()
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    await message.answer(
        "üåç –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
        reply_markup=get_country_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_country)
    
@registration_router.message(RegistrationStates.waiting_for_country)
async def process_country(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    country_map = {
        "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å": "BY",
        "üá∑üá∫ –†–æ—Å—Å–∏—è": "RU",
        "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "KZ",
        "üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è": "AM"
    }
    
    if message.text not in country_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_country_kb()
        )
        return
    
    country = country_map[message.text]
    await state.update_data(country=country)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    
    if data['user_type'] == 'client':
        await message.answer(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∫–ª–∏–Ω–∏–∫–∏:\n"
            "‚ö†Ô∏è –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í+' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í+–ö–†–ê–°–ê–í–ß–ò–ö)\n"
            "üí° –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è X-LAB VET",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_client_code)
    else:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        await message.answer(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ X-LAB VET\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=get_region_kb(country)
        )
        await state.set_state(RegistrationStates.waiting_for_region)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
@registration_router.message(RegistrationStates.waiting_for_client_code)
async def process_client_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip().upper()

    if len(code) < 3 or len(code) > 20 or not re.match(r'^[–íB]\+[–ê-–ØA-Z0-9\-]+$', code):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –∫–ª–∏–Ω–∏–∫–∏.\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω:\n"
            "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í+'\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: –í+–ö–†–ê–°–ê–í–ß–ò–ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(client_code=code)
    await message.answer(
        f"‚úÖ –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏: {code}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_client_name)

@registration_router.message(RegistrationStates.waiting_for_client_name)
async def process_client_name(message: Message, state: FSMContext):
    name = message.text.strip().title()  # –î–æ–±–∞–≤–ª–µ–Ω .title()

    if len(name) < 2 or len(name) > 50:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=name)
    await message.answer(
        f"üë§ –ò–º—è: {name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
        reply_markup=get_specialization_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_specialization)

@registration_router.message(RegistrationStates.waiting_for_specialization)
async def process_specialization(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_custom_specialization)
        return
    
    specialization_map = {
        "–ù–µ—Ñ—Ä–æ–ª–æ–≥–∏—è": "–ù–µ—Ñ—Ä–æ–ª–æ–≥–∏—è",
        "–•–∏—Ä—É—Ä–≥–∏—è": "–•–∏—Ä—É—Ä–≥–∏—è",
        "–¢–µ—Ä–∞–ø–∏—è": "–¢–µ—Ä–∞–ø–∏—è",
        "–û—Ä—Ç–æ–ø–µ–¥–∏—è": "–û—Ä—Ç–æ–ø–µ–¥–∏—è",
        "–û–Ω–∫–æ–ª–æ–≥–∏—è": "–û–Ω–∫–æ–ª–æ–≥–∏—è",
        "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è",
        "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è": "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è",
        "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è"
    }
    
    if message.text not in specialization_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é",
            reply_markup=get_specialization_kb()
        )
        return
    
    specialization = specialization_map[message.text]
    data = await state.get_data()
    
    success = await db.add_client(
        telegram_id=user_id,
        name=data['name'],
        client_code=data['client_code'],
        specialization=specialization,
        country=data.get('country', 'BY')
    )

    if success:
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üè• –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏: {data['client_code']}\n"
            f"üìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
        await message.answer(await get_tech_support_message())
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()

@registration_router.message(RegistrationStates.waiting_for_custom_specialization)
async def process_custom_specialization(message: Message, state: FSMContext):
    user_id = message.from_user.id
    specialization = message.text.strip()

    if len(specialization) < 2 or len(specialization) > 100:
        await message.answer(
            "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    data = await state.get_data()
    
    success = await db.add_client(
        telegram_id=user_id,
        name=data['name'],
        client_code=data['client_code'],
        specialization=specialization,
        country=data.get('country', 'BY')
    )

    if success:
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üè• –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏: {data['client_code']}\n"
            f"üìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
        await message.answer(await get_tech_support_message())
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@registration_router.message(RegistrationStates.waiting_for_region)
async def process_region(message: Message, state: FSMContext):
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_custom_region)
        return
    
    data = await state.get_data()
    
    if not message.text.startswith("üìç"):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π",
            reply_markup=get_region_kb(data.get('country', 'BY'))
        )
        return
    
    region = message.text.replace("üìç ", "")
    await state.update_data(region=region)
    await message.answer(
        f"üìç –†–µ–≥–∏–æ–Ω: {region}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_employee_last_name)
    
@registration_router.message(RegistrationStates.waiting_for_employee_last_name)
async def process_employee_last_name(message: Message, state: FSMContext):
    last_name = message.text.strip().title()  # –î–æ–±–∞–≤–ª–µ–Ω .title()

    if len(last_name) < 2 or len(last_name) > 50:
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å
    if not all(c.isalpha() or c in ['-', ' '] for c in last_name):
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(last_name=last_name)
    await message.answer(
        f"üë§ –§–∞–º–∏–ª–∏—è: {last_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_employee_first_name)

@registration_router.message(RegistrationStates.waiting_for_employee_first_name)
async def process_employee_first_name(message: Message, state: FSMContext):
    first_name = message.text.strip().title()  # –î–æ–±–∞–≤–ª–µ–Ω .title()

    if len(first_name) < 2 or len(first_name) > 50:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å
    if not all(c.isalpha() or c in ['-', ' '] for c in first_name):
        await message.answer(
            "‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª –∏ –¥–µ—Ñ–∏—Å.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    data = await state.get_data()
    await state.update_data(first_name=first_name)
    
    await message.answer(
        f"üë§ {data['last_name']} {first_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ:",
        reply_markup=get_department_function_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_department)

@registration_router.message(RegistrationStates.waiting_for_custom_region)
async def process_custom_region(message: Message, state: FSMContext):
    region = message.text.strip()

    if len(region) < 2 or len(region) > 100:
        await message.answer(
            "‚ùå –†–µ–≥–∏–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(region=region)
    await message.answer(
        f"üìç –†–µ–≥–∏–æ–Ω: {region}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_employee_last_name)

@registration_router.message(RegistrationStates.waiting_for_department)
async def process_department(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    department_map = {
        "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è": "laboratory",
        "üí∞ –ü—Ä–æ–¥–∞–∂–∏": "sales",
        "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "support"
    }

    if message.text not in department_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_department_function_kb()
        )
        return

    data = await state.get_data()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π
    success = await db.add_employee(
        telegram_id=user_id,
        first_name=data['first_name'],
        last_name=data['last_name'],
        region=data['region'],
        department_function=department_map[message.text],
        country=data['country']
    )

    if success:
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ {data['last_name']} {data['first_name']}\n"
            f"üìç –†–µ–≥–∏–æ–Ω: {data['region']}\n"
            f"üè¢ –§—É–Ω–∫—Ü–∏—è: {message.text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
        await message.answer(await get_tech_support_message())
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        if 'pending_test_code' in data:
            test_code = data['pending_test_code']
            await state.clear()
            await process_test_request(message, state, test_code, user_id)
        else:
            await state.clear()
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

async def finish_registration(message: Message, state: FSMContext, user_type: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å."""
    
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    if 'pending_test_code' in data:
        test_code = data['pending_test_code']
        print(f"[INFO] Processing pending test {test_code} after registration")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ—Å—Ç–∞
        await state.clear()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç
        await process_test_request(message, state, test_code, message.from_user.id)
    else:
        # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    await state.clear()
