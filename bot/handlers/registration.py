from aiogram import Router, html
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.database.db_init import Database
from bot.keyboards import get_cancel_kb, get_pet_type_kb, get_main_menu_kb
from config import DATABASE_PATH

registration_router = Router()
db = Database(DATABASE_PATH)

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_client_code = State()
    waiting_for_pet_name = State()
    waiting_for_pet_type = State()

@registration_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = message.from_user
    # Ensure DB schema is ready
    await db.create_tables()

    # Add or ignore basic user metadata
    await db.add_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name or "",
        language_code=user.language_code or "",
        is_bot=user.is_bot,
        chat_type=message.chat.type
    )

    # Check if fully registered (clinic user)
    exists = await db.user_exists(user.id)
    # Assuming client_code marks full registration
    user_data = await db.get_user(user.id)
    if exists and user_data['client_code']:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {html.hbold(user.full_name)}! üéâ\n"
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {user_data['client_code']}",
            reply_markup=get_main_menu_kb()
        )
        return

    # Begin full registration
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏! üè•\n"
        "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_name)
    print(f"[INFO] Registration started for user {user.id}")

@registration_router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=None
    )
    print(f"[INFO] Registration canceled for user {message.from_user.id}")

@registration_router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:\n"
        "(–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ)"
    )
    await state.set_state(RegistrationStates.waiting_for_client_code)
    print(f"[INFO] Collected name for user {message.from_user.id}: {message.text}")

@registration_router.message(RegistrationStates.waiting_for_client_code)
async def process_client_code(message: Message, state: FSMContext):
    await state.update_data(client_code=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—á–∫—É –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:")
    await state.set_state(RegistrationStates.waiting_for_pet_name)
    print(f"[INFO] Collected client_code for user {message.from_user.id}: {message.text}")

@registration_router.message(RegistrationStates.waiting_for_pet_name)
async def process_pet_name(message: Message, state: FSMContext):
    await state.update_data(pet_name=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=get_pet_type_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_pet_type)
    print(f"[INFO] Collected pet_name for user {message.from_user.id}: {message.text}")

@registration_router.message(RegistrationStates.waiting_for_pet_type)
async def process_pet_type(message: Message, state: FSMContext):
    pet_types = ["üêï –°–æ–±–∞–∫–∞", "üêà –ö–æ—à–∫–∞", "üê∞ –ö—Ä–æ–ª–∏–∫", "ü¶ú –ü—Ç–∏—Ü–∞", "üêπ –ì—Ä—ã–∑—É–Ω", "ü¶é –†–µ–ø—Ç–∏–ª–∏—è", "–î—Ä—É–≥–æ–µ"]
    if message.text not in pet_types:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    data = await state.get_data()
    success = await db.add_user(
        telegram_id=message.from_user.id,
        username=data['username'],
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name or "",
        language_code=message.from_user.language_code or "",
        is_bot=message.from_user.is_bot,
        chat_type=message.chat.type,
        client_code=data['client_code'],
        pet_name=data['pet_name'],
        pet_type=message.text
    )

    if success:
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n\n"
            f"üë§ –ò–º—è: {data['username']}\n"
            f"üÜî –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {data['client_code']}\n"
            f"üêæ –ü–∏—Ç–æ–º–µ—Ü: {data['pet_name']}\n"
            f"üìù –¢–∏–ø: {message.text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
        await db.add_request_stat(
            message.from_user.id,
            "registration",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        )
        print(f"[INFO] User {message.from_user.id} fully registered")
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=None
        )
        print(f"[ERROR] Registration failed for user {message.from_user.id}")

    await state.clear()
