import re
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import (
    get_user_type_kb, get_department_function_kb, 
    get_main_menu_kb, get_admin_menu_kb, get_specialization_kb,
    get_region_kb, get_country_kb
)

from src.database.db_init import db

registration_router = Router()

async def get_tech_support_message():
    return (
        "üõ† –¢–µ—Ö–Ω–∏—á–∫–∞ VET UNION Assistant\n\n"
        "–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º? –û–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —Å–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ?\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–µ!\n\n"
        "üìã –î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ.\n\n"
        "üéØ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø–æ–º–æ–≥–∞—é—Ç:\n\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ —É—Å—Ç—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ –£–ª—É—á—à–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞\n"
        "‚Ä¢ –î–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å —É–¥–æ–±–Ω–µ–µ –¥–ª—è –≤—Å–µ—Ö\n\n"
        "üí¨ –ö–∞–∫ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ:\n\n"
        "–£–∫–∞–∂–∏—Ç–µ:\n"
        "‚Ä¢ –í–∞—à –∑–∞–ø—Ä–æ—Å - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ - —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç\n"
        "‚Ä¢ –ö–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å - –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–ª—Å—è\n\n"
        "üë• [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–µ ‚Üí https://t.me/+FUmjohiS_VQwNDIy]\n\n"
        "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º VET UNION Assistant –ª—É—á—à–µ! ‚ö°Ô∏è"
    )

class RegistrationStates(StatesGroup):
    waiting_for_user_type = State()
    waiting_for_country = State()
    # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    waiting_for_client_code = State()
    waiting_for_client_name = State()
    waiting_for_specialization = State()
    waiting_for_custom_specialization = State()
    # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    waiting_for_region = State()
    waiting_for_custom_region = State()
    waiting_for_employee_name = State()
    waiting_for_department = State()

@registration_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"[INFO] User {user_id} initiated registration")

    await state.clear()
    user_exists = await db.user_exists(user_id)

    if user_exists:
        print(f"[INFO] User {user_id} already registered")
        user = await db.get_user(user_id)
        menu_kb = get_admin_menu_kb() if user['role'] == 'admin' else get_main_menu_kb()
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.",
            reply_markup=menu_kb
        )
    else:
        print(f"[INFO] User {user_id} starting new registration")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ VET UNION! üß™\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
            reply_markup=get_user_type_kb()
        )
        await state.set_state(RegistrationStates.waiting_for_user_type)

@registration_router.message(RegistrationStates.waiting_for_user_type)
async def process_user_type(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "üë®‚Äç‚öïÔ∏è –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á –∫–ª–∏–Ω–∏–∫–∏-–ø–∞—Ä—Ç–Ω–µ—Ä–∞":
        await state.update_data(user_type='client')
    elif message.text == "üî¨ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ VET UNION":
        await state.update_data(user_type='employee')
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_user_type_kb()
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    await message.answer(
        "üåç –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
        reply_markup=get_country_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_country)
    
@registration_router.message(RegistrationStates.waiting_for_country)
async def process_country(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    country_map = {
        "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å": "BY",
        "üá∑üá∫ –†–æ—Å—Å–∏—è": "RU",
        "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "KZ",
        "üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è": "AM"
    }
    
    if message.text not in country_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_country_kb()
        )
        return
    
    country = country_map[message.text]
    await state.update_data(country=country)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    
    if data['user_type'] == 'client':
        await message.answer(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∫–ª–∏–Ω–∏–∫–∏:\n"
            "‚ö†Ô∏è –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í+' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í+–ö–†–ê–°–ê–í–ß–ò–ö)\n"
            "üí° –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è VET UNION",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_client_code)
    else:
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        await message.answer(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ VET UNION\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=get_region_kb(country)
        )
        await state.set_state(RegistrationStates.waiting_for_region)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
@registration_router.message(RegistrationStates.waiting_for_client_code)
async def process_client_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip().upper()

    if len(code) < 3 or len(code) > 20 or not re.match(r'^[–íB]\+[–ê-–ØA-Z0-9\-]+$', code):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –∫–ª–∏–Ω–∏–∫–∏.\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω:\n"
            "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–í+'\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: –í+–ö–†–ê–°–ê–í–ß–ò–ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(client_code=code)
    await message.answer(
        f"‚úÖ –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏: {code}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_client_name)

@registration_router.message(RegistrationStates.waiting_for_client_name)
async def process_client_name(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 2 or len(name) > 50:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=name)
    await message.answer(
        f"üë§ –ò–º—è: {name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
        reply_markup=get_specialization_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_specialization)

@registration_router.message(RegistrationStates.waiting_for_specialization)
async def process_specialization(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_custom_specialization)
        return
    
    specialization_map = {
        "–ù–µ—Ñ—Ä–æ–ª–æ–≥–∏—è": "–ù–µ—Ñ—Ä–æ–ª–æ–≥–∏—è",
        "–•–∏—Ä—É—Ä–≥–∏—è": "–•–∏—Ä—É—Ä–≥–∏—è",
        "–¢–µ—Ä–∞–ø–∏—è": "–¢–µ—Ä–∞–ø–∏—è",
        "–û—Ä—Ç–æ–ø–µ–¥–∏—è": "–û—Ä—Ç–æ–ø–µ–¥–∏—è",
        "–û–Ω–∫–æ–ª–æ–≥–∏—è": "–û–Ω–∫–æ–ª–æ–≥–∏—è",
        "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è",
        "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è": "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–∏—è",
        "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è"
    }
    
    if message.text not in specialization_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é",
            reply_markup=get_specialization_kb()
        )
        return
    
    specialization = specialization_map[message.text]
    data = await state.get_data()
    
    success = await db.add_client(
        telegram_id=user_id,
        name=data['name'],
        client_code=data['client_code'],
        specialization=specialization,
        country=data.get('country', 'BY')
    )

    if success:
        await message.answer(await get_tech_support_message())
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üè• –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏: {data['client_code']}\n"
            f"üìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()

@registration_router.message(RegistrationStates.waiting_for_custom_specialization)
async def process_custom_specialization(message: Message, state: FSMContext):
    user_id = message.from_user.id
    specialization = message.text.strip()

    if len(specialization) < 2 or len(specialization) > 100:
        await message.answer(
            "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    data = await state.get_data()
    
    success = await db.add_client(
        telegram_id=user_id,
        name=data['name'],
        client_code=data['client_code'],
        specialization=specialization,
        country=data.get('country', 'BY')
    )

    if success:
        await message.answer(await get_tech_support_message())
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üè• –ö–æ–¥ –∫–ª–∏–Ω–∏–∫–∏: {data['client_code']}\n"
            f"üìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@registration_router.message(RegistrationStates.waiting_for_region)
async def process_region(message: Message, state: FSMContext):
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.waiting_for_custom_region)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if not message.text.startswith("üìç"):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π",
            reply_markup=get_region_kb(data.get('country', 'BY'))
        )
        return
    
    region = message.text.replace("üìç ", "")
    await state.update_data(region=region)
    await message.answer(
        f"üìç –†–µ–≥–∏–æ–Ω: {region}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_employee_name)

@registration_router.message(RegistrationStates.waiting_for_custom_region)
async def process_custom_region(message: Message, state: FSMContext):
    region = message.text.strip()

    if len(region) < 2 or len(region) > 100:
        await message.answer(
            "‚ùå –†–µ–≥–∏–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(region=region)
    await message.answer(
        f"üìç –†–µ–≥–∏–æ–Ω: {region}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(RegistrationStates.waiting_for_employee_name)

@registration_router.message(RegistrationStates.waiting_for_employee_name)
async def process_employee_name(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 3 or len(name) > 100:
        await message.answer(
            "‚ùå –§–∞–º–∏–ª–∏—è –∏ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=name)
    await message.answer(
        f"üë§ {name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—Å–ø–æ–ª–Ω—è–µ—Ç–µ:",
        reply_markup=get_department_function_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_department)

@registration_router.message(RegistrationStates.waiting_for_department)
async def process_department(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    department_map = {
        "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è": "laboratory",
        "üí∞ –ü—Ä–æ–¥–∞–∂–∏": "sales",
        "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "support"
    }

    if message.text not in department_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_department_function_kb()
        )
        return

    data = await state.get_data()
    
    success = await db.add_employee(
        telegram_id=user_id,
        name=data['name'],
        region=data['region'],
        department_function=department_map[message.text],
        country=data['country']
    )

    if success:
        await message.answer(await get_tech_support_message())
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ {data['name']}\n"
            f"üìç –†–µ–≥–∏–æ–Ω: {data['region']}\n"
            f"üè¢ –§—É–Ω–∫—Ü–∏—è: {message.text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_kb()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()
