# response_ratings.py
import random
import logging
from typing import Dict, Optional, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ResponseRatingManager:
    def __init__(self, db):
        self.feedback_group_link = "https://t.me/+toGEaZZZCYthZGFi"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        self.feedback_group_id = -1001234567890  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
        self.db = db
        self._user_cooldown = {}  # –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ü–µ–Ω–∫–∏
        self._last_rating_request = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    async def should_ask_for_rating(self, user_id: int, response_type: str) -> Tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É"""
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        valid_types = {'general', 'name_search'}
        if response_type not in valid_types:
            logger.info(f"[RATING] Skipping rating for response type: {response_type}")
            return False, ""
        
        current_time = datetime.now()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ü–µ–Ω–∫–∏ (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
        cooldown_key = f"{user_id}_{response_type}"
        if cooldown_key in self._user_cooldown:
            if current_time < self._user_cooldown[cooldown_key]:
                logger.info(f"[RATING] User {user_id} in cooldown for {response_type}")
                return False, ""
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —á–∞—Å–∞)
        last_request_key = f"{user_id}_last_request"
        if last_request_key in self._last_rating_request:
            time_since_last = current_time - self._last_rating_request[last_request_key]
            if time_since_last < timedelta(hours=2):
                logger.info(f"[RATING] User {user_id} was asked recently, skipping")
                return False, ""
        
        # 3. 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –æ—Ü–µ–Ω–∫–∏
        rnd = random.random()
        logger.info(f"[RATING] Probability check for user {user_id}: {rnd:.2f}")
        
        if rnd > 0.3:  # 70% —Å–ª—É—á–∞–µ–≤ –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            logger.info(f"[RATING] Skipping rating by probability for user {user_id}")
            # –°—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 1 —á–∞—Å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
            self._user_cooldown[cooldown_key] = current_time + timedelta(hours=0.05)
            return False, ""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        rating_id = f"{user_id}_{int(current_time.timestamp())}"
        
        logger.info(f"[RATING] Will ask for rating from user {user_id}, id: {rating_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self._last_rating_request[last_request_key] = current_time
        # –°—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 4 —á–∞—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
        self._user_cooldown[cooldown_key] = current_time + timedelta(hours=0.05)
            
        return True, rating_id
    
    def create_rating_keyboard(self, rating_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏ 1-5"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="1 ‚≠ê", callback_data=f"rating:{rating_id}:1"),
                    InlineKeyboardButton(text="2 ‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:2"),
                    InlineKeyboardButton(text="3 ‚≠ê‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:3"),
                ],
                [
                    InlineKeyboardButton(text="4 ‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:4"),
                    InlineKeyboardButton(text="5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:5"),
                ]
            ]
        )
    
    def create_feedback_group_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí¨ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ", 
                        url=self.feedback_group_link
                    )
                ]
            ]
        )
    
    async def save_rating(self, user_id: int, rating_id: str, rating: int, 
                         question: str = "", response: str = ""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.db.save_response_rating(
                user_id=user_id,
                chat_history_id=rating_id,
                rating=rating,
                question=question,
                response=response,
                timestamp=datetime.now()
            )
            logger.info(f"[RATING] Saved rating {rating} from user {user_id}")
            
            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
            for key in list(self._user_cooldown.keys()):
                if key.startswith(f"{user_id}_"):
                    del self._user_cooldown[key]
                    
        except Exception as e:
            logger.error(f"[RATING] Failed to save rating: {e}")
    
    def prepare_rating_message(self, user_id: int, rating: int, question: str, 
                             response: str, user_name: str = "") -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
        rating_stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        question_preview = question[:200] + "..." if len(question) > 200 else question
        response_preview = response[:300] + "..." if len(response) > 300 else response
        
        message = (
            "üìä <b>–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {user_id})\n"
            f"üìà <b>–û—Ü–µ–Ω–∫–∞:</b> {rating}/5 {rating_stars}\n"
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question_preview}\n"
            f"üí¨ <b>–û—Ç–≤–µ—Ç:</b> {response_preview}"
        )
        
        return message
    
    def clear_user_cooldown(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)"""
        for key in list(self._user_cooldown.keys()):
            if key.startswith(f"{user_id}_"):
                del self._user_cooldown[key]
        for key in list(self._last_rating_request.keys()):
            if key.startswith(f"{user_id}_"):
                del self._last_rating_request[key]
    
    @property
    def group_id(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        return self.feedback_group_id