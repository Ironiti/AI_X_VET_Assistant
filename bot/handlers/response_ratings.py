# response_ratings.py
import random
import logging
import html
from typing import Dict, Optional, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext


logger = logging.getLogger(__name__)

class ResponseRatingManager:
    def __init__(self, db):
        # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –í–ê–®–ï–ô –ì–†–£–ü–ü–´
        self.feedback_group_link = "https://t.me/+EsE7kilfJsk1ODZi" 
        self.feedback_group_id = -1002889617610  
        self.db = db
        self._user_cooldown = {}
        self._last_rating_request = {}


    async def send_rating_to_group(self, bot, user_id: int, rating: int, question: str, 
                                response: str, user_name: str = "", comment: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ü–õ–û–•–£–Æ –æ—Ü–µ–Ω–∫—É (1-3) –≤ –≥—Ä—É–ø–ø—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–ª–æ—Ö–∞—è –æ—Ü–µ–Ω–∫–∞
            if rating > 3:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –±–æ—Ç–∞ –∫ –≥—Ä—É–ø–ø–µ
            try:
                chat_member = await bot.get_chat_member(
                    chat_id=self.feedback_group_id,
                    user_id=(await bot.get_me()).id
                )
                
                if chat_member.status not in ["administrator", "creator"]:
                    logger.error("[RATING] Bot is not admin in the group")
                    return False

                    
            except Exception as e:
                logger.error(f"[RATING] Bot access check failed: {e}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            rating_stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
            
            # –ü–û–õ–ù–û–°–¢–¨–Æ –£–ë–ò–†–ê–ï–ú HTML-–¢–ï–ì–ò
            clean_question = self.clean_html_text(question)
            clean_response = self.clean_html_text(response)
            clean_comment = self.clean_html_text(comment) if comment else ""
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–æ —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã
            question_preview = clean_question[:500] + "..." if len(clean_question) > 500 else clean_question
            response_preview = clean_response[:800] + "..." if len(clean_response) > 800 else clean_response
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ HTML
            message = (
                "üö® –ù–ò–ó–ö–ê–Ø –û–¶–ï–ù–ö–ê –û–¢–í–ï–¢–ê\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {user_id})\n"
                f"üìâ –û—Ü–µ–Ω–∫–∞: {rating}/5 {rating_stars}\n\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question_preview}\n\n"
                f"üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n{response_preview}"
            )
            
            if clean_comment:
                comment_preview = clean_comment[:500] + "..." if len(clean_comment) > 500 else clean_comment
                message += f"\n\nüí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{comment_preview}"
            else:
                message += f"\n\nüí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω"
            
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ë–ï–ó parse_mode=HTML
            await bot.send_message(
                chat_id=self.feedback_group_id,
                text=message,
                parse_mode=None,  # –ë–µ–∑ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
                disable_web_page_preview=True,
            )
            
            logger.info(f"[RATING] Low rating {rating} from user {user_id} sent to group")
            return True
            
        except Exception as e:
            logger.error(f"[RATING] Failed to send rating to group: {e}")
            return False

    def clean_html_text(self, text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç HTML-—Ç–µ–≥–∏ –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        import re
        
        if not text:
            return ""
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–µ–≥–æ–≤
        text = text.replace('\n', '___NEWLINE___')
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ HTML-—Ç–µ–≥–∏
        clean_text = re.sub(r'<[^>]+>', '', text)
        
        # –ó–∞–º–µ–Ω—è–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
        clean_text = clean_text.replace('&nbsp;', ' ')
        clean_text = clean_text.replace('&amp;', '&')
        clean_text = clean_text.replace('&lt;', '<')
        clean_text = clean_text.replace('&gt;', '>')
        clean_text = clean_text.replace('&quot;', '"')
        clean_text = clean_text.replace('&#39;', "'")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        clean_text = clean_text.replace('___NEWLINE___', '\n')
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã)
        clean_text = re.sub(r'[ \t]+', ' ', clean_text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã
        clean_text = re.sub(r' *\n *', '\n', clean_text)  # –ü—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        clean_text = clean_text.strip()
        
        return clean_text

    async def should_ask_for_rating(self, user_id: int, response_type: str, state: FSMContext = None) -> Tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É"""
        
        # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        valid_types = {'general', 'name_search'}
        if response_type not in valid_types:
            logger.info(f"[RATING] Skipping rating for response type: {response_type}")
            return False, ""
        
        current_time = datetime.now()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ü–µ–Ω–∫–∏ (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
        cooldown_key = f"{user_id}_{response_type}"
        if cooldown_key in self._user_cooldown:
            if current_time < self._user_cooldown[cooldown_key]:
                logger.info(f"[RATING] User {user_id} in cooldown for {response_type}")
                return False, ""
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —á–∞—Å–∞)
        last_request_key = f"{user_id}_last_request"
        if last_request_key in self._last_rating_request:
            time_since_last = current_time - self._last_rating_request[last_request_key]
            if time_since_last < timedelta(seconds=0):
                logger.info(f"[RATING] User {user_id} was asked recently, skipping")
                return False, ""
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º/—É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–∞
        requires_classification_confirmation = False
        if state:
            try:
                data = await state.get_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                requires_confirmation = data.get('requires_confirmation', False)
                requires_clarification = data.get('requires_clarification', False)
                
                # –ï—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ - —ç—Ç–æ 100% —Å–ª—É—á–∞–π
                requires_classification_confirmation = requires_confirmation or requires_clarification
                
                logger.info(f"[RATING] Classification confirmation required: {requires_classification_confirmation} "
                        f"(confirmation: {requires_confirmation}, clarification: {requires_clarification})")
                
            except Exception as e:
                logger.error(f"[RATING] Error checking classification flags: {e}")
        
        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –æ—Ü–µ–Ω–∫–∏
        if requires_classification_confirmation:
            # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º/—É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–∞ - –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É (100%)
            should_ask = True
            logger.info(f"[RATING] Always asking for classification confirmation from user {user_id}")
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            rnd = random.random()
            should_ask = rnd <= 0.3
            logger.info(f"[RATING] Probability check for user {user_id}: {rnd:.2f}, should_ask: {should_ask}")
        
        if not should_ask:
            logger.info(f"[RATING] Skipping rating by probability/logic for user {user_id}")
            # –°—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 1 —á–∞—Å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
            self._user_cooldown[cooldown_key] = current_time + timedelta(seconds=0)
            return False, ""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        rating_id = f"{user_id}_{int(current_time.timestamp())}"
        
        logger.info(f"[RATING] Will ask for rating from user {user_id}, id: {rating_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self._last_rating_request[last_request_key] = current_time
        # –°—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 4 —á–∞—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞
        self._user_cooldown[cooldown_key] = current_time + timedelta(seconds=0)
            
        return True, rating_id

    def create_rating_keyboard(self, rating_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏ 1-5"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="1 ‚≠ê", callback_data=f"rating:{rating_id}:1"),
                    InlineKeyboardButton(text="2 ‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:2"),
                    InlineKeyboardButton(text="3 ‚≠ê‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:3"),
                ],
                [
                    InlineKeyboardButton(text="4 ‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:4"),
                    InlineKeyboardButton(text="5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rating:{rating_id}:5"),
                ]
            ]
        )
    
    async def save_rating(self, user_id: int, rating_id: str, rating: int, 
                         question: str = "", response: str = ""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.db.save_response_rating(
                user_id=user_id,
                chat_history_id=rating_id,
                rating=rating,
                question=question,
                response=response,
                timestamp=datetime.now()
            )
            logger.info(f"[RATING] Saved rating {rating} from user {user_id}")
            
            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for key in list(self._user_cooldown.keys()):
                if key.startswith(f"{user_id}_"):
                    del self._user_cooldown[key]
                    
        except Exception as e:
            logger.error(f"[RATING] Failed to save rating: {e}")
    
    def prepare_rating_message(self, user_id: int, rating: int, question: str, 
                             response: str, user_name: str = "") -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
        rating_stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        question_preview = question[:200] + "..." if len(question) > 200 else question
        response_preview = response[:300] + "..." if len(response) > 300 else response
        
        message = (
            "üìä <b>–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {user_id})\n"
            f"üìà <b>–û—Ü–µ–Ω–∫–∞:</b> {rating}/5 {rating_stars}\n"
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question_preview}\n"
            f"üí¨ <b>–û—Ç–≤–µ—Ç:</b> {response_preview}"
        )
        
        return message
    
    def clear_user_cooldown(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)"""
        for key in list(self._user_cooldown.keys()):
            if key.startswith(f"{user_id}_"):
                del self._user_cooldown[key]
        for key in list(self._last_rating_request.keys()):
            if key.startswith(f"{user_id}_"):
                del self._last_rating_request[key]
    
    @property
    def group_id(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        return self.feedback_group_id