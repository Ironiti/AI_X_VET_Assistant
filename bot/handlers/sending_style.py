from aiogram.types import Message
from langchain.schema import Document
import pytz
import asyncio
import html
import re
from typing import Dict, List, Tuple
from datetime import datetime
from src.database.db_init import db
from bot.handlers.utils import create_test_link, is_profile_test

BOT_USERNAME = "AL_VET_UNION_BOT"

async def get_test_container_photos(test_data: Dict) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    photos = []
    container_types = []
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ë–ê –ø–æ–ª—è
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º primary_container_type (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    primary_container = str(test_data.get("primary_container_type", "")).strip()
    if primary_container and primary_container.lower() not in ["–Ω–µ —É–∫–∞–∑–∞–Ω", "–Ω–µ—Ç", "-", "", "none", "null"]:
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        primary_container = primary_container.replace('"', "").replace("\n", " ")
        primary_container = " ".join(primary_container.split())
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ *I* –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        if "*I*" in primary_container:
            container_types.extend([ct.strip() for ct in primary_container.split("*I*")])
        else:
            container_types.append(primary_container)
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π container_type
    container_type_raw = str(test_data.get("container_type", "")).strip()
    if container_type_raw and container_type_raw.lower() not in ["–Ω–µ —É–∫–∞–∑–∞–Ω", "–Ω–µ—Ç", "-", "", "none", "null"]:
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        container_type_raw = container_type_raw.replace('"', "").replace("\n", " ")
        container_type_raw = " ".join(container_type_raw.split())
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ *I* –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        if "*I*" in container_type_raw:
            new_types = [ct.strip() for ct in container_type_raw.split("*I*")]
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
            for ct in new_types:
                if ct not in container_types:
                    container_types.append(ct)
        else:
            if container_type_raw not in container_types:
                container_types.append(container_type_raw)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    for ct in container_types:
        if ct:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø
            ct_normalized = " ".join(word.capitalize() for word in ct.split())
            photo_data = await db.get_container_photo(ct_normalized)
            if photo_data:
                photos.append(
                    {
                        "type": ct_normalized,
                        "file_id": photo_data["file_id"],
                        "description": photo_data.get("description"),
                    }
                )
    
    return photos


def format_similar_tests_text(
    similar_tests: List[Tuple[Document, float]], max_display: int = 5
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ—Å—Ç–∞—Ö."""
    if not similar_tests:
        return ""

    text = "\n<b>üìã –ü–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã:</b>\n"
    for doc, score in similar_tests[:max_display]:
        test_code = doc.metadata.get("test_code", "")
        test_name = doc.metadata.get("test_name", "")
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(test_name) > 50:
            test_name = test_name[:47] + "..."
        text += f"‚Ä¢ <code>{test_code}</code> - {test_name}\n"

    if len(similar_tests) > max_display:
        text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã {max_display} –∏–∑ {len(similar_tests)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö</i>"

    return text


def format_similar_tests_with_links(
    similar_tests: List[Tuple[Document, float]], 
    max_display: int = 5
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    if not similar_tests:
        return ""
    
    response = "\n\nüîç <b>–ü–æ—Ö–æ–∂–∏–µ —Ç–µ—Å—Ç—ã:</b>\n"
    
    for i, (doc, score) in enumerate(similar_tests[:max_display], 1):
        test_code = doc.metadata.get("test_code", "")
        test_name = html.escape(doc.metadata.get("test_name", ""))[:50]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
        type_label = "üî¨" if is_profile_test(test_code) else "üß™"
        
        link = create_test_link(test_code)
        response += f"{i}. {type_label} <a href='{link}'>{test_code}</a> - {test_name}...\n"
    
    return response


def get_time_based_farewell(user_name: str = None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    tz = pytz.timezone("Europe/Minsk")
    current_hour = datetime.now(tz).hour

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    name_part = f", {user_name}" if user_name and user_name != "–¥—Ä—É–≥" else ""

    if 4 <= current_hour < 12:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ —É—Ç—Ä–∞ ‚òÄÔ∏è"
    elif 12 <= current_hour < 17:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ü§ù"
    elif 17 <= current_hour < 22:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞ üåÜ"
    else:
        return f"–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å{name_part}! –î–æ–±—Ä–æ–π –Ω–æ—á–∏ üåô"


def get_user_first_name(user):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if not user:
        return "–¥—Ä—É–≥"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ sqlite3.Row –∏–ª–∏ dict
    try:
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å (–¥–ª—è dict)
        user_type = user.get("user_type") if hasattr(user, "get") else user["user_type"]
    except (KeyError, TypeError):
        return "–¥—Ä—É–≥"

    if user_type == "employee":
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º first_name
        try:
            first_name = (
                user.get("first_name") if hasattr(user, "get") else user["first_name"]
            )
            if first_name:
                return first_name
        except (KeyError, TypeError):
            pass

        # Fallback –Ω–∞ —Ä–∞–∑–±–æ—Ä –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        try:
            name = user.get("name") if hasattr(user, "get") else user["name"]
            if name:
                parts = name.strip().split()
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–§–∞–º–∏–ª–∏—è –ò–º—è" –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                return parts[1] if len(parts) > 1 else parts[0]
        except (KeyError, TypeError):
            pass
    else:
        # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ name
        try:
            name = user.get("name") if hasattr(user, "get") else user["name"]
            if name:
                parts = name.strip().split()
                return parts[0]
        except (KeyError, TypeError):
            pass

    return "–¥—Ä—É–≥"


def format_test_data(metadata: Dict) -> Dict:
    """Extract and format test metadata into standardized dictionary."""
    return {
        "type": metadata.get("type"),
        "test_code": metadata.get("test_code"),
        "test_name": metadata.get("test_name"),
        "department": metadata.get("department"),
        "important_information": metadata.get("important_information"),
        "patient_preparation": metadata.get("patient_preparation"),
        "biomaterial_type": metadata.get("biomaterial_type"),
        "primary_container_type": metadata.get("primary_container_type"),
        "container_type": metadata.get("container_type"),
        "container_number": metadata.get("container_number"),
        "preanalytics": re.sub(
            r"\s*(\d+\.)\s*", r"\n\t\t\1 ", metadata.get("preanalytics")
        ),
        "storage_temp": metadata.get("storage_temp"),
        "poss_postorder_container": metadata.get("poss_postorder_container"),
        "form_link": metadata.get("form_link"),
        "additional_information_link": metadata.get("additional_information_link"),
    }


def format_test_info_brief(test_data: Dict) -> str:
    """Format brief test information for initial search results."""
    t_type = "–¢–µ—Å—Ç" if test_data["type"] == "–¢–µ—Å—Ç—ã" else "–ü—Ä–æ—Ñ–∏–ª—å"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    test_name = html.escape(test_data.get("test_name"))
    department = html.escape(test_data.get("department"))

    return emoji_manager.format_message(
        f"test_name <b>{t_type}: {test_data['test_code']} - {test_name}</b>\n\n"
    ) + emoji_manager.format_message(
        f"üß¨department <b>–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b> {department}\n"
    )


def format_test_info(test_data: Dict) -> str:
    t_type = "–¢–µ—Å—Ç" if test_data.get("type") == "–¢–µ—Å—Ç—ã" else "–ü—Ä–æ—Ñ–∏–ª—å"

    field_templates = {
        "department": ("üß¨department", "–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"),
        "important_information": ("‚ùóÔ∏èimportant_information", "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        "patient_preparation": (
            "üìùpatient_preparation",
            "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ",
        ),
        "biomaterial_type": ("üß´biomaterial_type", "–ò—Å—Å–ª–µ–¥—É–µ–º—ã–π –±–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª"),
        "primary_container_type": (
            "üß∞primary_container_type",
            "–¢–∏–ø –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
        ),
        "container_type": (
            "üß™container_type",
            "–¢–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        ),
        "container_number": (
            "üî¢container_number",
            "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
        ),
        "preanalytics": ("üìãpreanalytics", "–ü—Ä–µ–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"),
        "storage_temp": ("‚ùÑÔ∏èstorage_temp", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"),
        "poss_postorder_container": (
            "‚è±Ô∏èposs_postorder_container",
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∑–∞–∫–∞–∑–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∑—è—Ç–∏—è –±–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        ),
        "form_link": ("üìÉform_link", "–°—Å—ã–ª–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–ª–∞–Ω–∫–∞"),
        "additional_information_link": (
            "üìíadditional_information_link",
            "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        ),
    }

    message_parts = [
        emoji_manager.format_message(
            f"test_name <b>{t_type}: {test_data['test_code']} - {test_data['test_name']}</b>\n\n"
        )
    ]

    # Process other fields
    for field, (emoji, display_name) in field_templates.items():
        if value := test_data.get(field):
            escaped_value = html.escape(str(value))
            message_parts.append(
                emoji_manager.format_message(
                    f"{emoji} <b>{display_name}:</b> {escaped_value}\n"
                )
            )

    return "".join(message_parts)


async def animate_loading(loading_msg: Message):
    """Animate loading message (edit text, not caption)."""
    animations = [
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ VetUnion...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
    ]
    i = 0
    try:
        while True:
            await asyncio.sleep(2)
            i = (i + 1) % len(animations)
            await loading_msg.edit_text(animations[i])
    except (asyncio.CancelledError, Exception):
        pass


class CustomEmojiManager:
    def __init__(self):
        self.emoji_ids = {
            "test_name": "5328315072840234225",
            "department": "5328315072840234225",
            "patient_preparation": "5328176289562004639",
            "biomaterial_type": "5327846616462291750",
            "primary_container_type": "5328063361986887821",
            "container_type": "5325856719459357092",
            "container_number": "5327851985171417222",
            "preanalytics": "5325585891706569447",
            "storage_temp": "5327963091680397149",
            "poss_postorder_container": "5327925321737995698",
            "form_link": "5327966179761881250",
            "additional_information_link": "5328169834226158945",
        }

    def format_message(self, text: str) -> str:
        for key in self.emoji_ids.keys():
            if key in text:
                emoji_html = f'<tg-emoji emoji-id="{self.emoji_ids[key]}"></tg-emoji>'
                text = text.replace(f"{key}", emoji_html)
        return text


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
emoji_manager = CustomEmojiManager()
