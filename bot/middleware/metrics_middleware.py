"""
Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""
import time
import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject
from datetime import datetime

from src.database.db_init import db

logger = logging.getLogger(__name__)


class MetricsMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —Ç–∞–∫ –∏ —Å callback queries
    """
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user_id = None
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ user_id - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not user_id:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
        try:
            user = await db.get_user(user_id)
            if user and user.get('role') == 'admin':
                # –ê–¥–º–∏–Ω—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
                return await handler(event, data)
        except Exception as e:
            logger.error(f"[METRICS] Failed to check user role: {e}")
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è DAU –∏ —Å–µ—Å—Å–∏–π)
        # –í–ê–ñ–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ù–ï –†–ê–í–ù–û –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é –≤ request_metrics!
        # - track_user_activity: –æ–±–Ω–æ–≤–ª—è–µ—Ç user_activity (–¥–ª—è DAU)
        # - update_session_activity: –æ–±–Ω–æ–≤–ª—è–µ—Ç user_sessions (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π)
        # - log_request_metric: –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã (–¢–û–õ–¨–ö–û –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        try:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –í–°–ï–• –¥–µ–π—Å—Ç–≤–∏–π (–≤–∫–ª—é—á–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é)
            await db.track_user_activity(user_id)
            await db.update_session_activity(user_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            event_type = "message" if isinstance(event, Message) else "callback"
            logger.debug(f"[METRICS] Tracked {event_type} activity for user {user_id}")
        except Exception as e:
            logger.error(f"[METRICS] Failed to track activity: {e}")
        
        # –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ request_metrics –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        # –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤: code_search, name_search, general
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ù–ï –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ request_metrics
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ —Å–∞–º–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö)
        return await handler(event, data)
    
    def _determine_request_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        if not text:
            return "unknown"
        
        text_lower = text.lower()
        text_stripped = text.strip()
        
        import re
        
        # 1. –ö–æ–º–∞–Ω–¥—ã (–ù–ï –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –º–µ—Ç—Ä–∏–∫–∏)
        if text_stripped.startswith('/'):
            return "command"
        
        # 2. –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ (–ª–æ–≥–∏—Ä—É—é—Ç—Å—è –Ω–æ –∫–∞–∫ navigation)
        emoji_buttons = [
            "üî¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
            "üñº –ì–∞–ª–µ—Ä–µ—è –ø—Ä–æ–±–∏—Ä–æ–∫ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", "üìÑ –°—Å—ã–ª–∫–∏ –Ω–∞ –±–ª–∞–Ω–∫–∏",
            "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        ]
        
        for btn in emoji_buttons:
            if text == btn or text_stripped == btn:
                return "navigation"
        
        # 3. –ö–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å —ç–º–æ–¥–∑–∏ —Å—Ç—Ä–∞–Ω/–ø—Ä–æ—Ñ–µ—Å—Å–∏–π)
        registration_patterns = [
            r'^üá∑üá∫\s*–†–æ—Å—Å–∏—è$',
            r'^üáßüáæ\s*–ë–µ–ª–∞—Ä—É—Å—å$',
            r'^üá∞üáø\s*–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω$',
            r'^üá¶üá≤\s*–ê—Ä–º–µ–Ω–∏—è$',
            r'^üìç\s*.+$',  # –ì–æ—Ä–æ–¥ —Å —ç–º–æ–¥–∑–∏
            r'^üèô\s*.+$',  # –†–µ–≥–∏–æ–Ω —Å —ç–º–æ–¥–∑–∏
            r'^üî¨\s*–°–æ—Ç—Ä—É–¥–Ω–∏–∫ X-LAB VET$',
            r'^üè•\s*–ö–ª–∏–µ–Ω—Ç X-LAB VET$'
        ]
        
        for pattern in registration_patterns:
            if re.match(pattern, text, re.IGNORECASE):
                return "navigation"
        
        # 4. –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ, –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞)
        if len(text_stripped.split()) == 1 and len(text_stripped) < 20:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞
            if not re.match(r'^[A–ê][N–ù]?\d+', text, re.IGNORECASE) and not re.match(r'^\d+', text):
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –∏ –Ω–µ –≤—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ - –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–º—è
                if text_stripped[0].isupper() and not text_stripped.isupper():
                    return "navigation"
        
        # 5. –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Ç–µ—Å—Ç–∞ (–í–ê–õ–ò–î–ù–´–ô –∑–∞–ø—Ä–æ—Å)
        if re.match(r'^[A–ê][N–ù]?\d+[A-Z–ê-–Ø]*$', text, re.IGNORECASE):
            return "code_search"
        
        if re.match(r'^\d{2,4}[A-Z–ê-–Ø]*$', text, re.IGNORECASE):
            return "code_search"
        
        # 6. –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–í–ê–õ–ò–î–ù–´–ô –∑–∞–ø—Ä–æ—Å)
        question_starters = ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–æ–π', '–º–æ–∂–Ω–æ –ª–∏', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '—Å–∫–∞–∂–∏—Ç–µ']
        if any(text_lower.startswith(q) for q in question_starters) or text.endswith('?'):
            return "general"
        
        # 7. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–í–ê–õ–ò–î–ù–´–ô –∑–∞–ø—Ä–æ—Å)
        # –í—Å–µ —á—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –Ω–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–µ –∫–æ–¥ - —ç—Ç–æ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        # –ü—Ä–∏–º–µ—Ä—ã: "–¶–∏—Ç–æ–ª–æ–≥–∏—è", "—Ñ—Ä—É–∫—Ç–æ–∑–∞–º–∏–Ω", "–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏"
        return "name_search"


class DailyMetricsUpdater:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    """
    
    def __init__(self):
        self.last_update = datetime.now().date()
    
    async def update_if_needed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
        today = datetime.now().date()
        
        if today > self.last_update:
            try:
                await db.update_daily_metrics()
                await db.update_quality_metrics()
                await db.update_system_metrics()
                
                self.last_update = today
                logger.info(f"[METRICS] Daily metrics updated for {today}")
            except Exception as e:
                logger.error(f"[METRICS] Failed to update daily metrics: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
daily_updater = DailyMetricsUpdater()