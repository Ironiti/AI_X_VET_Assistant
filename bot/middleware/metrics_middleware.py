"""
Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""
import time
import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, TelegramObject
from datetime import datetime

from src.database.db_init import db

logger = logging.getLogger(__name__)


class MetricsMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç—Ä–∏–∫
    """
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
        """
        # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if not isinstance(event, Message):
            return await handler(event, data)
        
        message: Message = event
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
        try:
            user = await db.get_user(user_id)
            if user and user.get('role') == 'admin':
                # –ê–¥–º–∏–Ω—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
                return await handler(event, data)
        except Exception as e:
            logger.error(f"[METRICS] Failed to check user role: {e}")
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time = time.time()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await db.track_user_activity(user_id)
            await db.update_session_activity(user_id)
        except Exception as e:
            logger.error(f"[METRICS] Failed to track activity: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        try:
            result = await handler(event, data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_time = time.time() - start_time
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            request_type = self._determine_request_type(message.text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É
            try:
                await db.log_request_metric(
                    user_id=user_id,
                    request_type=request_type,
                    query_text=message.text[:500] if message.text else "",
                    response_time=response_time,
                    success=True,
                    has_answer=True
                )
            except Exception as e:
                logger.error(f"[METRICS] Failed to log request metric: {e}")
            
            return result
            
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ª–æ–≥–∏—Ä—É–µ–º
            response_time = time.time() - start_time
            
            try:
                await db.log_request_metric(
                    user_id=user_id,
                    request_type="error",
                    query_text=message.text[:500] if message.text else "",
                    response_time=response_time,
                    success=False,
                    has_answer=False,
                    error_message=str(e)[:200]
                )
            except Exception as log_error:
                logger.error(f"[METRICS] Failed to log error metric: {log_error}")
            
            raise
    
    def _determine_request_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        if not text:
            return "unknown"
        
        text_lower = text.lower()
        
        # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if text in ["üî¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]:
            return "navigation"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–¥ —Ç–µ—Å—Ç–∞
        import re
        if re.match(r'^[A–ê][N–ù]?\d+', text, re.IGNORECASE):
            return "code_search"
        
        if re.match(r'^\d{2,4}[A-Z–ê-–Ø]*', text, re.IGNORECASE):
            return "code_search"
        
        # –í–æ–ø—Ä–æ—Å—ã
        question_starters = ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–æ–π', '–º–æ–∂–Ω–æ –ª–∏']
        if any(text_lower.startswith(q) for q in question_starters) or text.endswith('?'):
            return "general"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        return "name_search"


class DailyMetricsUpdater:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    """
    
    def __init__(self):
        self.last_update = datetime.now().date()
    
    async def update_if_needed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
        today = datetime.now().date()
        
        if today > self.last_update:
            try:
                await db.update_daily_metrics()
                await db.update_quality_metrics()
                await db.update_system_metrics()
                
                self.last_update = today
                logger.info(f"[METRICS] Daily metrics updated for {today}")
            except Exception as e:
                logger.error(f"[METRICS] Failed to update daily metrics: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
daily_updater = DailyMetricsUpdater()