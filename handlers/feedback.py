from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database
from keyboards.reply import get_cancel_kb, get_menu_by_role, get_phone_kb, get_feedback_type_kb
from utils.email_sender import send_callback_email, send_feedback_email
from config import DATABASE_PATH
import re

router = Router()
db = Database(DATABASE_PATH)

class CallbackStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_message = State()

class FeedbackStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_message = State()

def format_phone_number(phone: str, country: str = 'RU'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã"""
    digits = re.sub(r'\D', '', phone)
    
    if country == 'BY':  # –ë–µ–ª–∞—Ä—É—Å—å
        if len(digits) == 9:
            digits = '375' + digits
        elif len(digits) == 11 and digits.startswith('80'):
            digits = '375' + digits[2:]
        
        if digits.startswith('375'):
            return f"+{digits[:3]} ({digits[3:5]}) {digits[5:8]}-{digits[8:10]}-{digits[10:12]}"
    
    else:  # –†–æ—Å—Å–∏—è –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
        if len(digits) == 10:
            digits = '7' + digits
        elif len(digits) == 11 and digits.startswith('8'):
            digits = '7' + digits[1:]
        
        if digits.startswith('7'):
            return f"+{digits[0]} ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    
    return '+' + digits

def validate_phone_number(phone: str, country: str = 'RU'):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã"""
    digits = re.sub(r'\D', '', phone)
    
    if country == 'BY':  # –ë–µ–ª–∞—Ä—É—Å—å
        if re.match(r'^(375|80)?\d{9}$', digits):
            return True
    else:  # –†–æ—Å—Å–∏—è –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
        if re.match(r'^[78]?\d{10}$', digits):
            return True
    
    return False

@router.message(F.text == "üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def request_callback(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    # –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫
    if user['role'] == 'staff':
        await message.answer(
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            reply_markup=get_menu_by_role(user['role'])
        )
        return
    
    country = user['country'] if user['country'] else 'RU'
    country_name = {
        'RU': '–†–æ—Å—Å–∏—è',
        'BY': '–ë–µ–ª–∞—Ä—É—Å—å', 
        'KZ': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'
    }.get(country, '–†–æ—Å—Å–∏—è')
    
    phone_format = {
        'RU': '+7 (XXX) XXX-XX-XX',
        'BY': '+375 (XX) XXX-XX-XX',
        'KZ': '+7 (XXX) XXX-XX-XX'
    }.get(country, '+7 (XXX) XXX-XX-XX')
    
    await message.answer(
        f"üìû –ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞\n"
        f"üåç –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: {country_name}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.\n"
        f"–§–æ—Ä–º–∞—Ç: {phone_format}",
        reply_markup=get_phone_kb()
    )
    await state.set_state(CallbackStates.waiting_for_phone)
    await state.update_data(user_country=country)

@router.message(CallbackStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user(message.from_user.id)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
            reply_markup=get_menu_by_role(user['role'])
        )
        return
        
    data = await state.get_data()
    country = data.get('user_country', 'RU')
    phone = ""
    
    if message.contact:
        phone = message.contact.phone_number
        if not phone.startswith('+'):
            phone = '+' + phone
    else:
        phone = message.text
        
        if not validate_phone_number(phone, country):
            phone_example = {
                'RU': '+7 (912) 345-67-89 –∏–ª–∏ 89123456789',
                'BY': '+375 (29) 123-45-67 –∏–ª–∏ 80291234567',
                'KZ': '+7 (701) 234-56-78 –∏–ª–∏ 87012345678'
            }.get(country, '+7 (XXX) XXX-XX-XX')
            
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"{phone_example}",
                reply_markup=get_phone_kb()
            )
            return
        
        phone = format_phone_number(phone, country)
    
    await state.update_data(phone=phone)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(CallbackStates.waiting_for_message)

@router.message(CallbackStates.waiting_for_message)
async def process_callback_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user(message.from_user.id)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
            reply_markup=get_menu_by_role(user['role'])
        )
        return
        
    data = await state.get_data()
    phone = data.get('phone')
    
    user = await db.get_user(message.from_user.id)
    
    user_data = {
        'telegram_id': user['telegram_id'],
        'username': user['username'],
        'client_code': user['client_code'],
        'pet_name': user['pet_name'],
        'pet_type': user['pet_type'],
        'country': user['country'] if user['country'] else 'RU'
    }
    
    email_sent = await send_callback_email(user_data, phone, message.text)
    
    if email_sent:
        response = (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
            "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    else:
        response = (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n\n"
            "–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    
    await db.add_request_stat(
        message.from_user.id,
        "callback_request",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:100]}..."
    )
    
    await message.answer(response, reply_markup=get_menu_by_role(user['role']))
    await state.clear()

@router.message(F.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
async def start_feedback(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    # –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    if user['role'] == 'staff':
        await message.answer(
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            reply_markup=get_menu_by_role(user['role'])
        )
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_feedback_type_kb()
    )
    await state.set_state(FeedbackStates.waiting_for_type)

@router.message(FeedbackStates.waiting_for_type)
async def process_feedback_type(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user(message.from_user.id)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
            reply_markup=get_menu_by_role(user['role'])
        )
        return
    
    if message.text not in ["üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_feedback_type_kb()
        )
        return
    
    feedback_type = "suggestion" if message.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" else "complaint"
    await state.update_data(feedback_type=feedback_type)
    
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(FeedbackStates.waiting_for_message)

@router.message(FeedbackStates.waiting_for_message)
async def process_feedback_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user(message.from_user.id)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
            reply_markup=get_menu_by_role(user['role'])
        )
        return
    
    data = await state.get_data()
    feedback_type = data.get('feedback_type')
    
    user = await db.get_user(message.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ë–î
    await db.add_feedback(
        user_id=message.from_user.id,
        feedback_type=feedback_type,
        message=message.text
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    user_data = {
        'telegram_id': user['telegram_id'],
        'username': user['username'],
        'client_code': user['client_code'],
        'pet_name': user['pet_name'],
        'pet_type': user['pet_type'],
        'country': user['country'] if user['country'] else 'RU'
    }
    
    await send_feedback_email(user_data, feedback_type, message.text)
    
    type_text = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" if feedback_type == "suggestion" else "–∂–∞–ª–æ–±–∞"
    
    await message.answer(
        f"‚úÖ –í–∞—à–µ {type_text} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        reply_markup=get_menu_by_role(user['role'])
    )
    
    await state.clear()