from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database
from keyboards.reply import get_cancel_kb, get_menu_by_role
from config import DATABASE_PATH
import logging

router = Router()
db = Database(DATABASE_PATH)
logger = logging.getLogger(__name__)

class QuestionStates(StatesGroup):
    waiting_for_question = State()

@router.message(F.text.in_(["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ü§ñ –í–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"]))
async def start_question(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    role = user['role']
    
    if role == 'staff':
        prompt = (
            "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–µ—á–µ–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É—Ö–æ–¥—É\n"
            "‚Ä¢ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏"
        )
    else:
        prompt = (
            "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–Ω–∏–∫–µ\n"
            "‚Ä¢ –£—Å–ª—É–≥–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏\n"
            "‚Ä¢ –†–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –û–±—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–∏—Ç–æ–º—Ü–∞—Ö"
        )
    
    await message.answer(prompt, reply_markup=get_cancel_kb())
    await state.set_state(QuestionStates.waiting_for_question)

@router.message(QuestionStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user(message.from_user.id)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
            reply_markup=get_menu_by_role(user['role'])
        )
        return
    
    user = await db.get_user(message.from_user.id)
    role = user['role']
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    await db.add_request_stat(
        message.from_user.id,
        "question",
        f"–†–æ–ª—å: {role}, –í–æ–ø—Ä–æ—Å: {message.text[:200]}..."
    )
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    
    if role == 'staff':
        # –î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        answer = (
            "ü§ñ –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...\n\n"
            "[–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π]"
        )
    else:
        # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ - –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        answer = (
            "üí¨ –û—Ç–≤–µ—Ç:\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! "
            "[–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤]"
        )
    
    await message.answer(answer, reply_markup=get_menu_by_role(role))
    await state.clear()