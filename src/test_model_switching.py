# test_vector_recreation_final.py

import time
import sys
from pathlib import Path
import shutil
import pandas as pd

project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    test_data = [
        {
            "column_for_embeddings": "–±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≥–ª—é–∫–æ–∑—ã —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞",
            "test_name": "–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
            "test_code": "BIO1",
            "category": "–±–∏–æ—Ö–∏–º–∏—è"
        },
        {
            "column_for_embeddings": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏ —Å –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏–µ–π –æ—Å–∞–¥–∫–∞", 
            "test_name": "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏",
            "test_code": "UAN1",
            "category": "–º–æ—á–∞"
        }
    ]
    
    test_df = pd.DataFrame(test_data)
    test_file = "data/processed/test_joined_data.xlsx"
    
    Path("data/processed").mkdir(parents=True, exist_ok=True)
    test_df.to_excel(test_file, index=False)
    
    return test_file

def cleanup_chroma_db(path):
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ ChromaDB –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if Path(path).exists():
        shutil.rmtree(path)
        print(f"   üßπ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")

def test_with_different_collection_names():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    print("=== –¢–ï–°–¢ –° –†–ê–ó–ù–´–ú–ò –ò–ú–ï–ù–ê–ú–ò –ö–û–õ–õ–ï–ö–¶–ò–ô ===\n")
    
    test_file = None
    try:
        test_file = create_test_data()
        print("üìÅ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        from src.data_vectorization import DataProcessor
        from models.vector_models_init import embedding_model
        
        print("\nüß™ –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –º–æ–¥–µ–ª—å—é 4B")
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        cleanup_chroma_db("data/chroma_db_test_4b")
        
        processor_4b = DataProcessor(file_path=test_file)
        
        # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –Ø–í–ù–´–ú –∏–º–µ–Ω–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è 4B
        store_4b = processor_4b.create_vector_store(
            persist_path="data/chroma_db_test_4b", 
            reset=True
        )
        
        info_4b = processor_4b.get_embedding_info()
        print(f"   ‚úì –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ")
        print(f"   ‚úì –ú–æ–¥–µ–ª—å: {info_4b['model_name']}")
        print(f"   ‚úì –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {info_4b['embedding_dim']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
        results_4b = processor_4b.search_test("–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏", top_k=1)
        print(f"   ‚úì –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(results_4b)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print("\nüß™ –≠–¢–ê–ü 2: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ 8B")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not hasattr(embedding_model, 'force_switch_to_fallback'):
            def force_switch_to_fallback(self):
                if hasattr(self, 'fallback_model') and self.fallback_model:
                    old_name = getattr(self, 'current_model', self).model_name
                    self.current_model = self.fallback_model
                    new_name = self.current_model.model_name
                    print(f"      –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: {old_name} ‚Üí {new_name}")
                    return True
                return False
            embedding_model.force_switch_to_fallback = force_switch_to_fallback.__get__(embedding_model)
        
        embedding_model.force_switch_to_fallback()
        current_model_8b = embedding_model.current_model.model_name
        print(f"   ‚úì –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: {current_model_8b}")
        
        print("\nüß™ –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–µ–º –û–¢–î–ï–õ–¨–ù–û–ï —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–æ–¥–µ–ª–∏ 8B")
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è 8B
        cleanup_chroma_db("data/chroma_db_test_8b")
        
        processor_8b = DataProcessor(file_path=test_file)
        
        # –°–æ–∑–¥–∞–µ–º –≤ –û–¢–î–ï–õ–¨–ù–û–ô –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        store_8b = processor_8b.create_vector_store(
            persist_path="data/chroma_db_test_8b",  # –î—Ä—É–≥–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è!
            reset=True
        )
        
        info_8b = processor_8b.get_embedding_info()
        print(f"   ‚úì –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ")
        print(f"   ‚úì –ú–æ–¥–µ–ª—å: {info_8b['model_name']}")
        print(f"   ‚úì –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {info_8b['embedding_dim']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
        results_8b = processor_8b.search_test("–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏", top_k=1)
        print(f"   ‚úì –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(results_8b)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print("\nüß™ –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 4B –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        embedding_model.current_model = embedding_model
        processor_4b_again = DataProcessor(file_path=test_file)
        processor_4b_again.load_vector_store("data/chroma_db_test_4b")
        results_4b_again = processor_4b_again.search_test("–∞–Ω–∞–ª–∏–∑", top_k=1)
        print(f"   ‚úì 4B —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(results_4b_again)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 8B –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        embedding_model.force_switch_to_fallback()
        processor_8b_again = DataProcessor(file_path=test_file)
        processor_8b_again.load_vector_store("data/chroma_db_test_8b")
        results_8b_again = processor_8b_again.search_test("–∞–Ω–∞–ª–∏–∑", top_k=1)
        print(f"   ‚úì 8B —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(results_8b_again)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print("\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö!")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å 4B: {info_4b['model_name']} ({info_4b['embedding_dim']} dim)")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å 8B: {info_8b['model_name']} ({info_8b['embedding_dim']} dim)")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≤ {info_8b['embedding_dim']/info_4b['embedding_dim']:.1f} —Ä–∞–∑")
        print(f"   ‚Ä¢ –û–±–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        cleanup_chroma_db("data/chroma_db_test_4b")
        cleanup_chroma_db("data/chroma_db_test_8b")
        if test_file and Path(test_file).exists():
            Path(test_file).unlink()
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")

def test_automatic_recreation():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –≤ load_vector_store"""
    
    print("\n=== –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–Ø ===\n")
    
    test_file = None
    try:
        test_file = create_test_data()
        
        from src.data_vectorization import DataProcessor
        from models.vector_models_init import embedding_model
        
        print("üß™ –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å 4B...")
        
        processor = DataProcessor(file_path=test_file)
        store_4b = processor.create_vector_store(
            persist_path="data/chroma_auto_test",
            reset=True
        )
        info_4b = processor.get_embedding_info()
        print(f"‚úì –°–æ–∑–¥–∞–Ω–æ —Å {info_4b['model_name']} ({info_4b['embedding_dim']} dim)")
        
        print("\nüß™ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ 8B –∏ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
        
        embedding_model.force_switch_to_fallback()
        
        processor_8b = DataProcessor(file_path=test_file)
        
        # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        print("   –í—ã–∑—ã–≤–∞–µ–º load_vector_store() - –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å...")
        processor_8b.load_vector_store("data/chroma_auto_test")
        
        info_8b = processor_8b.get_embedding_info()
        print(f"‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ —Å {info_8b['model_name']} ({info_8b['embedding_dim']} dim)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
        results = processor_8b.search_test("–∞–Ω–∞–ª–∏–∑", top_k=1)
        print(f"‚úì –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        print("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        cleanup_chroma_db("data/chroma_auto_test")
        if test_file and Path(test_file).exists():
            Path(test_file).unlink()

if __name__ == "__main__":
    test_with_different_collection_names()
    test_automatic_recreation()