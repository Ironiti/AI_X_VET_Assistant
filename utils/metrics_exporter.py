"""
–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ –≤ Excel
"""
import io
from datetime import datetime, timedelta
from typing import Optional
import xlsxwriter


class MetricsExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ –≤ Excel"""
    
    def __init__(self, db):
        self.db = db
    
    async def export_comprehensive_metrics(self, days: int = 30) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Excel"""
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        
        # –§–æ—Ä–º–∞—Ç—ã
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#4472C4',
            'font_color': 'white',
            'border': 1
        })
        
        title_format = workbook.add_format({
            'bold': True,
            'font_size': 14,
            'bg_color': '#D9E1F2'
        })
        
        good_format = workbook.add_format({'bg_color': '#C6EFCE', 'font_color': '#006100'})
        warning_format = workbook.add_format({'bg_color': '#FFEB9C', 'font_color': '#9C6500'})
        bad_format = workbook.add_format({'bg_color': '#FFC7CE', 'font_color': '#9C0006'})
        
        # 1. –°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
        await self._create_summary_sheet(workbook, header_format, title_format, days)
        
        # 2. –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        await self._create_client_metrics_sheet(workbook, header_format, title_format, days)
        
        # 3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        await self._create_technical_metrics_sheet(workbook, header_format, title_format, days)
        
        # 4. –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        await self._create_quality_metrics_sheet(workbook, header_format, title_format, good_format, warning_format, days)
        
        # 5. –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await self._create_detailed_data_sheet(workbook, header_format, days)
        
        workbook.close()
        output.seek(0)
        return output.read()
    
    async def _create_summary_sheet(self, workbook, header_format, title_format, days):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç"""
        worksheet = workbook.add_worksheet('–°–≤–æ–¥–∫–∞')
        worksheet.set_column('A:A', 30)
        worksheet.set_column('B:B', 20)
        
        row = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.write(row, 0, f'–°–í–û–î–ö–ê –ú–ï–¢–†–ò–ö –ó–ê {days} –î–ù–ï–ô', title_format)
        worksheet.write(row, 1, datetime.now().strftime('%d.%m.%Y %H:%M'))
        row += 2
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        metrics = await self.db.get_comprehensive_metrics(days)
        
        if not metrics:
            worksheet.write(row, 0, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            return
        
        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        worksheet.write(row, 0, 'üë• –ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò', title_format)
        row += 1
        
        client = metrics.get('client_metrics', {})
        dau_list = client.get('dau', [])
        retention = client.get('retention', {})
        sessions = client.get('sessions', {})
        
        if dau_list and len(dau_list) > 0:
            today_dau = dau_list[0].get('dau', 0) if dau_list else 0
            week_data = dau_list[:7]
            avg_dau = sum(d.get('dau', 0) for d in week_data) / len(week_data) if week_data else 0
            
            worksheet.write(row, 0, 'DAU —Å–µ–≥–æ–¥–Ω—è')
            worksheet.write(row, 1, today_dau)
            row += 1
            
            worksheet.write(row, 0, '–°—Ä–µ–¥–Ω–∏–π DAU')
            worksheet.write(row, 1, f'{avg_dau:.1f}')
            row += 1
        
        if retention and retention.get('today_users', 0) > 0:
            worksheet.write(row, 0, 'Retention 1 –¥–µ–Ω—å')
            worksheet.write(row, 1, f"{retention.get('retention_1d', 0):.1f}%")
            row += 1
            
            worksheet.write(row, 0, 'Retention 7 –¥–Ω–µ–π')
            worksheet.write(row, 1, f"{retention.get('retention_7d', 0):.1f}%")
            row += 1
            
            worksheet.write(row, 0, 'Retention 30 –¥–Ω–µ–π')
            worksheet.write(row, 1, f"{retention.get('retention_30d', 0):.1f}%")
            row += 1
        
        if sessions and sessions.get('total_sessions', 0) > 0:
            avg_duration = sessions.get('avg_duration_minutes') or 0
            worksheet.write(row, 0, '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏')
            worksheet.write(row, 1, f"{avg_duration:.1f} –º–∏–Ω")
            row += 2
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        worksheet.write(row, 0, '‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò', title_format)
        row += 1
        
        tech = metrics.get('technical_metrics', {})
        perf = tech.get('response_time', {})
        
        if perf and perf.get('overall'):
            overall = perf['overall']
            
            worksheet.write(row, 0, '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
            worksheet.write(row, 1, overall.get('total_requests', 0))
            row += 1
            
            worksheet.write(row, 0, '–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')
            worksheet.write(row, 1, overall.get('successful_requests', 0))
            row += 1
            
            worksheet.write(row, 0, '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞')
            worksheet.write(row, 1, f"{overall.get('avg_response_time', 0):.2f} —Å–µ–∫")
            row += 1
            
            worksheet.write(row, 0, '–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞')
            worksheet.write(row, 1, f"{overall.get('max_response_time', 0):.2f} —Å–µ–∫")
            row += 2
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        worksheet.write(row, 0, 'üéØ –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê', title_format)
        row += 1
        
        quality = metrics.get('quality_metrics', {})
        if quality:
            worksheet.write(row, 0, '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
            worksheet.write(row, 1, quality.get('total', 0))
            row += 1
            
            worksheet.write(row, 0, '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤')
            worksheet.write(row, 1, f"{quality.get('correct_percentage', 0):.1f}%")
            row += 1
            
            worksheet.write(row, 0, '–û—à–∏–±–æ–∫')
            worksheet.write(row, 1, f"{quality.get('incorrect_percentage', 0):.1f}%")
            row += 1
            
            worksheet.write(row, 0, '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞')
            worksheet.write(row, 1, f"{quality.get('no_answer_percentage', 0):.1f}%")
    
    async def _create_client_metrics_sheet(self, workbook, header_format, title_format, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        worksheet = workbook.add_worksheet('–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
        
        # DAU –ø–æ –¥–Ω—è–º
        dau_data = await self.db.get_dau_metrics(days)
        
        if dau_data:
            worksheet.write(0, 0, 'DAU –ü–û –î–ù–Ø–ú', title_format)
            row = 1
            
            headers = ['–î–∞—Ç–∞', 'DAU', '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤', '–ó–∞–ø—Ä–æ—Å–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, header_format)
            
            row += 1
            for data in dau_data:
                worksheet.write(row, 0, str(data.get('activity_date', '')))
                worksheet.write(row, 1, data.get('dau', 0))
                worksheet.write(row, 2, data.get('total_requests', 0))
                avg_req = data.get('avg_requests_per_user') or 0
                worksheet.write(row, 3, f"{avg_req:.2f}")
                row += 1
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            worksheet.set_column('A:A', 12)
            worksheet.set_column('B:D', 15)
    
    async def _create_technical_metrics_sheet(self, workbook, header_format, title_format, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        worksheet = workbook.add_worksheet('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_data = await self.db.get_metrics_summary(days)
        
        row = 0
        worksheet.write(row, 0, '–ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', title_format)
        row += 2
        
        if perf_data and perf_data.get('by_type'):
            headers = ['–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫)', '–£—Å–ø–µ—à–Ω—ã—Ö', '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, header_format)
            
            row += 1
            for type_data in perf_data['by_type']:
                worksheet.write(row, 0, type_data.get('request_type', 'unknown'))
                worksheet.write(row, 1, type_data.get('count', 0))
                avg_time = type_data.get('avg_time') or 0
                worksheet.write(row, 2, f"{avg_time:.2f}")
                worksheet.write(row, 3, type_data.get('successful', 0))
                worksheet.write(row, 4, type_data.get('no_answer', 0))
                row += 1
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        row += 2
        worksheet.write(row, 0, '–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´', title_format)
        row += 1
        
        sys_metrics = await self.db._get_latest_system_metrics()
        
        if sys_metrics:
            headers = ['–î–∞—Ç–∞', 'CPU %', '–ü–∞–º—è—Ç—å %', '–î–∏—Å–∫ %', '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π', '–û—à–∏–±–æ–∫']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, header_format)
            
            row += 1
            for metric in sys_metrics:
                worksheet.write(row, 0, str(metric.get('metric_date', '')))
                worksheet.write(row, 1, f"{metric.get('cpu_usage') or 0:.1f}")
                worksheet.write(row, 2, f"{metric.get('memory_usage') or 0:.1f}")
                worksheet.write(row, 3, f"{metric.get('disk_usage') or 0:.1f}")
                worksheet.write(row, 4, metric.get('active_sessions') or 0)
                worksheet.write(row, 5, metric.get('error_count') or 0)
                row += 1
        
        worksheet.set_column('A:A', 12)
        worksheet.set_column('B:F', 15)
    
    async def _create_quality_metrics_sheet(self, workbook, header_format, title_format, good_format, warning_format, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        worksheet = workbook.add_worksheet('–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞')
        
        quality = await self.db.get_quality_metrics_summary(days)
        
        row = 0
        worksheet.write(row, 0, f'–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ó–ê {days} –î–ù–ï–ô', title_format)
        row += 2
        
        if quality:
            # –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞
            headers = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ–Ω—Ç']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, header_format)
            
            row += 1
            
            total = quality.get('total', 0)
            
            metrics_data = [
                ('–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤', total, '100%'),
                ('–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', quality.get('correct', 0), f"{quality.get('correct_percentage', 0):.1f}%"),
                ('–û—à–∏–±–æ–∫', quality.get('incorrect', 0), f"{quality.get('incorrect_percentage', 0):.1f}%"),
                ('–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞', quality.get('no_answer', 0), f"{quality.get('no_answer_percentage', 0):.1f}%"),
            ]
            
            for metric_name, value, percent in metrics_data:
                worksheet.write(row, 0, metric_name)
                worksheet.write(row, 1, value)
                
                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö' in metric_name:
                    pct_value = quality.get('correct_percentage', 0)
                    if pct_value >= 70:
                        worksheet.write(row, 2, percent, good_format)
                    elif pct_value >= 50:
                        worksheet.write(row, 2, percent, warning_format)
                    else:
                        worksheet.write(row, 2, percent)
                else:
                    worksheet.write(row, 2, percent)
                
                row += 1
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
            row += 2
            worksheet.write(row, 0, '–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í', title_format)
            row += 1
            
            headers = ['–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–î–æ–ª—è']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, header_format)
            
            row += 1
            
            types_data = [
                ('–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É', quality.get('code_searches', 0)),
                ('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', quality.get('name_searches', 0)),
                ('–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã', quality.get('general_questions', 0)),
            ]
            
            for type_name, count in types_data:
                worksheet.write(row, 0, type_name)
                worksheet.write(row, 1, count)
                worksheet.write(row, 2, f"{(count / total * 100):.1f}%" if total > 0 else "0%")
                row += 1
        
        worksheet.set_column('A:A', 30)
        worksheet.set_column('B:C', 15)
    
    async def _create_detailed_data_sheet(self, workbook, header_format, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        worksheet = workbook.add_worksheet('–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        
        start_date = datetime.now() - timedelta(days=days)
        detailed = await self.db.get_detailed_metrics(start_date=start_date)
        
        if not detailed or not detailed.get('requests'):
            worksheet.write(0, 0, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            '–î–∞—Ç–∞/–í—Ä–µ–º—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞', '–ó–∞–ø—Ä–æ—Å',
            '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)', '–£—Å–ø–µ—Ö', '–ï—Å—Ç—å –æ—Ç–≤–µ—Ç', '–û—à–∏–±–∫–∞'
        ]
        
        for col, header in enumerate(headers):
            worksheet.write(0, col, header, header_format)
        
        # –î–∞–Ω–Ω—ã–µ
        row = 1
        for req in detailed['requests'][:1000]:  # –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø–∏—Å–µ–π
            worksheet.write(row, 0, str(req.get('timestamp', '')))
            worksheet.write(row, 1, req.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
            worksheet.write(row, 2, req.get('request_type', ''))
            
            query = req.get('query_text', '')
            worksheet.write(row, 3, query[:100] if query else '')
            
            response_time = req.get('response_time') or 0
            worksheet.write(row, 4, f"{response_time:.2f}")
            worksheet.write(row, 5, '–î–∞' if req.get('success') else '–ù–µ—Ç')
            worksheet.write(row, 6, '–î–∞' if req.get('has_answer') else '–ù–µ—Ç')
            worksheet.write(row, 7, req.get('error_message', '') or '')
            
            row += 1
        
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
        worksheet.set_column('A:A', 20)
        worksheet.set_column('B:B', 25)
        worksheet.set_column('C:C', 15)
        worksheet.set_column('D:D', 50)
        worksheet.set_column('E:H', 15)
    
    async def export_dau_report(self, days: int = 30) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ DAU"""
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        
        worksheet = workbook.add_worksheet('DAU Report')
        
        # –§–æ—Ä–º–∞—Ç—ã
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#4472C4',
            'font_color': 'white'
        })
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['–î–∞—Ç–∞', 'DAU', '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤', '–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
        for col, header in enumerate(headers):
            worksheet.write(0, col, header, header_format)
        
        # –î–∞–Ω–Ω—ã–µ
        dau_data = await self.db.get_dau_metrics(days)
        
        row = 1
        for data in dau_data:
            worksheet.write(row, 0, str(data.get('activity_date', '')))
            worksheet.write(row, 1, data.get('dau', 0))
            worksheet.write(row, 2, data.get('total_requests', 0))
            avg_req = data.get('avg_requests_per_user') or 0
            worksheet.write(row, 3, f"{avg_req:.2f}")
            row += 1
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart = workbook.add_chart({'type': 'line'})
        
        chart.add_series({
            'name': 'DAU',
            'categories': f'=DAU Report!$A$2:$A${row}',
            'values': f'=DAU Report!$B$2:$B${row}',
        })
        
        chart.set_title({'name': f'Daily Active Users ({days} –¥–Ω–µ–π)'})
        chart.set_x_axis({'name': '–î–∞—Ç–∞'})
        chart.set_y_axis({'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'})
        
        worksheet.insert_chart('F2', chart)
        
        worksheet.set_column('A:D', 20)
        
        workbook.close()
        output.seek(0)
        return output.read()