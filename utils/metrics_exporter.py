"""
–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ –≤ Excel
"""
import io
from datetime import datetime, timedelta
from typing import Optional
import xlsxwriter


class MetricsExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ –≤ Excel"""
    
    def __init__(self, db):
        self.db = db
    
    def _create_formats(self, workbook):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        formats = {}
        
        # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤
        PRIMARY_BLUE = '#1E3A8A'
        LIGHT_BLUE = '#DBEAFE'
        ACCENT_BLUE = '#3B82F6'
        SUCCESS_GREEN = '#10B981'
        WARNING_YELLOW = '#F59E0B'
        ERROR_RED = '#EF4444'
        GRAY_LIGHT = '#F3F4F6'
        GRAY_DARK = '#6B7280'
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        formats['main_title'] = workbook.add_format({
            'bold': True,
            'font_size': 20,
            'font_color': 'white',
            'bg_color': PRIMARY_BLUE,
            'align': 'center',
            'valign': 'vcenter',
            'border': 2,
            'border_color': PRIMARY_BLUE
        })
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        formats['subtitle'] = workbook.add_format({
            'font_size': 12,
            'font_color': GRAY_DARK,
            'bg_color': LIGHT_BLUE,
            'align': 'center',
            'valign': 'vcenter',
            'border': 1,
            'border_color': ACCENT_BLUE
        })
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        formats['section_header'] = workbook.add_format({
            'bold': True,
            'font_size': 14,
            'font_color': 'white',
            'bg_color': ACCENT_BLUE,
            'align': 'left',
            'valign': 'vcenter',
            'border': 1,
            'left': 2,
            'border_color': PRIMARY_BLUE
        })
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–∫—Ü–∏–∏
        formats['subsection_header'] = workbook.add_format({
            'bold': True,
            'font_size': 12,
            'font_color': PRIMARY_BLUE,
            'bg_color': LIGHT_BLUE,
            'align': 'left',
            'valign': 'vcenter',
            'border': 1
        })
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        formats['table_header'] = workbook.add_format({
            'bold': True,
            'font_size': 11,
            'font_color': 'white',
            'bg_color': PRIMARY_BLUE,
            'align': 'center',
            'valign': 'vcenter',
            'border': 1,
            'text_wrap': True
        })
        
        # –ú–µ—Ç–∫–∞ (label) –¥–ª—è –º–µ—Ç—Ä–∏–∫
        formats['metric_label'] = workbook.add_format({
            'bold': True,
            'font_size': 11,
            'font_color': '#1F2937',
            'bg_color': GRAY_LIGHT,
            'align': 'left',
            'valign': 'vcenter',
            'border': 1,
            'indent': 1
        })
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        formats['metric_value'] = workbook.add_format({
            'font_size': 11,
            'font_color': '#1F2937',
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '#,##0'
        })
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç)
        formats['metric_percent'] = workbook.add_format({
            'font_size': 11,
            'font_color': '#1F2937',
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '0.0"%"'
        })
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ)
        formats['metric_decimal'] = workbook.add_format({
            'font_size': 11,
            'font_color': '#1F2937',
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '0.00'
        })
        
        # –Ø—á–µ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
        formats['cell_data'] = workbook.add_format({
            'font_size': 10,
            'align': 'left',
            'valign': 'vcenter',
            'border': 1
        })
        
        # –Ø—á–µ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã (—á–∏—Å–ª–æ)
        formats['cell_number'] = workbook.add_format({
            'font_size': 10,
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '#,##0'
        })
        
        # –Ø—á–µ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ)
        formats['cell_decimal'] = workbook.add_format({
            'font_size': 10,
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '0.00'
        })
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formats['good'] = workbook.add_format({
            'bold': True,
            'font_color': SUCCESS_GREEN,
            'bg_color': '#D1FAE5',
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '0.0"%"'
        })
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        formats['warning'] = workbook.add_format({
            'bold': True,
            'font_color': WARNING_YELLOW,
            'bg_color': '#FEF3C7',
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '0.0"%"'
        })
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formats['bad'] = workbook.add_format({
            'bold': True,
            'font_color': ERROR_RED,
            'bg_color': '#FEE2E2',
            'align': 'right',
            'valign': 'vcenter',
            'border': 1,
            'num_format': '0.0"%"'
        })
        
        # KPI - –≤—ã—Å–æ–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        formats['kpi_high'] = workbook.add_format({
            'bold': True,
            'font_size': 14,
            'font_color': SUCCESS_GREEN,
            'bg_color': '#ECFDF5',
            'align': 'center',
            'valign': 'vcenter',
            'border': 2,
            'border_color': SUCCESS_GREEN,
            'num_format': '0.00'
        })
        
        # KPI - —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        formats['kpi_medium'] = workbook.add_format({
            'bold': True,
            'font_size': 14,
            'font_color': WARNING_YELLOW,
            'bg_color': '#FFFBEB',
            'align': 'center',
            'valign': 'vcenter',
            'border': 2,
            'border_color': WARNING_YELLOW,
            'num_format': '0.00'
        })
        
        # KPI - –Ω–∏–∑–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        formats['kpi_low'] = workbook.add_format({
            'bold': True,
            'font_size': 14,
            'font_color': ERROR_RED,
            'bg_color': '#FEF2F2',
            'align': 'center',
            'valign': 'vcenter',
            'border': 2,
            'border_color': ERROR_RED,
            'num_format': '0.00'
        })
        
        # –î–∞—Ç–∞/–≤—Ä–µ–º—è
        formats['datetime'] = workbook.add_format({
            'font_size': 10,
            'font_color': GRAY_DARK,
            'align': 'center',
            'valign': 'vcenter',
            'border': 1
        })
        
        return formats
    
    async def export_comprehensive_metrics(self, days: int = 30) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Excel"""
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = self._create_formats(workbook)
        
        # 1. –°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç (Executive Dashboard)
        await self._create_summary_sheet(workbook, formats, days)
        
        # 2. –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        await self._create_client_metrics_sheet(workbook, formats, days)
        
        # 3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        await self._create_technical_metrics_sheet(workbook, formats, days)
        
        # 4. –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        await self._create_quality_metrics_sheet(workbook, formats, days)
        
        # 5. –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await self._create_detailed_data_sheet(workbook, formats, days)
        
        workbook.close()
        output.seek(0)
        return output.read()
    
    async def _create_summary_sheet(self, workbook, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç - Executive Dashboard"""
        worksheet = workbook.add_worksheet('üìä –°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 40)
        worksheet.set_column('B:B', 20)
        worksheet.set_column('C:C', 20)
        
        row = 0
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(row, 0, row, 2, 
                            f'–û–¢–ß–ï–¢ –ü–û –ú–ï–¢–†–ò–ö–ê–ú –°–ò–°–¢–ï–ú–´', 
                            formats['main_title'])
        worksheet.set_row(row, 30)
        row += 1
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–∏–æ–¥–æ–º –∏ –¥–∞—Ç–æ–π
        period_text = f'–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {days} –¥–Ω–µ–π | –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
        worksheet.merge_range(row, 0, row, 2, period_text, formats['subtitle'])
        worksheet.set_row(row, 20)
        row += 2
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        metrics = await self.db.get_comprehensive_metrics(days)
        avg_rating = await self.db.get_average_user_rating(days)
        
        if not metrics:
            worksheet.write(row, 0, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', formats['metric_label'])
            return
        
        # ===== –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò (KPI) =====
        worksheet.merge_range(row, 0, row, 2, 
                            'üéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        client = metrics.get('client_metrics', {})
        dau_list = client.get('dau', [])
        
        # –°—Ä–µ–¥–Ω–∏–π DAU
        if dau_list and len(dau_list) > 0:
            avg_dau = sum(d.get('dau', 0) for d in dau_list) / len(dau_list)
            worksheet.write(row, 0, 'üë• –°—Ä–µ–¥–Ω–∏–π DAU (–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å)', formats['metric_label'])
            kpi_format = formats['kpi_high'] if avg_dau >= 50 else formats['kpi_medium'] if avg_dau >= 20 else formats['kpi_low']
            worksheet.write(row, 1, avg_dau, kpi_format)
            worksheet.write(row, 2, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', formats['metric_value'])
            row += 1
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
        tech = metrics.get('technical_metrics', {})
        perf = tech.get('response_time', {})
        overall = perf.get('overall', {}) if perf else {}
        total_requests = overall.get('total_requests', 0)
        successful_requests = overall.get('successful_requests', 0)
        accuracy = (successful_requests / total_requests * 100) if total_requests > 0 else 0
        
        worksheet.write(row, 0, '‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤', formats['metric_label'])
        kpi_format = formats['kpi_high'] if accuracy >= 80 else formats['kpi_medium'] if accuracy >= 60 else formats['kpi_low']
        worksheet.write(row, 1, accuracy / 100, kpi_format)
        worksheet.write(row, 2, f'{successful_requests}/{total_requests}', formats['metric_value'])
        row += 1
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        worksheet.write(row, 0, '‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', formats['metric_label'])
        kpi_format = formats['kpi_high'] if avg_rating >= 4.0 else formats['kpi_medium'] if avg_rating >= 3.0 else formats['kpi_low']
        worksheet.write(row, 1, avg_rating, kpi_format)
        worksheet.write(row, 2, '–∏–∑ 5.00', formats['metric_value'])
        row += 2
        
        # ===== –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ =====
        worksheet.merge_range(row, 0, row, 2,
                            'üë• –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        # Retention
        retention = client.get('retention', {})
        if retention and retention.get('today_users', 0) > 0:
            worksheet.merge_range(row, 0, row, 2, '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è (Retention)', formats['subsection_header'])
            row += 1
            
            ret_1d = retention.get('retention_1d', 0)
            worksheet.write(row, 0, '  ‚Ä¢ Retention 1 –¥–µ–Ω—å', formats['metric_label'])
            worksheet.write(row, 1, ret_1d / 100, formats['metric_percent'])
            worksheet.write(row, 2, self._get_retention_status(ret_1d), formats['cell_data'])
            row += 1
            
            ret_7d = retention.get('retention_7d', 0)
            worksheet.write(row, 0, '  ‚Ä¢ Retention 7 –¥–Ω–µ–π', formats['metric_label'])
            worksheet.write(row, 1, ret_7d / 100, formats['metric_percent'])
            worksheet.write(row, 2, self._get_retention_status(ret_7d), formats['cell_data'])
            row += 1
            
            ret_30d = retention.get('retention_30d', 0)
            worksheet.write(row, 0, '  ‚Ä¢ Retention 30 –¥–Ω–µ–π', formats['metric_label'])
            worksheet.write(row, 1, ret_30d / 100, formats['metric_percent'])
            worksheet.write(row, 2, self._get_retention_status(ret_30d), formats['cell_data'])
            row += 1
        
        row += 1
        
        # === –í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
        worksheet.merge_range(row, 0, row, 2,
                            '‚è±Ô∏è –í–†–ï–ú–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        sessions = client.get('sessions', {})
        if sessions and sessions.get('total_sessions', 0) > 0:
            total_sessions = sessions.get('total_sessions', 0)
            avg_duration = sessions.get('avg_duration_minutes', 0)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ - —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            worksheet.write(row, 0, 'üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏', formats['metric_label'])
            kpi_format_duration = workbook.add_format({
                'bold': True,
                'font_size': 14,
                'font_color': '#10B981' if avg_duration >= 5 else '#F59E0B' if avg_duration >= 2 else '#EF4444',
                'bg_color': '#ECFDF5' if avg_duration >= 5 else '#FFFBEB' if avg_duration >= 2 else '#FEF2F2',
                'align': 'center',
                'valign': 'vcenter',
                'border': 2,
                'border_color': '#10B981' if avg_duration >= 5 else '#F59E0B' if avg_duration >= 2 else '#EF4444',
                'num_format': '0.00'
            })
            worksheet.write(row, 1, avg_duration, kpi_format_duration)
            worksheet.write(row, 2, '–º–∏–Ω—É—Ç', formats['metric_value'])
            row += 1
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
            worksheet.write(row, 0, '  üìà –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥', formats['metric_label'])
            worksheet.write(row, 1, total_sessions, formats['metric_value'])
            row += 1
            
            # –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            total_activity_time = avg_duration * total_sessions
            worksheet.write(row, 0, '  ‚è≥ –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', formats['metric_label'])
            worksheet.write(row, 1, total_activity_time, formats['metric_decimal'])
            worksheet.write(row, 2, '–º–∏–Ω—É—Ç', formats['metric_value'])
            row += 1
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            avg_hours = avg_duration / 60
            worksheet.write(row, 0, '  üïê –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å—ã)', formats['metric_label'])
            worksheet.write(row, 1, avg_hours, formats['metric_decimal'])
            worksheet.write(row, 2, '—á–∞—Å–æ–≤', formats['metric_value'])
            row += 1
        else:
            worksheet.write(row, 0, '‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏', formats['metric_label'])
            worksheet.merge_range(row, 1, row, 2, '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', formats['metric_value'])
            row += 1
        
        row += 1
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π
        if dau_list:
            worksheet.merge_range(row, 0, row, 2, '–û–±—ä–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π', formats['subsection_header'])
            row += 1
            
            today_req = dau_list[0].get('total_requests', 0) if dau_list else 0
            week_req = sum(d.get('total_requests', 0) for d in dau_list[:7])
            month_req = sum(d.get('total_requests', 0) for d in dau_list)
            
            worksheet.write(row, 0, '  üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å', formats['metric_label'])
            worksheet.write(row, 1, today_req, formats['metric_value'])
            row += 1
            
            worksheet.write(row, 0, '  üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', formats['metric_label'])
            worksheet.write(row, 1, week_req, formats['metric_value'])
            row += 1
            
            worksheet.write(row, 0, f'  üìÖ –ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ ({days} –¥–Ω–µ–π)', formats['metric_label'])
            worksheet.write(row, 1, month_req, formats['metric_value'])
            row += 2
        
        # ===== –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´ =====
        worksheet.merge_range(row, 0, row, 2,
                            '‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        if overall:
            avg_response = overall.get('avg_response_time', 0)
            worksheet.write(row, 0, '‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', formats['metric_label'])
            worksheet.write(row, 1, avg_response, formats['metric_decimal'])
            worksheet.write(row, 2, '—Å–µ–∫—É–Ω–¥', formats['metric_value'])
            row += 1
            
            max_response = overall.get('max_response_time', 0)
            worksheet.write(row, 0, '‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', formats['metric_label'])
            worksheet.write(row, 1, max_response, formats['metric_decimal'])
            worksheet.write(row, 2, '—Å–µ–∫—É–Ω–¥', formats['metric_value'])
            row += 2
        
        # ===== –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø =====
        worksheet.merge_range(row, 0, row, 2,
                            'üéØ –ö–ê–ß–ï–°–¢–í–û –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        quality = metrics.get('quality_metrics', {})
        if quality:
            total = quality.get('total', 0)
            correct = quality.get('correct', 0)
            incorrect = quality.get('incorrect', 0)
            no_answer = quality.get('no_answer', 0)
            
            worksheet.write(row, 0, 'üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', formats['metric_label'])
            worksheet.write(row, 1, total, formats['metric_value'])
            row += 1
            
            correct_pct = quality.get('correct_percentage', 0)
            worksheet.write(row, 0, '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', formats['metric_label'])
            pct_format = formats['good'] if correct_pct >= 70 else formats['warning'] if correct_pct >= 50 else formats['bad']
            worksheet.write(row, 1, correct_pct / 100, pct_format)
            worksheet.write(row, 2, f'{correct} –∑–∞–ø—Ä–æ—Å–æ–≤', formats['metric_value'])
            row += 1
            
            incorrect_pct = quality.get('incorrect_percentage', 0)
            worksheet.write(row, 0, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', formats['metric_label'])
            worksheet.write(row, 1, incorrect_pct / 100, formats['metric_percent'])
            worksheet.write(row, 2, f'{incorrect} –∑–∞–ø—Ä–æ—Å–æ–≤', formats['metric_value'])
            row += 1
            
            no_answer_pct = quality.get('no_answer_percentage', 0)
            worksheet.write(row, 0, '‚ö†Ô∏è –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞', formats['metric_label'])
            worksheet.write(row, 1, no_answer_pct / 100, formats['metric_percent'])
            worksheet.write(row, 2, f'{no_answer} –∑–∞–ø—Ä–æ—Å–æ–≤', formats['metric_value'])
            row += 1
    
    def _get_retention_status(self, retention_pct):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å retention"""
        if retention_pct >= 40:
            return 'üü¢ –û—Ç–ª–∏—á–Ω–æ'
        elif retention_pct >= 20:
            return 'üü° –•–æ—Ä–æ—à–æ'
        else:
            return 'üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
    
    async def _create_client_metrics_sheet(self, workbook, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        worksheet = workbook.add_worksheet('üë• –ö–ª–∏–µ–Ω—Ç—ã')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(0, 0, 0, 3, 
                            f'–ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò –ó–ê {days} –î–ù–ï–ô',
                            formats['main_title'])
        worksheet.set_row(0, 30)
        
        # DAU –ø–æ –¥–Ω—è–º
        dau_data = await self.db.get_dau_metrics(days)
        
        if dau_data:
            row = 2
            worksheet.merge_range(row, 0, row, 3,
                                '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (DAU)',
                                formats['section_header'])
            row += 1
            
            headers = ['–î–∞—Ç–∞', 'DAU', '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤', '–ó–∞–ø—Ä–æ—Å–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, formats['table_header'])
            
            worksheet.set_column('A:A', 15)
            worksheet.set_column('B:B', 12)
            worksheet.set_column('C:C', 18)
            worksheet.set_column('D:D', 22)
            
            row += 1
            for data in dau_data:
                worksheet.write(row, 0, str(data.get('activity_date', '')), formats['cell_data'])
                worksheet.write(row, 1, data.get('dau', 0), formats['cell_number'])
                worksheet.write(row, 2, data.get('total_requests', 0), formats['cell_number'])
                avg_req = data.get('avg_requests_per_user') or 0
                worksheet.write(row, 3, avg_req, formats['cell_decimal'])
                row += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ DAU
            if len(dau_data) > 1:
                chart = workbook.add_chart({'type': 'line'})
                chart.add_series({
                    'name': 'DAU',
                    'categories': f'=\'üë• –ö–ª–∏–µ–Ω—Ç—ã\'!$A$5:$A${row}',
                    'values': f'=\'üë• –ö–ª–∏–µ–Ω—Ç—ã\'!$B$5:$B${row}',
                    'line': {'color': '#3B82F6', 'width': 2.5}
                })
                chart.set_title({
                    'name': f'–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({days} –¥–Ω–µ–π)',
                    'name_font': {'size': 14, 'bold': True}
                })
                chart.set_x_axis({'name': '–î–∞—Ç–∞', 'name_font': {'size': 11}})
                chart.set_y_axis({'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'name_font': {'size': 11}})
                chart.set_size({'width': 720, 'height': 400})
                chart.set_legend({'position': 'bottom'})
                worksheet.insert_chart(row + 2, 0, chart)
    
    async def _create_technical_metrics_sheet(self, workbook, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        worksheet = workbook.add_worksheet('‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(0, 0, 0, 4,
                            f'–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò –ó–ê {days} –î–ù–ï–ô',
                            formats['main_title'])
        worksheet.set_row(0, 30)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_data = await self.db.get_metrics_summary(days)
        
        row = 2
        worksheet.merge_range(row, 0, row, 4,
                            '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤',
                            formats['section_header'])
        row += 1
        
        if perf_data and perf_data.get('by_type'):
            headers = ['–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫)', '–£—Å–ø–µ—à–Ω—ã—Ö', '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, formats['table_header'])
            
            worksheet.set_column('A:A', 25)
            worksheet.set_column('B:E', 18)
            
            row += 1
            for type_data in perf_data['by_type']:
                worksheet.write(row, 0, type_data.get('request_type', 'unknown'), formats['cell_data'])
                worksheet.write(row, 1, type_data.get('count', 0), formats['cell_number'])
                avg_time = type_data.get('avg_time') or 0
                worksheet.write(row, 2, avg_time, formats['cell_decimal'])
                worksheet.write(row, 3, type_data.get('successful', 0), formats['cell_number'])
                worksheet.write(row, 4, type_data.get('no_answer', 0), formats['cell_number'])
                row += 1
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        row += 2
        worksheet.merge_range(row, 0, row, 5,
                            '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
                            formats['section_header'])
        row += 1
        
        sys_metrics = await self.db._get_latest_system_metrics()
        
        if sys_metrics:
            headers = ['–î–∞—Ç–∞', 'CPU %', '–ü–∞–º—è—Ç—å %', '–î–∏—Å–∫ %', '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π', '–û—à–∏–±–æ–∫']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, formats['table_header'])
            
            worksheet.set_column('A:A', 15)
            worksheet.set_column('B:D', 12)
            worksheet.set_column('E:F', 16)
            
            row += 1
            for metric in sys_metrics:
                worksheet.write(row, 0, str(metric.get('metric_date', '')), formats['cell_data'])
                worksheet.write(row, 1, metric.get('cpu_usage') or 0, formats['cell_decimal'])
                worksheet.write(row, 2, metric.get('memory_usage') or 0, formats['cell_decimal'])
                worksheet.write(row, 3, metric.get('disk_usage') or 0, formats['cell_decimal'])
                worksheet.write(row, 4, metric.get('active_sessions') or 0, formats['cell_number'])
                worksheet.write(row, 5, metric.get('error_count') or 0, formats['cell_number'])
                row += 1
    
    async def _create_quality_metrics_sheet(self, workbook, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        worksheet = workbook.add_worksheet('üéØ –ö–∞—á–µ—Å—Ç–≤–æ')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(0, 0, 0, 2,
                            f'–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ó–ê {days} –î–ù–ï–ô',
                            formats['main_title'])
        worksheet.set_row(0, 30)
        
        quality = await self.db.get_quality_metrics_summary(days)
        
        row = 2
        worksheet.merge_range(row, 0, row, 2,
                            '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤',
                            formats['section_header'])
        row += 1
        
        if quality:
            # –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞
            headers = ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ–Ω—Ç']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, formats['table_header'])
            
            worksheet.set_column('A:A', 35)
            worksheet.set_column('B:C', 18)
            
            row += 1
            
            total = quality.get('total', 0)
            
            metrics_data = [
                ('üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', total, 100.0),
                ('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', quality.get('correct', 0), quality.get('correct_percentage', 0)),
                ('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', quality.get('incorrect', 0), quality.get('incorrect_percentage', 0)),
                ('‚ö†Ô∏è –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞', quality.get('no_answer', 0), quality.get('no_answer_percentage', 0)),
            ]
            
            for metric_name, value, percent in metrics_data:
                worksheet.write(row, 0, metric_name, formats['metric_label'])
                worksheet.write(row, 1, value, formats['metric_value'])
                
                # –¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                if '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö' in metric_name:
                    pct_format = formats['good'] if percent >= 70 else formats['warning'] if percent >= 50 else formats['bad']
                else:
                    pct_format = formats['metric_percent']
                
                worksheet.write(row, 2, percent / 100, pct_format)
                row += 1
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
            row += 2
            worksheet.merge_range(row, 0, row, 2,
                                '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º',
                                formats['section_header'])
            row += 1
            
            headers = ['–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–î–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞']
            for col, header in enumerate(headers):
                worksheet.write(row, col, header, formats['table_header'])
            
            row += 1
            
            types_data = [
                ('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É', quality.get('code_searches', 0)),
                ('üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', quality.get('name_searches', 0)),
                ('üí¨ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã', quality.get('general_questions', 0)),
            ]
            
            for type_name, count in types_data:
                worksheet.write(row, 0, type_name, formats['metric_label'])
                worksheet.write(row, 1, count, formats['metric_value'])
                pct = (count / total * 100) if total > 0 else 0
                worksheet.write(row, 2, pct / 100, formats['metric_percent'])
                row += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            if total > 0:
                chart = workbook.add_chart({'type': 'pie'})
                chart.add_series({
                    'name': '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º',
                    'categories': f'=\'üéØ –ö–∞—á–µ—Å—Ç–≤–æ\'!$A${row-2}:$A${row}',
                    'values': f'=\'üéØ –ö–∞—á–µ—Å—Ç–≤–æ\'!$B${row-2}:$B${row}',
                    'data_labels': {'percentage': True, 'leader_lines': True}
                })
                chart.set_title({
                    'name': '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º',
                    'name_font': {'size': 14, 'bold': True}
                })
                chart.set_size({'width': 500, 'height': 400})
                worksheet.insert_chart(row + 2, 0, chart)
    
    async def _create_detailed_data_sheet(self, workbook, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É/–Ω–∞–∑–≤–∞–Ω–∏—é)"""
        worksheet = workbook.add_worksheet('üìã –î–µ—Ç–∞–ª–∏')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(0, 0, 0, 5,
                            f'–î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ó–ê {days} –î–ù–ï–ô',
                            formats['main_title'])
        worksheet.set_row(0, 30)
        
        start_date = datetime.now() - timedelta(days=days)
        
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É, –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        import aiosqlite
        async with aiosqlite.connect(self.db.db_path) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute('''
                SELECT
                    rm.timestamp,
                    u.name as user_name,
                    u.user_type,
                    u.client_code,
                    rm.request_type,
                    rm.query_text,
                    rm.success,
                    rm.has_answer,
                    rm.response_time
                FROM request_metrics rm
                JOIN users u ON rm.user_id = u.telegram_id
                WHERE rm.timestamp >= ?
                  AND u.role != 'admin'
                  AND rm.request_type IN ('general', 'code_search', 'name_search')
                ORDER BY rm.timestamp DESC
                LIMIT 1000
            ''', (start_date,))
            
            interactions = await cursor.fetchall()
        
        if not interactions:
            worksheet.write(2, 0, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', formats['metric_label'])
            return
        
        row = 2
        worksheet.merge_range(row, 0, row, 5,
                            '–ò—Å—Ç–æ—Ä–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É, –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)',
                            formats['section_header'])
        row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            '–î–∞—Ç–∞/–í—Ä–µ–º—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è',
            '–¢–µ–∫—Å—Ç/–°–æ–æ–±—â–µ–Ω–∏–µ', '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫)', '–°—Ç–∞—Ç—É—Å'
        ]
        
        for col, header in enumerate(headers):
            worksheet.write(row, col, header, formats['table_header'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 18)
        worksheet.set_column('B:B', 25)
        worksheet.set_column('C:C', 20)
        worksheet.set_column('D:D', 50)
        worksheet.set_column('E:E', 20)
        worksheet.set_column('F:F', 12)
        
        row += 1
        
        # –î–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        for interaction in interactions:
            worksheet.write(row, 0, str(interaction['timestamp']), formats['datetime'])
            worksheet.write(row, 1, interaction['user_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', formats['cell_data'])
            
            # –¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            request_type = interaction['request_type'] or 'unknown'
            type_names = {
                'navigation': 'üîò –ù–∞–≤–∏–≥–∞—Ü–∏—è (–∫–Ω–æ–ø–∫–∞)',
                'command': '‚å®Ô∏è –ö–æ–º–∞–Ω–¥–∞',
                'general': 'üí¨ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
                'code_search': 'üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É',
                'name_search': 'üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
                'question': '‚ùì –í–æ–ø—Ä–æ—Å'
            }
            type_display = type_names.get(request_type, request_type)
            worksheet.write(row, 2, type_display, formats['cell_data'])
            
            # –¢–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            query = interaction['query_text'] or ''
            worksheet.write(row, 3, query[:100] if query else '', formats['cell_data'])
            
            # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response_time = interaction['response_time'] or 0
            worksheet.write(row, 4, response_time, formats['cell_decimal'])
            
            # –°—Ç–∞—Ç—É—Å (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            success = interaction['success']
            has_answer = interaction['has_answer']
            
            if not success:
                # –†–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Ç.–¥.)
                status_text = '‚ùå –û—à–∏–±–∫–∞'
            elif success and not has_answer:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç (–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
                status_text = '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)'
            else:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å—Ç—å
                status_text = '‚úÖ –£—Å–ø–µ—à–Ω–æ'
            worksheet.write(row, 5, status_text, formats['cell_data'])
            
            row += 1
    
    async def export_dau_report(self, days: int = 30) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ DAU —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        
        formats = self._create_formats(workbook)
        worksheet = workbook.add_worksheet('üìä DAU –û—Ç—á–µ—Ç')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(0, 0, 0, 3,
                            f'–û–¢–ß–ï–¢ –ü–û –ê–ö–¢–ò–í–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú (DAU)',
                            formats['main_title'])
        worksheet.set_row(0, 30)
        
        row = 2
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = ['–î–∞—Ç–∞', 'DAU', '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤', '–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
        for col, header in enumerate(headers):
            worksheet.write(row, col, header, formats['table_header'])
        
        worksheet.set_column('A:D', 22)
        
        # –î–∞–Ω–Ω—ã–µ
        dau_data = await self.db.get_dau_metrics(days)
        
        row += 1
        for data in dau_data:
            worksheet.write(row, 0, str(data.get('activity_date', '')), formats['cell_data'])
            worksheet.write(row, 1, data.get('dau', 0), formats['cell_number'])
            worksheet.write(row, 2, data.get('total_requests', 0), formats['cell_number'])
            avg_req = data.get('avg_requests_per_user') or 0
            worksheet.write(row, 3, avg_req, formats['cell_decimal'])
            row += 1
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        if len(dau_data) > 1:
            chart = workbook.add_chart({'type': 'line'})
            
            chart.add_series({
                'name': 'DAU',
                'categories': f'=\'üìä DAU –û—Ç—á–µ—Ç\'!$A$4:$A${row}',
                'values': f'=\'üìä DAU –û—Ç—á–µ—Ç\'!$B$4:$B${row}',
                'line': {'color': '#3B82F6', 'width': 3}
            })
            
            chart.set_title({
                'name': f'–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({days} –¥–Ω–µ–π)',
                'name_font': {'size': 16, 'bold': True}
            })
            chart.set_x_axis({'name': '–î–∞—Ç–∞', 'name_font': {'size': 12}})
            chart.set_y_axis({'name': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'name_font': {'size': 12}})
            chart.set_size({'width': 800, 'height': 450})
            chart.set_legend({'position': 'bottom'})
            
            worksheet.insert_chart(row + 2, 0, chart)
        
        workbook.close()
        output.seek(0)
        return output.read()
    
    async def export_session_activity_report(self, days: int = 30) -> bytes:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –∑–∞–ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π.
        """
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        
        formats = self._create_formats(workbook)
        
        # === –õ–ò–°–¢ 1: –°–í–û–î–ö–ê ===
        summary_sheet = workbook.add_worksheet('üìä –°–≤–æ–¥–∫–∞')
        await self._create_session_summary_sheet(summary_sheet, formats, days)
        
        # === –õ–ò–°–¢ 2: –î–ï–¢–ê–õ–¨–ù–´–ï –°–ï–°–°–ò–ò ===
        detail_sheet = workbook.add_worksheet('üîç –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–π')
        await self._create_session_detail_sheet(detail_sheet, formats, days)
        
        # === –õ–ò–°–¢ 3: –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú ===
        analysis_sheet = workbook.add_worksheet('‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º')
        await self._create_session_analysis_sheet(analysis_sheet, formats, days)
        
        # === –õ–ò–°–¢ 4: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        recommendations_sheet = workbook.add_worksheet('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
        await self._create_recommendations_sheet(recommendations_sheet, formats, days)
        
        workbook.close()
        output.seek(0)
        return output.read()
    
    async def _create_session_summary_sheet(self, worksheet, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Å–µ—Å—Å–∏—è–º"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 40)
        worksheet.set_column('B:B', 20)
        worksheet.set_column('C:C', 30)
        
        row = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(row, 0, row, 2,
                            'üìä –û–¢–ß–ï–¢ –ü–û –í–†–ï–ú–ï–ù–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô',
                            formats['main_title'])
        worksheet.set_row(row, 30)
        row += 1
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        period_text = f'–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π | –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
        worksheet.merge_range(row, 0, row, 2, period_text, formats['subtitle'])
        worksheet.set_row(row, 20)
        row += 2
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sessions_data = await self.db.get_detailed_session_report(days)
        session_metrics = await self.db.get_session_metrics(days)
        
        if not sessions_data:
            worksheet.write(row, 0, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥', formats['metric_label'])
            return
        
        # === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        worksheet.merge_range(row, 0, row, 2,
                            'üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        total_sessions = len(sessions_data)
        avg_duration = sum(s['duration_minutes'] for s in sessions_data) / total_sessions if total_sessions > 0 else 0
        max_duration = max(s['duration_minutes'] for s in sessions_data) if sessions_data else 0
        min_duration = min(s['duration_minutes'] for s in sessions_data) if sessions_data else 0
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        avg_valid_requests = sum(s.get('valid_requests', 0) for s in sessions_data) / total_sessions if total_sessions > 0 else 0
        avg_total_actions = sum(s.get('total_actions', 0) for s in sessions_data) / total_sessions if total_sessions > 0 else 0
        avg_active_time = sum(s.get('active_time_minutes', 0) for s in sessions_data) / total_sessions if total_sessions > 0 else 0
        avg_reading_time = avg_duration - avg_active_time
        
        worksheet.write(row, 0, 'üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π', formats['metric_label'])
        worksheet.write(row, 1, total_sessions, formats['metric_value'])
        row += 1
        
        worksheet.write(row, 0, '‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –û–ë–©–ê–Ø –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', formats['metric_label'])
        kpi_format = formats['kpi_high'] if avg_duration >= 5 else formats['kpi_medium'] if avg_duration >= 2 else formats['kpi_low']
        worksheet.write(row, 1, avg_duration, kpi_format)
        worksheet.write(row, 2, '–º–∏–Ω—É—Ç', formats['metric_value'])
        row += 1
        
        worksheet.write(row, 0, '‚ö° –°—Ä–µ–¥–Ω–µ–µ –ê–ö–¢–ò–í–ù–û–ï –≤—Ä–µ–º—è', formats['metric_label'])
        worksheet.write(row, 1, avg_active_time, formats['metric_decimal'])
        worksheet.write(row, 2, '–º–∏–Ω—É—Ç (—Ä–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏)', formats['cell_data'])
        row += 1
        
        worksheet.write(row, 0, 'üìñ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ß–¢–ï–ù–ò–ï', formats['metric_label'])
        worksheet.write(row, 1, avg_reading_time, formats['metric_decimal'])
        worksheet.write(row, 2, '–º–∏–Ω—É—Ç (–∏–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)', formats['cell_data'])
        row += 1
        
        worksheet.write(row, 0, 'üìä –°—Ä–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', formats['metric_label'])
        worksheet.write(row, 1, avg_valid_requests, formats['metric_decimal'])
        worksheet.write(row, 2, '–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ—Å—Å–∏—é', formats['metric_value'])
        row += 1
        
        worksheet.write(row, 0, 'üîò –°—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π', formats['metric_label'])
        worksheet.write(row, 1, avg_total_actions, formats['metric_decimal'])
        worksheet.write(row, 2, '–¥–µ–π—Å—Ç–≤–∏–π/—Å–µ—Å—Å–∏—é', formats['metric_value'])
        row += 1
        
        worksheet.write(row, 0, '‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', formats['metric_label'])
        worksheet.write(row, 1, max_duration, formats['metric_decimal'])
        worksheet.write(row, 2, f'–º–∏–Ω—É—Ç ({max_duration/60:.1f} —á)', formats['metric_value'])
        row += 1
        
        worksheet.write(row, 0, '‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', formats['metric_label'])
        worksheet.write(row, 1, min_duration, formats['metric_decimal'])
        worksheet.write(row, 2, '–º–∏–Ω—É—Ç', formats['metric_value'])
        row += 2
        
        # === –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
        worksheet.merge_range(row, 0, row, 2,
                            '‚è±Ô∏è –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
        quick_sessions = len([s for s in sessions_data if s['duration_minutes'] < 2])
        normal_sessions = len([s for s in sessions_data if 2 <= s['duration_minutes'] < 10])
        long_sessions = len([s for s in sessions_data if 10 <= s['duration_minutes'] < 30])
        very_long_sessions = len([s for s in sessions_data if s['duration_minutes'] >= 30])
        
        categories = [
            ('‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (< 2 –º–∏–Ω)', quick_sessions),
            ('‚úÖ –û–±—ã—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (2-10 –º–∏–Ω)', normal_sessions),
            ('‚è∞ –î–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (10-30 –º–∏–Ω)', long_sessions),
            ('üî¥ –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (> 30 –º–∏–Ω)', very_long_sessions)
        ]
        
        for cat_name, count in categories:
            worksheet.write(row, 0, cat_name, formats['metric_label'])
            worksheet.write(row, 1, count, formats['metric_value'])
            percent = (count / total_sessions * 100) if total_sessions > 0 else 0
            worksheet.write(row, 2, percent / 100, formats['metric_percent'])
            row += 1
        
        row += 1
        
        # === –¢–û–ü –ü–†–ò–ß–ò–ù –î–õ–ò–ù–ù–´–• –°–ï–°–°–ò–ô ===
        worksheet.merge_range(row, 0, row, 2,
                            'üîç –¢–û–ü –ü–†–ò–ß–ò–ù –î–õ–ò–ù–ù–´–• –°–ï–°–°–ò–ô',
                            formats['section_header'])
        worksheet.set_row(row, 25)
        row += 1
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏—á–∏–Ω—ã
        all_reasons = []
        for session in sessions_data:
            if session['duration_minutes'] > 10:  # –¢–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                all_reasons.extend(session.get('analysis_reasons', []))
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–π –ø—Ä–∏—á–∏–Ω—ã
        from collections import Counter
        reason_counts = Counter(all_reasons)
        top_reasons = reason_counts.most_common(10)
        
        if top_reasons:
            worksheet.write(row, 0, '–ü—Ä–∏—á–∏–Ω–∞', formats['table_header'])
            worksheet.write(row, 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', formats['table_header'])
            worksheet.write(row, 2, '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö', formats['table_header'])
            row += 1
            
            long_count = len([s for s in sessions_data if s['duration_minutes'] > 10])
            for reason, count in top_reasons:
                worksheet.write(row, 0, reason, formats['cell_data'])
                worksheet.write(row, 1, count, formats['cell_number'])
                percent = (count / long_count * 100) if long_count > 0 else 0
                worksheet.write(row, 2, percent / 100, formats['metric_percent'])
                row += 1
        else:
            worksheet.write(row, 0, '–ù–µ—Ç –¥–ª–∏–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', formats['metric_label'])
    
    async def _create_session_detail_sheet(self, worksheet, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 18)  # –î–∞—Ç–∞/–≤—Ä–µ–º—è
        worksheet.set_column('B:B', 25)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        worksheet.set_column('C:C', 15)  # –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        worksheet.set_column('D:D', 15)  # –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
        worksheet.set_column('E:E', 12)  # –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        worksheet.set_column('F:F', 12)  # –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π
        worksheet.set_column('G:G', 60)  # –ü—Ä–∏—á–∏–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        worksheet.set_column('H:H', 15)  # –°—Ç–∞—Ç—É—Å
        
        row = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(row, 0, row, 7,
                            'üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–°–°–ò–Ø–•',
                            formats['main_title'])
        worksheet.set_row(row, 30)
        row += 1
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        worksheet.merge_range(row, 0, row, 7,
                            '–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è = –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º | –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = –≤–∫–ª—é—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
                            formats['subtitle'])
        row += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sessions_data = await self.db.get_detailed_session_report(days)
        
        if not sessions_data:
            worksheet.write(row, 0, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö', formats['metric_label'])
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            '–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            '–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)',
            '–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω)',
            '–í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
            '–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π',
            '–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏—á–∏–Ω—ã',
            '–°—Ç–∞—Ç—É—Å'
        ]
        for col, header in enumerate(headers):
            worksheet.write(row, col, header, formats['table_header'])
        row += 1
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—Å—Å–∏—è–º
        for session in sessions_data[:500]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 500 —Å–µ—Å—Å–∏–π
            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            start_time = session.get('session_start', '')
            if start_time:
                dt = datetime.fromisoformat(start_time)
                start_str = dt.strftime('%d.%m.%Y %H:%M')
            else:
                start_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            worksheet.write(row, 0, start_str, formats['cell_data'])
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_name = session.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            client_code = session.get('client_code', '')
            user_info = f"{user_name}"
            if client_code:
                user_info += f" ({client_code})"
            worksheet.write(row, 1, user_info, formats['cell_data'])
            
            # –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = session.get('duration_minutes', 0)
            worksheet.write(row, 2, duration, formats['cell_decimal'])
            
            # –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (–º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º)
            active_time = session.get('active_time_minutes', 0)
            worksheet.write(row, 3, active_time, formats['cell_decimal'])
            
            # –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑ request_metrics)
            valid_requests = session.get('valid_requests', 0)
            worksheet.write(row, 4, valid_requests, formats['cell_number'])
            
            # –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π (–≤–∫–ª—é—á–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é)
            total_actions = session.get('total_actions', 0)
            worksheet.write(row, 5, total_actions, formats['cell_number'])
            
            # –ü—Ä–∏—á–∏–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑
            reasons = session.get('analysis_reasons', [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–Ω–∏—Ü–µ –≤—Ä–µ–º–µ–Ω–∏
            reading_time = duration - active_time
            analysis_text = f"–í—Ä–µ–º—è –Ω–∞ —á—Ç–µ–Ω–∏–µ: {reading_time:.1f} –º–∏–Ω\n"
            analysis_text += f"–ù–∞–≤–∏–≥–∞—Ü–∏—è: {session.get('navigation_actions', 0)} –¥–µ–π—Å—Ç–≤–∏–π\n\n"
            analysis_text += '\n'.join(reasons[:4])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 4 –ø—Ä–∏—á–∏–Ω
            
            worksheet.write(row, 6, analysis_text, formats['cell_data'])
            
            # –°—Ç–∞—Ç—É—Å
            if duration >= 30:
                status = 'üî¥ –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è'
            elif duration >= 10:
                status = '‚è∞ –î–ª–∏–Ω–Ω–∞—è'
            elif duration >= 2:
                status = '‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è'
            else:
                status = '‚ö° –ë—ã—Å—Ç—Ä–∞—è'
            worksheet.write(row, 7, status, formats['cell_data'])
            
            row += 1
    
    async def _create_session_analysis_sheet(self, worksheet, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 25)
        worksheet.set_column('B:B', 20)
        worksheet.set_column('C:C', 15)
        worksheet.set_column('D:D', 15)
        worksheet.set_column('E:E', 50)
        worksheet.set_column('F:F', 50)
        
        row = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(row, 0, row, 5,
                            '‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –°–ï–°–°–ò–ô (> 30 –º–∏–Ω—É—Ç)',
                            formats['main_title'])
        worksheet.set_row(row, 30)
        row += 2
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sessions_data = await self.db.get_detailed_session_report(days)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (> 30 –º–∏–Ω—É—Ç)
        long_sessions = [s for s in sessions_data if s.get('duration_minutes', 0) > 30]
        
        if not long_sessions:
            worksheet.merge_range(row, 0, row, 5,
                                '‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!',
                                formats['subsection_header'])
            row += 2
            worksheet.write(row, 0, '–í—Å–µ —Å–µ—Å—Å–∏–∏ –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 30 –º–∏–Ω—É—Ç)', formats['metric_label'])
            return
        
        # === –°–í–û–î–ö–ê –ü–û –ü–†–û–ë–õ–ï–ú–ê–ú ===
        worksheet.merge_range(row, 0, row, 5,
                            'üìä –°–í–û–î–ö–ê –ü–û –ü–†–û–ë–õ–ï–ú–ù–´–ú –°–ï–°–°–ò–Ø–ú',
                            formats['section_header'])
        row += 1
        
        worksheet.write(row, 0, 'üî¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π', formats['metric_label'])
        worksheet.write(row, 1, len(long_sessions), formats['metric_value'])
        worksheet.write(row, 2, f'{len(long_sessions) / len(sessions_data) * 100:.1f}% –æ—Ç –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π', formats['cell_data'])
        row += 1
        
        avg_duration = sum(s['duration_minutes'] for s in long_sessions) / len(long_sessions)
        worksheet.write(row, 0, '‚è∞ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö', formats['metric_label'])
        worksheet.write(row, 1, avg_duration, formats['metric_decimal'])
        worksheet.write(row, 2, '–º–∏–Ω—É—Ç', formats['metric_value'])
        row += 1
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        avg_valid = sum(s.get('valid_requests', 0) for s in long_sessions) / len(long_sessions)
        avg_actions = sum(s.get('total_actions', 0) for s in long_sessions) / len(long_sessions)
        
        worksheet.write(row, 0, 'üìä –°—Ä–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', formats['metric_label'])
        worksheet.write(row, 1, avg_valid, formats['metric_decimal'])
        row += 1
        
        worksheet.write(row, 0, 'üîò –°—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π', formats['metric_label'])
        worksheet.write(row, 1, avg_actions, formats['metric_decimal'])
        row += 2
        
        # === –î–ï–¢–ê–õ–ò –ü–†–û–ë–õ–ï–ú–ù–´–• –°–ï–°–°–ò–ô ===
        worksheet.merge_range(row, 0, row, 5,
                            'üîç –¢–û–ü-50 –°–ê–ú–´–• –î–õ–ò–ù–ù–´–• –°–ï–°–°–ò–ô',
                            formats['section_header'])
        row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            '–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è',
            '–í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
            '–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω',
            '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
        ]
        for col, header in enumerate(headers):
            worksheet.write(row, col, header, formats['table_header'])
        row += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        long_sessions_sorted = sorted(long_sessions, key=lambda x: x.get('duration_minutes', 0), reverse=True)
        
        for session in long_sessions_sorted[:50]:  # –¢–æ–ø-50 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö
            user_info = f"{session.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}"
            if session.get('client_code'):
                user_info += f"\n({session['client_code']})"
            worksheet.write(row, 0, user_info, formats['cell_data'])
            
            duration = session.get('duration_minutes', 0)
            duration_text = f"{duration:.1f} –º–∏–Ω\n({duration/60:.1f} —á)"
            worksheet.write(row, 1, duration_text, formats['cell_data'])
            
            active_time = session.get('active_time_minutes', 0)
            active_text = f"{active_time:.1f} –º–∏–Ω\n({(duration - active_time):.1f} –º–∏–Ω –Ω–∞ —á—Ç–µ–Ω–∏–µ)"
            worksheet.write(row, 2, active_text, formats['cell_data'])
            
            valid_requests = session.get('valid_requests', 0)
            total_actions = session.get('total_actions', 0)
            requests_text = f"{valid_requests} –≤–∞–ª–∏–¥–Ω—ã—Ö\n{total_actions} –≤—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π"
            worksheet.write(row, 3, requests_text, formats['cell_data'])
            
            reasons = session.get('analysis_reasons', [])
            reasons_text = '\n'.join(reasons)
            worksheet.write(row, 4, reasons_text, formats['cell_data'])
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            actions = []
            reading_time = duration - active_time
            
            if reading_time > 10:
                actions.append(f'üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–≥–æ –∏–∑—É—á–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª ({reading_time:.1f} –º–∏–Ω)')
                actions.append('‚Üí –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª–µ–∑–Ω–∞')
            
            if session.get('navigation_actions', 0) > valid_requests * 2:
                nav_count = session.get('navigation_actions', 0)
                actions.append(f'üîò –ú–Ω–æ–≥–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ({nav_count} vs {valid_requests} –∑–∞–ø—Ä–æ—Å–æ–≤)')
                actions.append('‚Üí –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')
            
            if valid_requests == 0:
                actions.append('‚ö†Ô∏è –¢–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤')
                actions.append('‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—à–µ–ª —á—Ç–æ –∏—Å–∫–∞–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–µ–ª')
            
            pauses = session.get('pauses', [])
            if pauses:
                max_pause = max(p['pause_minutes'] for p in pauses)
                if max_pause > 10:
                    actions.append(f'‚è∏Ô∏è –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞: {max_pause:.1f} –º–∏–Ω')
                    actions.append('‚Üí –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–ª–µ–∫—Å—è –∏–ª–∏ –¥—É–º–∞–ª –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π')
            
            if not actions:
                actions.append('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º')
                actions.append('‚Üí –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ')
            
            worksheet.write(row, 5, '\n'.join(actions), formats['cell_data'])
            row += 1
    
    async def _create_recommendations_sheet(self, worksheet, formats, days):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 60)
        worksheet.set_column('B:B', 80)
        
        row = 0
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        worksheet.merge_range(row, 0, row, 1,
                            'üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò',
                            formats['main_title'])
        worksheet.set_row(row, 30)
        row += 2
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sessions_data = await self.db.get_detailed_session_report(days)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        long_sessions = [s for s in sessions_data if s.get('duration_minutes', 0) > 30]
        avg_duration = sum(s['duration_minutes'] for s in sessions_data) / len(sessions_data) if sessions_data else 0
        
        # === –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        worksheet.merge_range(row, 0, row, 1,
                            'üéØ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò',
                            formats['section_header'])
        row += 1
        
        recommendations = [
            {
                'title': '1Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π',
                'desc': '–¢–µ–∫—É—â–∞—è —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {:.1f} –º–∏–Ω—É—Ç.\n\n'
                        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n'
                        '‚Ä¢ –ï—Å–ª–∏ –≤—Ä–µ–º—è > 10 –º–∏–Ω—É—Ç: –¥–æ–±–∞–≤—å—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ FAQ\n'
                        '‚Ä¢ –ï—Å–ª–∏ –≤—Ä–µ–º—è > 30 –º–∏–Ω—É—Ç: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                        '‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: 3-7 –º–∏–Ω—É—Ç'.format(avg_duration)
            },
            {
                'title': '2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø–∞—É–∑ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏',
                'desc': '–î–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å:\n'
                        '‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑—É—á–∞–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—ç—Ç–æ —Ö–æ—Ä–æ—à–æ)\n'
                        '‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)\n'
                        '‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–ª–µ–∫—Å—è (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)\n\n'
                        '–î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞'
            },
            {
                'title': '3Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π',
                'desc': f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(long_sessions)} —Å–µ—Å—Å–∏–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é > 30 –º–∏–Ω—É—Ç.\n\n'
                        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n'
                        '‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∑–∞–ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n'
                        '‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã\n'
                        '‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã, –≤—ã–∑—ã–≤–∞—é—â–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ'
            },
            {
                'title': '4Ô∏è‚É£ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞',
                'desc': '–î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π:\n'
                        '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n'
                        '‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –ø–æ–∏—Å–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é\n'
                        '‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n'
                        '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
            }
        ]
        
        for rec in recommendations:
            worksheet.write(row, 0, rec['title'], formats['subsection_header'])
            row += 1
            worksheet.write(row, 0, rec['desc'], formats['cell_data'])
            row += 2
        
        # === –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===
        worksheet.merge_range(row, 0, row, 1,
                            'üìä –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø',
                            formats['section_header'])
        row += 1
        
        metrics_to_track = [
            '‚úÖ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 3-7 –º–∏–Ω—É—Ç)',
            '‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–µ—Å—Å–∏–π > 30 –º–∏–Ω—É—Ç (—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: < 5%)',
            '‚úÖ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ (—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 3-8)',
            '‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ (—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: < 10%)'
        ]
        
        for metric in metrics_to_track:
            worksheet.write(row, 0, metric, formats['metric_label'])
            row += 1